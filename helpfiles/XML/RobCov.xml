<?xml version="1.0" encoding="utf-8"?>
<HelpXML>
   <Title><!--This is simply the filename-->RobCov</Title>
   <Purpose><!--This is the second line of the .m file-->robCov computes covariance matrix of robust regression coefficients
</Purpose>
   <Description><!--Description section-->Under some regularity conditions, robust (S and MM) estimates are asymptotically normal, thereby allowing for Wald-type tests and confidence intervals. The covariance matrix of the estimated parameters
\[
cov(\hat \beta)= q^2 \times \sigma^2 \times v \times V_X^{-1}
\]
consists of four parts:
1) $q$ a correction factor for the scale estimate;
2) $\sigma$ the scale parameter.
3) $v$ a correction factor depending on the $\psi$ function which is used;
4) $V_X$= a matrix part. For OLS $V_X=X'X$. Given that in robust regression we give a weight to each observation, the matrix $X'X$ should be replaced by something like $X'WX$, where $W$ is a diagonal matrix containing the weights assigned to each observation.
The purpose of this function is to provide the user with different options for the estimate of $cov(\hat \beta)$ where $\hat \beta$ is a vector of regression coefficients obtained using S or MM estimation and a particular $\rho$ function.
</Description>
   <InpArgs><!--REQUIRED INPUT ARGUMENT SECTION-->
      <Item>
         <Name>X</Name>
         <ShortDesc>Data matrix of explanatory variables (also called 'regressors') of dimension (n x p-1).</ShortDesc>
         <TypeInd>Rows of X represent observations, and columns represent variables.</TypeInd>
         <LongDesc> </LongDesc>
         <Example> </Example>
         <DataType>single | double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>scaledres</Name>
         <ShortDesc>Scaled residuals.Vector.</ShortDesc>
         <TypeInd>n-times-1 vector containing scaled residuals $r_i/\hat \sigma$.</TypeInd>
         <LongDesc> </LongDesc>
         <Example> </Example>
         <DataType>single | double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>scaleest</Name>
         <ShortDesc>robust estimate of the scale.</ShortDesc>
         <TypeInd>Scalar.</TypeInd>
         <LongDesc>Robust estimate of sigma ($\hat \sigma$).</LongDesc>
         <Example> </Example>
         <DataType>single | double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
   </InpArgs>
   <OptArgs><!--OPTIONAL (NAME/PAIRS) INPUT ARGUMENT SECTION-->
      <Item>
         <Name>intercept</Name>
         <ShortDesc>Indicator for constant term.</ShortDesc>
         <TypeInd>Scalar.</TypeInd>
         <LongDesc>If 1, a model with constant term will be fitted (default), if 0, no constant term will be included.</LongDesc>
         <Example>'intercept',1</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>eff</Name>
         <ShortDesc>nominal efficiency.</ShortDesc>
         <TypeInd>Scalar.</TypeInd>
         <LongDesc>Scalar defining nominal efficiency (i.e. a number between 0.5 and 0.99). The default value is 0.95 Asymptotic nominal efficiency is:
$(\int \psi' d\Phi)^2 / (\psi^2 d\Phi)$</LongDesc>
         <Example>'eff',0.99</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>intercept</Name>
         <ShortDesc>Indicator for constant term.</ShortDesc>
         <TypeInd>Scalar.</TypeInd>
         <LongDesc>If 1, a model with constant term will be fitted (default), if 0, no constant term will be included.</LongDesc>
         <Example>'intercept',1</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>bdp</Name>
         <ShortDesc>breakdown point.</ShortDesc>
         <TypeInd>Scalar.</TypeInd>
         <LongDesc>It measures the fraction of outliers the algorithm should resist. In this case any value greater than 0 but smaller or equal than 0.5 will do fine.
Note that given bdp nominal efficiency is automatically determined.
% REMARK: just one between bdp and eff must be specified. If both of them are specified an error is produced. If both of them are not specified the defulat is tu use the tuning constant associated to a nominal efficiency of 0.95.</LongDesc>
         <Example>'bdp',0.4</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>rhofunc</Name>
         <ShortDesc>rho function.</ShortDesc>
         <TypeInd>String.</TypeInd>
         <LongDesc>String which specifies the rho function which must be used to weight the residuals. Possible values are 'bisquare' 'optimal' 'hyperbolic' 'hampel'.
'bisquare' uses Tukey's $\rho$ and $\psi$ functions.
See TBrho.m and TBpsi.m.
'optimal' uses optimal $\rho$ and $\psi$ functions.
See OPTrho.m and OPTpsi.m.
'hyperbolic' uses hyperbolic $\rho$ and $\psi$ functions.
See HYPrho.m and HYPpsi.m.
'hampel' uses Hampel $\rho$ and $\psi$ functions.
See HArho.m and HApsi.m.
The default is bisquare</LongDesc>
         <Example>'rhofunc','optimal'</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>rhofuncparam</Name>
         <ShortDesc>Additional parameters for the specified rho function.</ShortDesc>
         <TypeInd>Scalar or vector.</TypeInd>
         <LongDesc>For hyperbolic rho function it is possible to set up the value of k = sup CVC (the default value of k is 4.5).
For Hampel rho function it is possible to define parameters a, b and c (the default values are a=2, b=4, c=8)</LongDesc>
         <Example>'rhofuncparam',5</Example>
         <DataType>single | double</DataType>
         <Struct> </Struct>
      </Item>
   </OptArgs>
   <OutArgs><!--OUTPUT ARGUMENT SECTION-->
      <Item>
         <Name>out</Name>
         <ShortDesc> </ShortDesc>
         <TypeInd> </TypeInd>
         <LongDesc> </LongDesc>
         <Structure>
            <ItemCell>
               <Value>covrob</Value>
               <Description>p-times-p (if intercept is 1 else is (p-1)-by-(p-1)) matrix containing asymptotic variance covariance matrix of regression coefficients. covrob implements equation (4.49) of p. 101 of Maronna et al. (2006) namely:
\[
\mbox{covrob} = cov( \hat \beta) = \hat \sigma^2 \hat v (X'X)^{-1}
\]
where
\[
\hat v = \frac{n}{n-p} n\frac{\sum_{i=1}^n \psi(r_i/\hat \sigma)^2}{\sum_{i=1}^n \psi'(r_i/\hat \sigma)^2}
\]</Description>
            </ItemCell>
            <ItemCell>
               <Value>covrob1</Value>
               <Description>p-times-p (if intercept is 1 else is (p-1)-by-(p-1)) matrix containing asymptotic variance covariance matrix of regression coefficients. covrob1 implements equation (7.81) of p. 171 of Huber and Ronchetti (2009) with $(X'X)^{-1}$ replaced by $(X' W X)^{-1}$ namely:
\[
\mbox{covrob1} = K^2 \hat v (X' W X)^{-1};
\]
where $K=1+p n \frac{var(\psi' (r/\hat \sigma))}{ (\sum_{i=1}^n \psi'(r_i/\hat \sigma))^2}$ ;</Description>
            </ItemCell>
            <ItemCell>
               <Value>covrob2</Value>
               <Description>p-times-p (if intercept is 1 else is (p-1)-by-(p-1)) matrix containing asymptotic variance covariance matrix of regression coefficients. covrob1 implements equation (7.81) of p. 171 of Huber and Ronchetti (2009) with $X'X$ and $K^2$ namely:
\[
\mbox{covrob2} = K^2 \hat v (X' X)^{-1};
\]
where $K=1+p n \frac{var(\psi' (r/\hat \sigma))}{ (\sum_{i=1}^n \psi'(r_i/\hat \sigma))^2}$ ;</Description>
            </ItemCell>
            <ItemCell>
               <Value>covrob3</Value>
               <Description>p-times-p (if intercept is 1 else is (p-1)-by-(p-1)) matrix containing asymptotic variance covariance matrix of regression coefficients. covrob implements equation (7.82) of p. 171 of of Huber and Ronchetti (2009).
namely:
\[
\mbox{covrob3} = K \hat v (X' W X)^{-1};
\]
where $K=1+p n \frac{var(\psi' (r/\hat \sigma))}{ (\sum_{i=1}^n \psi'(r_i/\hat \sigma))^2}$ ;</Description>
            </ItemCell>
            <ItemCell>
               <Value>covrob4</Value>
               <Description>p-times-p (if intercept is 1 else is (p-1)-by-(p-1)) matrix containing asymptotic variance covariance matrix of regression coefficients. covrob implements equation (7.83) of p. 171 of of Huber and Ronchetti (2009).
namely:
\[
\mbox{covrob4} = \frac{1}{n-p} K^{-1} \sum_{i=1}^n (\psi(r_i/\hat \sigma))^2 (X' W X)^{-1} X'X (X' W X)^{-1};
\]</Description>
            </ItemCell>
            <ItemCell>
               <Value>q</Value>
               <Description>scalar. Correction for scale estimate (see Maronna and Yohai CSDA 2010). It is defined as
\[
q=1+\frac{p}{2n} \frac{a}{b \times c}
\]
where
\[
a = \frac{1}{n} \sum_{i=1}^n (\psi(r_i/\hat \sigma))^2
\]
\[
b = \frac{1}{n} \sum_{i=1}^n (\psi'(r_i/\hat \sigma))^2
\]
\[
c = \frac{1}{n} \sum_{i=1}^n (\psi(r_i/\hat \sigma)) r_i/\hat \sigma)
\]</Description>
            </ItemCell>
         </Structure>
      </Item>
   </OutArgs>
   <MoreAbout><!--MORE ABOUT SECTION--></MoreAbout>
   <Acknowledgements><!--ACKNOWLEDGEMENTS SECTION--></Acknowledgements>
   <References><!--REFERENCES SECTION-->
      <Item>Maronna, R.A., Martin D. and Yohai V.J. (2006), Robust Statistics, Theory and Methods, Wiley, New York.</Item>
      <Item>P.J. Huber and E.M. Ronchetti (2009), Robust Statistics, 2nd Edition, Wiley New York.</Item>
      <Item>Maronna, R.A., and Yohai V.J. (2010), Correcting MM estimates for fat data sets. Computational Statistics and Data Analysis, 54, pp. 3168-3173.</Item>
      <Item>Koller, M. and W. A. Stahel (2011). Sharpening wald-type inference in robust regression for small samples. Computational Statistics &amp; Data Analysis 55(8), pp. 2504-2515.</Item>
      <Item>Croux, C., G. Dhaene, and D. Hoorelbeke (2003). Robust standard errors for robust estimators. Technical report, Dept. of Applied Economics, K.U.
Leuven.</Item>
   </References>
   <SeeAlso><!--SEE ALSO SECTION-->
      <Item>Sreg</Item>
      <Item>MMreg</Item>
      <Item>Taureg</Item>
   </SeeAlso>
   <Ex><!--EXAMPLES SECTION-->
      <Item>
         <Title>Compare the 5 estimates of cov matrix.</Title>
         <Desc> </Desc>
         <MATLABcode>
            <ItemCell>n=200;</ItemCell>
            <ItemCell>p=3;</ItemCell>
            <ItemCell>state1=123456;</ItemCell>
            <ItemCell>randn('state', state1);</ItemCell>
            <ItemCell>X=randn(n,p);</ItemCell>
            <ItemCell>y=randn(n,1);</ItemCell>
            <ItemCell>kk=10;</ItemCell>
            <ItemCell>ycont = y;</ItemCell>
            <ItemCell>ycont(1:kk)=ycont(1:kk)+7;</ItemCell>
            <ItemCell>[outS]=Sreg(ycont,X);</ItemCell>
            <ItemCell>rhofunc='optimal';</ItemCell>
            <ItemCell>bdp=0.5;</ItemCell>
            <ItemCell>out=RobCov(X,outS.residuals,outS.scale);</ItemCell>
            <ItemCell>disp('Compare 5 estimates of cov(\hat beta)')</ItemCell>
            <ItemCell>disp(out.covrob)</ItemCell>
            <ItemCell>disp('--------')</ItemCell>
            <ItemCell>disp(out.covrob1)</ItemCell>
            <ItemCell>disp('--------')</ItemCell>
            <ItemCell>disp(out.covrob2)</ItemCell>
            <ItemCell>disp('--------')</ItemCell>
            <ItemCell>disp(out.covrob3)</ItemCell>
            <ItemCell>disp('--------')</ItemCell>
            <ItemCell>disp(out.covrob4)</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title> </Title>
         <Desc> </Desc>
         <MATLABcode>
            <ItemCell>rhofunc='optimal';</ItemCell>
            <ItemCell>bdp=0.5;</ItemCell>
            <ItemCell>out=RobCov(X,outS.residuals,outS.scale,'rhofunc',rhofunc,'bdp',0.5);</ItemCell>
            <ItemCell>covrobS=out.covrob;</ItemCell>
            <ItemCell>covrobS1=out.covrob1;</ItemCell>
            <ItemCell>covrobS2=out.covrob2;</ItemCell>
            <ItemCell>covrobS3=out.covrob3;</ItemCell>
            <ItemCell>covrobS4=out.covrob4;</ItemCell>
            <ItemCell>% Compute robust S t-statistics</ItemCell>
            <ItemCell>tstatS=outS.beta./sqrt(diag(covrobS));</ItemCell>
            <ItemCell>tstatS1=outS.beta./sqrt(diag(covrobS1));</ItemCell>
            <ItemCell>tstatS2=outS.beta./sqrt(diag(covrobS2));</ItemCell>
            <ItemCell>tstatS3=outS.beta./sqrt(diag(covrobS3));</ItemCell>
            <ItemCell>tstatS4=outS.beta./sqrt(diag(covrobS4));</ItemCell>
            <ItemCell>eff=0.95;</ItemCell>
            <ItemCell>outMM=MMregcore(ycont,X,outS.beta,outS.scale);</ItemCell>
            <ItemCell>out=RobCov(X,outMM.residuals,outS.scale,'rhofunc',rhofunc,'eff',eff);</ItemCell>
            <ItemCell>covrobMM=out.covrob;</ItemCell>
            <ItemCell>covrobMM1=out.covrob1;</ItemCell>
            <ItemCell>covrobMM2=out.covrob2;</ItemCell>
            <ItemCell>covrobMM3=out.covrob3;</ItemCell>
            <ItemCell>covrobMM4=out.covrob4;</ItemCell>
            <ItemCell>tstatMM=outMM.beta./sqrt(diag(covrobMM));</ItemCell>
            <ItemCell>tstatMM1=outMM.beta./sqrt(diag(covrobMM1));</ItemCell>
            <ItemCell>tstatMM2=outMM.beta./sqrt(diag(covrobMM2));</ItemCell>
            <ItemCell>tstatMM3=outMM.beta./sqrt(diag(covrobMM3));</ItemCell>
            <ItemCell>tstatMM4=outMM.beta./sqrt(diag(covrobMM4));</ItemCell>
            <ItemCell>disp('tstat from S')</ItemCell>
            <ItemCell>disp([tstatS tstatS1 tstatS2 tstatS3 tstatS4])</ItemCell>
            <ItemCell>disp('--------')</ItemCell>
            <ItemCell>disp('tstat from MM')</ItemCell>
            <ItemCell>disp([tstatMM tstatMM1 tstatMM2 tstatMM3 tstatMM4])</ItemCell>
            <ItemCell>qhat=out.q;</ItemCell>
            <ItemCell>disp('tstat from MM after correction for sigma')</ItemCell>
            <ItemCell>disp([tstatMM/qhat tstatMM1/qhat tstatMM2/qhat tstatMM3/qhat tstatMM4/qhat])</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
   </Ex>
   <ExtraEx><!--EXTRA EXAMPLES SECTION--></ExtraEx>
</HelpXML>