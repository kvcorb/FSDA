<?xml version="1.0" encoding="utf-8"?>
<HelpXML>
   <Title><!--This is simply the filename-->PoolClose</Title>
   <Purpose><!--This is the second line of the .m file-->PoolClose closes the pool of MATLAB instances opened with PoolPrepare to execute code in parallel 
</Purpose>
   <Description><!--Description section-->PoolPrepare and PoolClose are used respectively to open and close a prespecified number of parallel MATLAB sessions, which need to be distributed over the physical cores where MATLAB is running.
</Description>
   <InpArgs><!--REQUIRED INPUT ARGUMENT SECTION-->
      <Item>
         <Name>cleanpool</Name>
         <ShortDesc>Function name.</ShortDesc>
         <TypeInd>Scalar {0,1}.</TypeInd>
         <LongDesc>Indicated if the open pool must be closed or not. It is useful to leave it open if there are subsequent parallel sessions to execute, so that to save the time required to open a new pool.</LongDesc>
         <Example> </Example>
         <DataType>integer | logical</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>tstart</Name>
         <ShortDesc>Time stamp produced by PoolPrepare.</ShortDesc>
         <TypeInd>Double.</TypeInd>
         <LongDesc>Contains the internal computer time at the end of the execution of the PoolPrepare function, so that to monitor the overall execution time of the statements embedded between PoolPrepare and PoolClose.</LongDesc>
         <Example> </Example>
         <DataType>double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>progbar</Name>
         <ShortDesc>Status of the progress bar generated by PoolPrepare.</ShortDesc>
         <TypeInd>Structure or integer.</TypeInd>
         <LongDesc>Contains the status of the progress bar used to monitor the progression of the parallel execution.</LongDesc>
         <Example> </Example>
         <DataType>struct | double&#xD;
&#xD;
&#xD;
 Optional Input arguments:</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>usePCT</Name>
         <ShortDesc>Boolean indicating if the parallel computing toolbox is installed.</ShortDesc>
         <TypeInd>Scalar {0,1}.</TypeInd>
         <LongDesc>Parpool checks for the existence of the parallel computing toolbox. 'usePCT' returns the result of the check to PoolClose, to avoid additional unnecessary checks.</LongDesc>
         <Example> </Example>
         <DataType>integer | logical</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>usematlabpool</Name>
         <ShortDesc>Boolean indicating the use of 'usematlabpool' or 'parpool'.</ShortDesc>
         <TypeInd>Scalar {0,1}.</TypeInd>
         <LongDesc>Boolean indicating if the pool of MATLAB instances is created using 'matlabpool' or 'parpool', depending on the MATLAB version installed. From R2013b 'parpool' is used. Earlier releases use 'usematlabpool'.</LongDesc>
         <Example> </Example>
         <DataType>integer | logical</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
   </InpArgs>
   <OptArgs><!--OPTIONAL (NAME/PAIRS) INPUT ARGUMENT SECTION--></OptArgs>
   <OutArgs><!--OUTPUT ARGUMENT SECTION-->
      <Item>
         <Name>tend</Name>
         <ShortDesc>Scalar</ShortDesc>
         <TypeInd>Time execution of the parallel instances.</TypeInd>
         <LongDesc>Contains the execution time of the statements between PoolPrepare and PoolClose.
Data Types - double</LongDesc>
         <Structure> </Structure>
      </Item>
   </OutArgs>
   <MoreAbout><!--MORE ABOUT SECTION--></MoreAbout>
   <Acknowledgements><!--ACKNOWLEDGEMENTS SECTION--></Acknowledgements>
   <References><!--REFERENCES SECTION--></References>
   <SeeAlso><!--SEE ALSO SECTION-->
      <Item>PoolPrepare</Item>
      <Item>parfor</Item>
   </SeeAlso>
   <Ex><!--EXAMPLES SECTION-->
      <Item>
         <Title>Sequential vs parallel run.</Title>
         <Desc> </Desc>
         <MATLABcode>
            <ItemCell>n = 50000;</ItemCell>
            <ItemCell>x = randn(1,n) ;</ItemCell>
            <ItemCell>y = zeros(1,n);</ItemCell>
            <ItemCell>% sequential run</ItemCell>
            <ItemCell>tic</ItemCell>
            <ItemCell>for i = 1 : n</ItemCell>
            <ItemCell>    y(i) = std(x(1:i));</ItemCell>
            <ItemCell>end</ItemCell>
            <ItemCell>fprintf('\n\n\n  Normal for: %f secs \n \n ',toc);</ItemCell>
            <ItemCell>% parallel run</ItemCell>
            <ItemCell>numpool = 4;</ItemCell>
            <ItemCell>pariter = n;</ItemCell>
            <ItemCell>UserOptions = {};</ItemCell>
            <ItemCell>[numpool, tstart, progbar, usePCT, usematlabpool] = ...</ItemCell>
            <ItemCell>        PoolPrepare(numpool,pariter,UserOptions);</ItemCell>
            <ItemCell>parfor i = 1 : n</ItemCell>
            <ItemCell>    y(i) = std(x(1:i));</ItemCell>
            <ItemCell>end</ItemCell>
            <ItemCell>cleanpool = 1; % this closes the pool of MATLAB sessions</ItemCell>
            <ItemCell>tend = PoolClose(cleanpool, tstart, progbar, usePCT,  usematlabpool);</ItemCell>
            <ItemCell>fprintf('\n\n\n      parFor: %f secs\n\n',tend);</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
   </Ex>
   <ExtraEx><!--EXTRA EXAMPLES SECTION--></ExtraEx>
</HelpXML>