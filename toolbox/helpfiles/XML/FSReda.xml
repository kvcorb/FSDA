<?xml version="1.0" encoding="utf-8"?>
<HelpXML>
   <Title><!--This is simply the filename-->FSReda</Title>
   <Purpose><!--This is the second line of the .m file-->FSReda enables to monitor several quantities in each step of the forward search
</Purpose>
   <Description><!--Description section--></Description>
   <InpArgs><!--REQUIRED INPUT ARGUMENT SECTION-->
      <Item>
         <Name>y</Name>
         <ShortDesc>A vector with n elements that contains the response variables.
</ShortDesc>
         <TypeInd>Missing values (NaN's) and infinite values (Inf's) are allowed, since observations (rows) with missing or infinite values will automatically be excluded from the computations.
</TypeInd>
         <LongDesc/>
         <Example/>
         <DataType>single| double
</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>X</Name>
         <ShortDesc>Data matrix of explanatory variables (also called 'regressors') of dimension (n x p-1).</ShortDesc>
         <TypeInd>Rows of X represent observations, and columns represent variables.</TypeInd>
         <LongDesc>Missing values (NaN's) and infinite values (Inf's) are allowed, since observations (rows) with missing or infinite values will automatically be excluded from the computations.</LongDesc>
         <Example> </Example>
         <DataType>single| double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>bsb</Name>
         <ShortDesc>list of units forming the initial subset.</ShortDesc>
         <TypeInd>Vector or scalar.</TypeInd>
         <LongDesc>If bsb=0 (default) then the procedure starts with p units randomly chosen else if bsb is not 0 the search will start with m0=length(bsb).</LongDesc>
         <Example> </Example>
         <DataType>single| double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
   </InpArgs>
   <OptArgs><!--OPTIONAL (NAME/PAIRS) INPUT ARGUMENT SECTION-->
      <Item>
         <Name>intercept</Name>
         <ShortDesc>Indicator for constant term.
</ShortDesc>
         <TypeInd>Scalar.
</TypeInd>
         <LongDesc>If 1, a model with constant term will be fitted (default), else no constant term will be included.
</LongDesc>
         <Example>'intercept',1
</Example>
         <DataType>double
</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>init</Name>
         <ShortDesc>Search initialization.</ShortDesc>
         <TypeInd>Scalar.</TypeInd>
         <LongDesc>It specifies the point where to initialize the search and start monitoring required diagnostics. if init is not specified it will be set equal to :
p+1, if the sample size is smaller than 40;
min(3*p+1,floor(0.5*(n+p+1))), otherwise.</LongDesc>
         <Example>'init',100 starts monitoring from step m=100</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>nocheck</Name>
         <ShortDesc>Check input arguments.</ShortDesc>
         <TypeInd>Scalar.</TypeInd>
         <LongDesc>If nocheck is equal to 1 no check is performed on matrix y and matrix X. Notice that y and X are left unchanged. In other words the additional column of ones for the intercept is not added. As default nocheck=0. The controls on h, alpha and nsamp still remain</LongDesc>
         <Example>'nocheck',1</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>tstat</Name>
         <ShortDesc>the kind of t-statistics which have to be monitored.</ShortDesc>
         <TypeInd>Character.</TypeInd>
         <LongDesc>tstat = 'trad' implies monitoring of traditional t statistics (out.Tols). In this case the estimate of $\sigma^2$ at step m is based on $s^2_m$ (notice that $s^2_m&amp;lt;&amp;lt;\sigma^2$ when m/n is small) tstat = 'scal' (default) implies monitoring of rescaled t statistics In this case the estimate of $\sigma^2$ at step m is based on $s^2_m / var_{truncnorm(m/n)}$ where $var_{truncnorm(m/n)}$ is the variance of the truncated normal distribution.</LongDesc>
         <Example>'tstat','trad'</Example>
         <DataType>char</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>conflev</Name>
         <ShortDesc>confidence levels to be used to compute confidence interval for the elements of $\beta$ and for $\sigma^2$.</ShortDesc>
         <TypeInd>Vector.</TypeInd>
         <LongDesc>The default value of conflev is [0.95 0.99] that is 95% and 99% confidence intervals are computed.</LongDesc>
         <Example>'conflev',[0.90 0.93]</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
   </OptArgs>
   <OutArgs><!--OUTPUT ARGUMENT SECTION-->
      <Item>
         <Name>out</Name>
         <ShortDesc/>
         <TypeInd/>
         <LongDesc/>
         <Structure>
            <ItemCell>
               <Value>RES</Value>
               <Description>n x (n-init+1) = matrix containing the monitoring of scaled residuals:
1st row = residual for first unit;
...;
nth row = residual for nth unit.</Description>
            </ItemCell>
            <ItemCell>
               <Value>LEV</Value>
               <Description>(n+1) x (n-init+1) = matrix containing the monitoring of leverage:
1st row = leverage for first unit:
...;
nth row = leverage for nth unit.</Description>
            </ItemCell>
            <ItemCell>
               <Value>BB</Value>
               <Description>n x (n-init+1) matrix containing the information about the units belonging to the subset at each step of the forward search:
1st col = indexes of the units forming subset in the initial step;
...;
last column = units forming subset in the final step (all units).</Description>
            </ItemCell>
            <ItemCell>
               <Value>mdr</Value>
               <Description>n-init x 3 matrix which contains the monitoring of minimum deletion residual or (m+1)ordered residual at each step of the forward search:
1st col = fwd search index (from init to n-1);
2nd col = minimum deletion residual;
3rd col = (m+1)-ordered residual.
Remark: these quantities are stored with sign, that is the min deletion residual is stored with negative sign if it corresponds to a negative residual.</Description>
            </ItemCell>
            <ItemCell>
               <Value>msr</Value>
               <Description>n-init+1 x 3 = matrix which contains the monitoring of maximum studentized residual or m-th ordered residual:
1st col = fwd search index (from init to n);
2nd col = maximum studentized residual;
3rd col = (m)-ordered studentized residual.</Description>
            </ItemCell>
            <ItemCell>
               <Value>nor</Value>
               <Description>(n-init+1) x 4 matrix containing the monitoring of normality test in each step of the forward search:
1st col = fwd search index (from init to n);
2nd col = Asymmetry test;
3rd col = Kurtosis test;
4th col = Normality test.</Description>
            </ItemCell>
            <ItemCell>
               <Value>Bols</Value>
               <Description>(n-init+1) x (p+1) matrix containing the monitoring of estimated beta coefficients in each step of the forward search.</Description>
            </ItemCell>
            <ItemCell>
               <Value>S2</Value>
               <Description>(n-init+1) x 4 matrix containing the monitoring of S2 or R2 in each step of the forward search:
1st col = fwd search index (from init to n);
2nd col = monitoring of S2;
3rd col = monitoring of R2;
4th col = monitoring of rescaled S2.
In this case the estimated of $\sigma^2$ at step m is divided by the consistency factor (to make the estimate asymptotically unbiased).</Description>
            </ItemCell>
            <ItemCell>
               <Value>coo</Value>
               <Description>(n-init+1) x 3 matrix containing the monitoring of Cook or modified Cook distance in each step of the forward search:
1st col = fwd search index (from init to n);
2nd col = monitoring of Cook distance;
3rd col = monitoring of modified Cook distance.</Description>
            </ItemCell>
            <ItemCell>
               <Value>Tols</Value>
               <Description>(n-init+1) x (p+1) matrix containing the monitoring of estimated t-statistics (as specified in option input 'tstat'.
in each step of the forward search</Description>
            </ItemCell>
            <ItemCell>
               <Value>Un</Value>
               <Description>(n-init) x 11 Matrix which contains the unit(s) included in the subset at each step of the fwd search.
REMARK: in every step the new subset is compared with the old subset. Un contains the unit(s) present in the new subset but not in the old one Un(1,2) for example contains the unit included in step init+1 Un(end,2) contains the units included in the final step of the search.</Description>
            </ItemCell>
            <ItemCell>
               <Value>betaINT</Value>
               <Description>Confidence intervals for the elements of $\beta$.
betaINT is a (n-init+1)-by-2*length(confint)-by-p 3D array.
Each third dimension refers to an element of beta:
betaINT(:,:,1) is associated with first element of beta;
...;
betaINT(:,:,p) is associated with last element of beta.
The first two columns contain the lower and upper confidence limits associated with conflev(1).
Columns three and four contain the lower and upper confidence limits associated with conflev(2);
...;
The last two columns contain the lower and upper confidence limits associated with conflev(end).
For example betaint(:,3:4,5) contain the lower and upper confidence limits for the fifth element of beta using confidence level specified in the second element of input option conflev.</Description>
            </ItemCell>
            <ItemCell>
               <Value>sigma2INT</Value>
               <Description>confidence interval for $\sigma^2$.
1st col = fwd search index;
2nd col = lower confidence limit based on conflev(1);
3rd col = upper confidence limit based on conflev(1);
4th col = lower confidence limit based on conflev(2);
5th col = upper confidence limit based on conflev(2);
...
penultimate col = lower confidence limit based on conflev(end);
last col = upper confidence limit based on conflev(end);</Description>
            </ItemCell>
            <ItemCell>
               <Value>y</Value>
               <Description>A vector with n elements that contains the response variable which has been used</Description>
            </ItemCell>
            <ItemCell>
               <Value>X</Value>
               <Description>Data matrix of explanatory variables which has been used (it also contains the column of ones if input option intercept was missing or equal to 1)</Description>
            </ItemCell>
            <ItemCell>
               <Value>class</Value>
               <Description>'FSReda'.</Description>
            </ItemCell>
         </Structure>
      </Item>
   </OutArgs>
   <MoreAbout><!--MORE ABOUT SECTION--></MoreAbout>
   <Acknowledgements><!--ACKNOWLEDGEMENTS SECTION--></Acknowledgements>
   <References><!--REFERENCES SECTION-->
      <Item>Atkinson and Riani (2000), Robust Diagnostic Regression Analysis, Springer Verlag, New York.</Item>
   </References>
   <SeeAlso><!--SEE ALSO SECTION-->
      <Item>LXS</Item>
      <Item>FSRbsb</Item>
   </SeeAlso>
   <Ex><!--EXAMPLES SECTION-->
      <Item>
         <Title>FSReda with all default options.</Title>
         <Desc>
            <ItemCell>Example of use of FSReda based on a starting point coming from LMS.</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>n=200;</ItemCell>
            <ItemCell>p=3;</ItemCell>
            <ItemCell>randn('state', 123456);</ItemCell>
            <ItemCell>X=randn(n,p);</ItemCell>
            <ItemCell>% Uncontaminated data</ItemCell>
            <ItemCell>y=randn(n,1);</ItemCell>
            <ItemCell>% Contaminated data</ItemCell>
            <ItemCell>ycont=y;</ItemCell>
            <ItemCell>ycont(1:5)=ycont(1:5)+6;</ItemCell>
            <ItemCell>[out]=LXS(y,X,'nsamp',1000);</ItemCell>
            <ItemCell>out=FSReda(y,X,out.bs);</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>FSReda with optional argument.</Title>
         <Desc>
            <ItemCell>Example of use of function FSReda using a random start and traditional t-stat monitoring.</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>n=200;</ItemCell>
            <ItemCell>p=3;</ItemCell>
            <ItemCell>randn('state', 123456);</ItemCell>
            <ItemCell>X=randn(n,p);</ItemCell>
            <ItemCell>% Uncontaminated data</ItemCell>
            <ItemCell>y=randn(n,1);</ItemCell>
            <ItemCell>% Contaminated data</ItemCell>
            <ItemCell>ycont=y;</ItemCell>
            <ItemCell>ycont(1:5)=ycont(1:5)+6;</ItemCell>
            <ItemCell>out=FSReda(y,X,0,'tstat','trad');</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
   </Ex>
   <ExtraEx><!--EXTRA EXAMPLES SECTION-->
      <Item>
         <Title>Examples with real data: wool data.</Title>
         <Desc> </Desc>
         <MATLABcode>
            <ItemCell>xx=load('wool.txt');</ItemCell>
            <ItemCell>X=xx(:,1:3);</ItemCell>
            <ItemCell>y=log(xx(:,4));</ItemCell>
            <ItemCell>[out]=LXS(y,X,'nsamp',0);</ItemCell>
            <ItemCell>[out]=FSReda(y,X,out.bs,'tstat','scal');</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>Example with artificial dataset.</Title>
         <Desc> </Desc>
         <MATLABcode>
            <ItemCell>n=100;</ItemCell>
            <ItemCell>p=8;</ItemCell>
            <ItemCell>state=1;</ItemCell>
            <ItemCell>randn('state', state);</ItemCell>
            <ItemCell>X=randn(n,p);</ItemCell>
            <ItemCell>y=randn(n,1);</ItemCell>
            <ItemCell>y(1:10)=y(1:10)+5;</ItemCell>
            <ItemCell>% Run the forward search with Exploratory Data Analysis purposes</ItemCell>
            <ItemCell>% LMS using 10000 subsamples</ItemCell>
            <ItemCell>[outLXS]=LXS(y,X,'nsamp',10000);</ItemCell>
            <ItemCell>% Forward Search</ItemCell>
            <ItemCell>[out]=FSReda(y,X,outLXS.bs);</ItemCell>
            <ItemCell>%The monitoring residuals plot shows a set of positive residuals which</ItemCell>
            <ItemCell>%starting from the central part of the search tend to have a residual much</ItemCell>
            <ItemCell>%larger than that of the other units.</ItemCell>
            <ItemCell>resfwdplot(out);</ItemCell>
            <ItemCell>%The minimum deletion residual from m=90 starts going above the 99% threshold.</ItemCell>
            <ItemCell>mdrplot(out);</ItemCell>
            <ItemCell>%The curve which monitors the normality test shows a sudden big increase with the outliers are included</ItemCell>
            <ItemCell>figure;</ItemCell>
            <ItemCell>lwdenv=2;</ItemCell>
            <ItemCell>xlimx=[10 100];</ItemCell>
            <ItemCell>subplot(2,2,1);</ItemCell>
            <ItemCell>plot(out.nor(:,1),out.nor(:,2));</ItemCell>
            <ItemCell>title('Asimmetry test');</ItemCell>
            <ItemCell>xlim(xlimx);</ItemCell>
            <ItemCell>quant=chi2inv(0.99,1);</ItemCell>
            <ItemCell>v=axis;</ItemCell>
            <ItemCell>line([v(1),v(2)],[quant,quant],'color','r','LineWidth',lwdenv);</ItemCell>
            <ItemCell>subplot(2,2,2)</ItemCell>
            <ItemCell>plot(out.nor(:,1),out.nor(:,3))</ItemCell>
            <ItemCell>title('Kurtosis test');</ItemCell>
            <ItemCell>xlim(xlimx);</ItemCell>
            <ItemCell>v=axis;</ItemCell>
            <ItemCell>line([v(1),v(2)],[quant,quant],'color','r','LineWidth',lwdenv);</ItemCell>
            <ItemCell>subplot(2,2,3:4)</ItemCell>
            <ItemCell>plot(out.nor(:,1),out.nor(:,4));</ItemCell>
            <ItemCell>xlim(xlimx);</ItemCell>
            <ItemCell>quant=chi2inv(0.99,2);</ItemCell>
            <ItemCell>v=axis;</ItemCell>
            <ItemCell>line([v(1),v(2)],[quant,quant],'color','r','LineWidth',lwdenv);</ItemCell>
            <ItemCell>title('Normality test');</ItemCell>
            <ItemCell>xlabel('Subset size m');</ItemCell>
         </MATLABcode>
         <Exec>1</Exec>
      </Item>
      <Item>
         <Title>Monitoring of 95 per cent and 99 per cent confidence intervals of beta and sigma2.</Title>
         <Desc>
            <ItemCell>House price data</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>load hprice.txt;</ItemCell>
            <ItemCell>n=size(hprice,1);</ItemCell>
            <ItemCell>y=hprice(:,1);</ItemCell>
            <ItemCell>X=hprice(:,2:5);</ItemCell>
            <ItemCell>outFSR=FSR(y,X,'plots',0,'msg',0);</ItemCell>
            <ItemCell>dout=n-length(outFSR.ListOut);</ItemCell>
            <ItemCell>% init = point to start monitoring diagnostics along the FS</ItemCell>
            <ItemCell>init=20;</ItemCell>
            <ItemCell>[outLXS]=LXS(y,X,'nsamp',10000);</ItemCell>
            <ItemCell>outEDA=FSReda(y,X,outLXS.bs,'conflev',[0.95 0.99],'init',init);</ItemCell>
            <ItemCell>p=size(X,2)+1;</ItemCell>
            <ItemCell>% Set font size, line width and line style</ItemCell>
            <ItemCell>figure;</ItemCell>
            <ItemCell>lwd=2.5;</ItemCell>
            <ItemCell>FontSize=14;</ItemCell>
            <ItemCell>linst={'-','--',':','-.','--',':'};</ItemCell>
            <ItemCell>nr=3;</ItemCell>
            <ItemCell>nc=2;</ItemCell>
            <ItemCell>xlimL=init; % lower value fo xlim</ItemCell>
            <ItemCell>xlimU=n+1;  % upper value of xlim</ItemCell>
            <ItemCell>close all</ItemCell>
            <ItemCell>for j=1:p</ItemCell>
            <ItemCell>    subplot(nr,nc,j);</ItemCell>
            <ItemCell>    hold('on')</ItemCell>
            <ItemCell>    % plot 95% and 99% HPD  trajectories</ItemCell>
            <ItemCell>    plot(outEDA.Bols(:,1),outEDA.betaINT(:,1:2,j),'LineStyle',linst{4},'LineWidth',lwd,'Color','b')</ItemCell>
            <ItemCell>    plot(outEDA.Bols(:,1),outEDA.betaINT(:,3:4,j),'LineStyle',linst{4},'LineWidth',lwd,'Color','r')</ItemCell>
            <ItemCell>    % plot estimate of beta1_j</ItemCell>
            <ItemCell>    plot(outEDA.Bols(:,1),outEDA.Bols(:,j+1)','LineStyle',linst{1},'LineWidth',lwd,'Color','k')</ItemCell>
            <ItemCell>    % Set ylim</ItemCell>
            <ItemCell>    ylimU=max(outEDA.betaINT(:,4,j));</ItemCell>
            <ItemCell>    ylimL=min(outEDA.betaINT(:,3,j));</ItemCell>
            <ItemCell>    ylim([ylimL ylimU])</ItemCell>
            <ItemCell>    % Set xlim</ItemCell>
            <ItemCell>    xlim([xlimL xlimU]);</ItemCell>
            <ItemCell>    % Add vertical line in correspondence of the step prior to the</ItemCell>
            <ItemCell>    % entry of the first outlier</ItemCell>
            <ItemCell>    line([dout; dout],[ylimL; ylimU],'Color','r','LineWidth',lwd);</ItemCell>
            <ItemCell>    ylabel(['$\hat{\beta_' num2str(j-1) '}$'],'Interpreter','LaTeX','FontSize',20,'rot',-360);</ItemCell>
            <ItemCell>    set(gca,'FontSize',FontSize);</ItemCell>
            <ItemCell>    if j&amp;gt;(nr-1)*nc</ItemCell>
            <ItemCell>        xlabel('Subset size m','FontSize',FontSize);</ItemCell>
            <ItemCell>    end</ItemCell>
            <ItemCell>end</ItemCell>
            <ItemCell>% Subplot associated with the monitoring of sigma^2</ItemCell>
            <ItemCell>subplot(nr,nc,6);</ItemCell>
            <ItemCell>hold('on')</ItemCell>
            <ItemCell>% 99%</ItemCell>
            <ItemCell>plot(outEDA.sigma2INT(:,1),outEDA.sigma2INT(:,4:5),'LineStyle',linst{4},'LineWidth',lwd,'Color','r')</ItemCell>
            <ItemCell>% 95%</ItemCell>
            <ItemCell>plot(outEDA.sigma2INT(:,1),outEDA.sigma2INT(:,2:3),'LineStyle',linst{2},'LineWidth',lwd,'Color','b')</ItemCell>
            <ItemCell>% Plot rescaled S2</ItemCell>
            <ItemCell>plot(outEDA.S2(:,1),outEDA.S2(:,4),'LineWidth',lwd,'Color','k')</ItemCell>
            <ItemCell>ylabel('$\hat{\sigma}^2$','Interpreter','LaTeX','FontSize',20,'rot',-360);</ItemCell>
            <ItemCell>set(gca,'FontSize',FontSize);</ItemCell>
            <ItemCell>% Set ylim</ItemCell>
            <ItemCell>ylimU=max(outEDA.sigma2INT(:,5));</ItemCell>
            <ItemCell>ylimL=min(outEDA.sigma2INT(:,4));</ItemCell>
            <ItemCell>ylim([ylimL ylimU])</ItemCell>
            <ItemCell>% Set xlim</ItemCell>
            <ItemCell>xlim([xlimL xlimU]);</ItemCell>
            <ItemCell>% Add vertical line in correspondence of the step prior to the</ItemCell>
            <ItemCell>% entry of the first outlier</ItemCell>
            <ItemCell>line([dout; dout],[ylimL; ylimU],'Color','r','LineWidth',lwd);</ItemCell>
            <ItemCell>xlabel('Subset size m','FontSize',FontSize);</ItemCell>
            <ItemCell>% Add multiple title</ItemCell>
            <ItemCell>suplabel(['Housing data; confidence intervals of the parameters monitored in the interval ['...</ItemCell>
            <ItemCell>    num2str(xlimL) ',' num2str(xlimU) ...</ItemCell>
            <ItemCell>    ']'],'t');</ItemCell>
            <ItemCell>disp(['The vertical lines are located in the' ...</ItemCell>
            <ItemCell>    ' step prior to the inclusion of the first outlier'])</ItemCell>
         </MATLABcode>
         <Exec>1</Exec>
      </Item>
   </ExtraEx>
</HelpXML>