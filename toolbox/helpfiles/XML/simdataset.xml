<?xml version="1.0" encoding="utf-8"?>
<HelpXML>
   <Title><!--This is simply the filename-->simdataset</Title>
   <Purpose><!--This is the second line of the .m file-->simdataset simulates and-or contaminates a dataset given the parameters of a finite mixture model with Gaussian components
</Purpose>
   <Description><!--Description section-->simdataset(n, Pi, Mu, S) generates a matrix of size $n$-by-$p$ containing $n$ observations $p$ dimensions from $k$ groups. More precisely, this function produces a dataset of n observations from a mixture model with parameters 'Pi' (mixing proportions), 'Mu' (mean vectors), and 'S' (covariance matrices). Mixture component sample sizes are produced as a realization from a multinomial distribution with probabilities given by the mixing proportions. For example, if n=200, k=4 and Pi=[0.25, 0.25, 0.25, 0.25] function Nk1=mnrnd( n-k, Pi) is used to generate k integers (whose sum is n-k) from the multinomial distribution with parameters n-k and Pi. The size of the groups is given by Nk1+1. The first Nk1(1)+1 observations are generated using centroid Mu(1,:) and covariance S(:,:,1), ..., the last Nk1(k)+1 observations are generated using centroid Mu(k,:) and covariance S(:,:,k).
DETAILS.
To make a dataset more challenging for clustering, a user might want to simulate noise variables or outliers. The optional parameter 'noiseunits' controls the number and the type of outliers which must be added. The optional parameter 'noisevars' controls the number and the type of noise variables which must be added (it is possible to control the distribution, the interval and the number). Finally, the user can apply an inverse Box-Cox transformation providing a vector of coefficients 'lambda'. The value 1 implies that no transformation is needed for the corresponding coordinate. It is also possible to add outliers to an existing dataset by simply suppling as first argument the matrix of existing data.
</Description>
   <InpArgs><!--REQUIRED INPUT ARGUMENT SECTION-->
      <Item>
         <Name>n</Name>
         <ShortDesc>sample size or input matrix.</ShortDesc>
         <TypeInd>Scalar.</TypeInd>
         <LongDesc>Scalar or matrix of size n-by-v. If n is a scalar it is interpreted as the sample size of the dataset which must be simulated. On the other hand, if n is a n-by-v it is interpreted as a matrix of size n-by-v which has to be contaminated with optional input arguments 'noiseunits' and 'noisevars'.</LongDesc>
         <Example> </Example>
         <DataType>single| double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>Pi</Name>
         <ShortDesc>Mixing proportions.</ShortDesc>
         <TypeInd>Vector.</TypeInd>
         <LongDesc>Vector of size k containing mixing proportions. The sum of the elements of Pi is 1.</LongDesc>
         <Example> </Example>
         <DataType>single| double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>Mu</Name>
         <ShortDesc>centroids.</ShortDesc>
         <TypeInd>Matrix.</TypeInd>
         <LongDesc>Matrix of size k-by-v containing (in the rows) the centroids of the k groups.</LongDesc>
         <Example> </Example>
         <DataType>single| double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>S</Name>
         <ShortDesc>Covariance matrices.</ShortDesc>
         <TypeInd>3D array.</TypeInd>
         <LongDesc>3D array of size v-by-v-by-k containing covariance matrices of the k groups.</LongDesc>
         <Example> </Example>
         <DataType>single| double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
   </InpArgs>
   <OptArgs><!--OPTIONAL (NAME/PAIRS) INPUT ARGUMENT SECTION-->
      <Item>
         <Name>noiseunits</Name>
         <ShortDesc>number of type of outlying observations.</ShortDesc>
         <TypeInd>Scalar or structure.</TypeInd>
         <LongDesc>Missing value, scalar or structure.
This input parameter specifies the number and type of outlying observations. The default value of noiseunits is 0.
- If noiseunits is a scalar t different from 0, then t units from the uniform distribution in the interval min(X) max(X) are generated in such a way that their squared Mahalanobis distance from the centroids of each existing group is larger then the quantile 1-0.999 of the Chi^2 distribution with p degrees of freedom. In order to generate these units the maximum number of attempts is equal to 10000.
- If noiseunits is a structure it may contain the following fields:
number = scalar, or vector of length f. The sum of the elements of vector 'number' is equal to the total number of outliers which are simulated.
alpha = scalar or vector of legth f containing the level(s) of simulated outliers. The default value of alpha is 0.001.
maxiter = maximum number of trials to simulate outliers.
The default value of maxiter is 10000.
interval= missing value or vector of length 2 or matrix of size 2-by-v which controls the min and max of the generated outliers for each dimension.
If interval is empty (default), the outliers are simulated in the interval min(X) max(X).
If interval is a vector of length(2), outliers for each variables are simulated in the range interval(1) and interval(2).
If interval is a 2-by-v matrix outliers are simulated in:
interval(1,1) interval (2,1) for variable 1 ...
interval(1,v) interval (2,v) for variable v typeout = list of length f containing the type of outliers which must be simulated. Possible values for typeout are:
* unif (or uniform), if the outliers must be generated using the uniform distribution;
* norm (or normal), if the outliers must be generated using the normal distribution;
* Chisquarez, if the outliers must be generated using the Chi2 distribution with z degrees of freedom;
* Tz or tz, if the outliers must be generated using the Student T distribution with z degrees of freedom;
* pointmass, if the outliers are concentrated on a particular point;
* componentwise, if the outliers must have the same coordinates of the existing rows of matrix X apart from a single coordinate (which will be the min or max in that particular dimension or the min or max specified in interval).
For example, the code:
noiseunits=struct;
noiseunits.number=[100 100];
noiseunits.typeout={'uniform' 'componentwise'};
noiseunits.interval=[-2 2];
adds 200 outliers, the first 100 generated using a uniform distribution and the last 100 using componentwise scheme. Outliers are generated in the interval [-2 2] for each variable.</LongDesc>
         <Example>'noiseunits', 10</Example>
         <DataType>double</DataType>
         <Struct>
            <ItemCell>
               <Value>number</Value>
               <Description>[100 100];</Description>
            </ItemCell>
            <ItemCell>
               <Value>typeout</Value>
               <Description>{'uniform' 'componentwise'};</Description>
            </ItemCell>
            <ItemCell>
               <Value>interval</Value>
               <Description>[-2 2];&#xD;
                adds 200 outliers, the first 100 generated using&#xD;
                a uniform distribution and the last 100 using&#xD;
                componentwise scheme. Outliers are generated in the&#xD;
                interval [-2 2] for each variable.</Description>
            </ItemCell>
         </Struct>
      </Item>
      <Item>
         <Name>noisevars</Name>
         <ShortDesc>Type of noise variables.</ShortDesc>
         <TypeInd>Scalar or structure.</TypeInd>
         <LongDesc>Empty value, scalar or structure.
- If noisevars is not specified or is an empty value (default) no noise variable is added to the matrix of simulated data.
- If noisevars is a scalar equal to r, then r new noise variables are added to the matrix of simulated data using the uniform distribution in the range [min(X) max(X)].
- If noisevars is a structure it may contain the following fields:
noisevars.number= a scalar or a vector of length f. The sum of elements of vector 'number' is equal to the total number of noise variables to be addded.
noisevars.distribution= string or cell array of strings of length f which specifies the distribution to be used to simulate the noise variables.
If field distribution is not present then the uniform distribution is used to simulate the noise variables.
String 'distribution' can be one of the following values:
* uniform = uniform distribution * normal = normal distribution * t or T followed by a number which controls the degrees of freedom. For example, t6 specifies to generate the data according to a Student T with 6 degrees of freedom.
* chisquare followed by a number which controls the degreess of freedom. For example, chisquare8 specifies to generate the data according to a Chi square distribution with 8 degrees of freedom.
noisevars.interval= string or vector of length 2 or matrix of size 2-by-f (where f is the number of noise variables) which controls for each element of vector 'number' or each element of cell 'distribution', the min and max of the noise variables. For example, interval(1,3) and interval(2,3) are respectively the minimum and maximum values of simulated the data for the third noise variable If interval is empty (default), the noise variables are simulated uniformly between the smallest and the largest coordinates of mean vectors.
If interval is 'minmax' the noise varaibles are simulated uniformly between the smallest and the largest coordinates of the simulated data matrix.
For example, the code:
noisevars=struct;
noisevars.number=[3 2];
noisevars.distribution={'Chisquare5' 'T3'};
noisevars.interval='minmax';
adds 5 noise variables, the first 3 generated using the Chi2 with 5 degrees of freedom and the last two using the Student t with 3 degrees of freedom. Noise variables are generated in the interval min(X) max(X).</LongDesc>
         <Example>'noisevars', 5</Example>
         <DataType>double</DataType>
         <Struct>
            <ItemCell>
               <Value>number</Value>
               <Description>a scalar or a vector of length f. The sum of&#xD;
                       elements of vector 'number' is equal to the total&#xD;
                       number of noise variables to be addded.</Description>
            </ItemCell>
            <ItemCell>
               <Value>distribution</Value>
               <Description>string or cell array of strings of length&#xD;
                       f which specifies the distribution to be used to&#xD;
                       simulate the noise variables.&#xD;
                       If field distribution is not present then the&#xD;
                       uniform distribution is used to simulate the noise&#xD;
                       variables.&#xD;
                       String 'distribution' can be one of the following&#xD;
                       values:&#xD;
                       * uniform = uniform distribution&#xD;
                       * normal  = normal distribution&#xD;
                       * t or T followed by a number which controls the&#xD;
                         degrees of freedom. For example, t6 specifies to&#xD;
                         generate the data according to a Student T with 6&#xD;
                         degrees of freedom.&#xD;
                       * chisquare followed by a number which controls the&#xD;
                         degreess of freedom. For example, chisquare8&#xD;
                         specifies to generate the data according to a Chi&#xD;
                         square distribution with 8 degrees of freedom.</Description>
            </ItemCell>
            <ItemCell>
               <Value>interval</Value>
               <Description>string or vector of length 2 or matrix of size&#xD;
                         2-by-f (where f is the number of noise variables)&#xD;
                         which controls for each element of vector&#xD;
                         'number' or each element of cell 'distribution',&#xD;
                         the min and max of the noise variables. For&#xD;
                         example, interval(1,3) and interval(2,3) are&#xD;
                         respectively the minimum and maximum values of&#xD;
                         simulated the data for the third noise variable&#xD;
                         If interval is empty (default), the noise variables&#xD;
                         are simulated uniformly between the smallest and&#xD;
                         the largest coordinates of mean vectors.&#xD;
                         If interval is 'minmax' the noise varaibles are&#xD;
                         simulated uniformly between the smallest and the&#xD;
                         largest coordinates of the simulated data matrix.&#xD;
                For example, the code:&#xD;
                   noisevars=struct;&#xD;
                   noisevars.number=[3 2];&#xD;
                   noisevars.distribution={'Chisquare5' 'T3'};&#xD;
                   noisevars.interval='minmax';&#xD;
                adds 5 noise variables, the first 3 generated using&#xD;
                the Chi2 with 5 degrees of freedom and the last two&#xD;
                using the Student t with 3 degrees of freedom. Noise&#xD;
                variables are generated in the interval min(X) max(X).</Description>
            </ItemCell>
         </Struct>
      </Item>
      <Item>
         <Name>lambda</Name>
         <ShortDesc>Transformation coefficients.</ShortDesc>
         <TypeInd>Vector.</TypeInd>
         <LongDesc>Vector of length v containing inverse Box-Cox transformation coefficients. The value false (default) implies that no transformation is applied to any variable.</LongDesc>
         <Example>'lambda',[1 1 0];</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>R_seed</Name>
         <ShortDesc>random numbers from R language.</ShortDesc>
         <TypeInd>Scalar.</TypeInd>
         <LongDesc>Scalar &amp;gt; 0 for the seed to be used to generate random numbers in a R instance. This is used to check consistency of the results obtained with the R package MixSim. See file Connect_Matlab_with_R_HELP.m to know how to connect MATLAB with R. This option requires the installation of the R-(D)COM Interface. Default is 0, i.e. random numbers are generated by matlab.</LongDesc>
         <Example>'R_seed',1;</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
   </OptArgs>
   <OutArgs><!--OUTPUT ARGUMENT SECTION-->
      <Item>
         <Name>X</Name>
         <ShortDesc>Matrix</ShortDesc>
         <TypeInd>Simulated dataset.</TypeInd>
         <LongDesc>Simulated dataset of size (n + noiseunits)-by-(v + noisevars).
Noise coordinates are provided in the last noisevars columns.</LongDesc>
         <Structure> </Structure>
      </Item>
      <Item>
         <Name>id</Name>
         <ShortDesc>Vector</ShortDesc>
         <TypeInd>Classification vector.</TypeInd>
         <LongDesc>Classification vector of length n + noiseunits. Negative numbers represents the groups associated to the contaminated units.
REMARK: If noiseunits outliers could not be generated a warning is produced. In this case matrix X and vector id will have less than n + noiseunits rows.</LongDesc>
         <Structure> </Structure>
      </Item>
   </OutArgs>
   <MoreAbout><!--MORE ABOUT SECTION--></MoreAbout>
   <Acknowledgements><!--ACKNOWLEDGEMENTS SECTION--></Acknowledgements>
   <References><!--REFERENCES SECTION-->
      <Item>Maitra, R. and Melnykov, V. (2010), Simulating data to study performance of finite mixture modeling and clustering algorithms, The Journal of Computational and Graphical Statistics, 2:19, 354-376. (to refer to this publication we will use "MM2010 JCGS").</Item>
      <Item>Melnykov, V., Chen, W.-C., and Maitra, R. (2012), MixSim: An R Package for Simulating Data to Study Performance of Clustering Algorithms, Journal of Statistical Software, 51:12, 1-25.</Item>
      <Item>Davies, R. (1980), The distribution of a linear combination of chi-square random variables, Applied Statistics, vol. 29, pp. 323-333.</Item>
      <Item>Riani M., Cerioli A., Perrotta D. and Torti F. (2015), Simulating mixtures of multivariate data with fixed cluster overlap in FSDA, Advances in data analysis and classification. Volume 9, Issue 4, pp 461-481, DOI 10.1007/s11634-015-0223-9.</Item>
   </References>
   <SeeAlso><!--SEE ALSO SECTION-->
      <Item>MixSim</Item>
   </SeeAlso>
   <Ex><!--EXAMPLES SECTION-->
      <Item>
         <Title>Example of mixture generation.</Title>
         <Desc> </Desc>
         <MATLABcode>
            <ItemCell>out = MixSim(4,2,'BarOmega',0.01);</ItemCell>
            <ItemCell>n=60;</ItemCell>
            <ItemCell>[X,id]=simdataset(n, out.Pi, out.Mu, out.S);</ItemCell>
            <ItemCell>%  Simulate dataset with 10 outliers</ItemCell>
            <ItemCell>[X,id]=simdataset(n, out.Pi, out.Mu, out.S,'noiseunits',10);</ItemCell>
            <ItemCell>%  Simulate dataset with 100 outliers</ItemCell>
            <ItemCell>out = MixSim(4,3,'BarOmega',0.1);</ItemCell>
            <ItemCell>n=300;</ItemCell>
            <ItemCell>[X,id]=simdataset(n, out.Pi, out.Mu, out.S,'noiseunits',100);</ItemCell>
            <ItemCell>spmplot(X,id);</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>Generate 4 groups in 2 dimensions.</Title>
         <Desc> </Desc>
         <MATLABcode>
            <ItemCell>rng('default')</ItemCell>
            <ItemCell>rng(100)</ItemCell>
            <ItemCell>out = MixSim(4,2,'BarOmega',0.01);</ItemCell>
            <ItemCell>n=300;</ItemCell>
            <ItemCell>[X,id]=simdataset(n, out.Pi, out.Mu, out.S);</ItemCell>
            <ItemCell>spmplot(X,id);</ItemCell>
            <ItemCell>title('4 groups without noise and outliers')</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>Generate 4 groups in 2 dimensions and add outliers from uniform distribution.</Title>
         <Desc> </Desc>
         <MATLABcode>
            <ItemCell>rng('default')</ItemCell>
            <ItemCell>rng(100)</ItemCell>
            <ItemCell>out = MixSim(4,2,'BarOmega',0.01);</ItemCell>
            <ItemCell>n=300;</ItemCell>
            <ItemCell>noisevars=0;</ItemCell>
            <ItemCell>noiseunits=3000;</ItemCell>
            <ItemCell>[X,id]=simdataset(n, out.Pi, out.Mu, out.S,'noisevars',noisevars,'noiseunits',noiseunits);</ItemCell>
            <ItemCell>spmplot(X,id);</ItemCell>
            <ItemCell>title('4 groups with outliers from uniform')</ItemCell>
         </MATLABcode>
         <Exec>1</Exec>
      </Item>
   </Ex>
   <ExtraEx><!--EXTRA EXAMPLES SECTION-->
      <Item>
         <Title>Add outliers generated from Chi2 with 5 degrees of freedom.</Title>
         <Desc> </Desc>
         <MATLABcode>
            <ItemCell>n=300;</ItemCell>
            <ItemCell>noisevars=0;</ItemCell>
            <ItemCell>noiseunits=struct;</ItemCell>
            <ItemCell>noiseunits.number=3000;</ItemCell>
            <ItemCell>% Add asymmetric very concentrated noise</ItemCell>
            <ItemCell>noiseunits.typeout={'Chisquare5'};</ItemCell>
            <ItemCell>[X,id]=simdataset(n, out.Pi, out.Mu, out.S,'noisevars',noisevars,'noiseunits',noiseunits);</ItemCell>
            <ItemCell>spmplot(X,id);</ItemCell>
            <ItemCell>title('4 groups with outliers from $\chi^2_5$','Interpreter','Latex')</ItemCell>
         </MATLABcode>
         <Exec>1</Exec>
      </Item>
      <Item>
         <Title>Add outliers generated from Chi2 with 40 degrees of freedom.</Title>
         <Desc> </Desc>
         <MATLABcode>
            <ItemCell>n=300;</ItemCell>
            <ItemCell>noisevars=0;</ItemCell>
            <ItemCell>noiseunits=struct;</ItemCell>
            <ItemCell>noiseunits.number=3000;</ItemCell>
            <ItemCell>% Add asymmetric concentrated noise</ItemCell>
            <ItemCell>noiseunits.typeout={'Chisquare40'};</ItemCell>
            <ItemCell>[X,id]=simdataset(n, out.Pi, out.Mu, out.S,'noisevars',noisevars,'noiseunits',noiseunits);</ItemCell>
            <ItemCell>spmplot(X,id);</ItemCell>
            <ItemCell>title('4 groups with outliers from $\chi^2_{40}$','Interpreter','Latex')</ItemCell>
         </MATLABcode>
         <Exec>1</Exec>
      </Item>
      <Item>
         <Title>Add outliers generated from normal distribution.</Title>
         <Desc> </Desc>
         <MATLABcode>
            <ItemCell>n=300;</ItemCell>
            <ItemCell>noisevars=0;</ItemCell>
            <ItemCell>noiseunits=struct;</ItemCell>
            <ItemCell>noiseunits.number=3000;</ItemCell>
            <ItemCell>% Add normal noise</ItemCell>
            <ItemCell>noiseunits.typeout={'normal'};</ItemCell>
            <ItemCell>[X,id]=simdataset(n, out.Pi, out.Mu, out.S,'noisevars',noisevars,'noiseunits',noiseunits);</ItemCell>
            <ItemCell>spmplot(X,id);</ItemCell>
            <ItemCell>title('4 groups with outliers from normal distribution','Interpreter','Latex')</ItemCell>
         </MATLABcode>
         <Exec>1</Exec>
      </Item>
      <Item>
         <Title>Add outliers generated from Student T with 5 degrees of freedom.</Title>
         <Desc> </Desc>
         <MATLABcode>
            <ItemCell>n=300;</ItemCell>
            <ItemCell>noisevars=0;</ItemCell>
            <ItemCell>noiseunits=struct;</ItemCell>
            <ItemCell>noiseunits.number=3000;</ItemCell>
            <ItemCell>% Add outliers from T5</ItemCell>
            <ItemCell>noiseunits.typeout={'T5'};</ItemCell>
            <ItemCell>[X,id]=simdataset(n, out.Pi, out.Mu, out.S,'noisevars',noisevars,'noiseunits',noiseunits);</ItemCell>
            <ItemCell>spmplot(X,id);</ItemCell>
            <ItemCell>title('4 groups with outliers from Student T with 5 degrees if freedom','Interpreter','Latex')</ItemCell>
         </MATLABcode>
         <Exec>1</Exec>
      </Item>
      <Item>
         <Title>Add componentwise contamination.</Title>
         <Desc> </Desc>
         <MATLABcode>
            <ItemCell>n=300;</ItemCell>
            <ItemCell>noisevars='';</ItemCell>
            <ItemCell>noiseunits=struct;</ItemCell>
            <ItemCell>noiseunits.number=3000;</ItemCell>
            <ItemCell>% Add asymmetric concentrated noise</ItemCell>
            <ItemCell>noiseunits.typeout={'componentwise'};</ItemCell>
            <ItemCell>[X,id]=simdataset(n, out.Pi, out.Mu, out.S,'noisevars',noisevars,'noiseunits',noiseunits);</ItemCell>
            <ItemCell>spmplot(X,id);</ItemCell>
            <ItemCell>title('4 groups with component wise outliers','Interpreter','Latex')</ItemCell>
         </MATLABcode>
         <Exec>1</Exec>
      </Item>
      <Item>
         <Title>Add outliers generated from Chisquare and T distribution.</Title>
         <Desc> </Desc>
         <MATLABcode>
            <ItemCell>n=300;</ItemCell>
            <ItemCell>noisevars=0;</ItemCell>
            <ItemCell>noiseunits=struct;</ItemCell>
            <ItemCell>noiseunits.number=5000*ones(2,1);</ItemCell>
            <ItemCell>noiseunits.typeout={'Chisquare3','T20'};</ItemCell>
            <ItemCell>[X,id]=simdataset(n, out.Pi, out.Mu, out.S,'noisevars',noisevars,'noiseunits',noiseunits);</ItemCell>
            <ItemCell>spmplot(X,id);</ItemCell>
            <ItemCell>title('4 groups with outliers from $\chi^2_{3}$ and $T_{20}$','Interpreter','Latex')</ItemCell>
         </MATLABcode>
         <Exec>1</Exec>
      </Item>
      <Item>
         <Title>Add outliers from Chisquare and T distribution and use a personalized value of alpha.</Title>
         <Desc> </Desc>
         <MATLABcode>
            <ItemCell>n=300;</ItemCell>
            <ItemCell>noisevars=0;</ItemCell>
            <ItemCell>noiseunits=struct;</ItemCell>
            <ItemCell>noiseunits.number=5000*ones(2,1);</ItemCell>
            <ItemCell>noiseunits.typeout={'Chisquare3','T20'};</ItemCell>
            <ItemCell>noiseunits.alpha=0.2;</ItemCell>
            <ItemCell>[X,id]=simdataset(n, out.Pi, out.Mu, out.S,'noisevars',noisevars,'noiseunits',noiseunits);</ItemCell>
            <ItemCell>spmplot(X,id);</ItemCell>
            <ItemCell>title('4 groups with outliers from $\chi^2_{3}$ and $T_{20}$ and $\alpha=0.2$','Interpreter','Latex')</ItemCell>
         </MATLABcode>
         <Exec>1</Exec>
      </Item>
      <Item>
         <Title>Add outliers from Chi2 and point mass contamination and add one noise variable.</Title>
         <Desc> </Desc>
         <MATLABcode>
            <ItemCell>noisevars=struct;</ItemCell>
            <ItemCell>noisevars.number=1;</ItemCell>
            <ItemCell>noiseunits=struct;</ItemCell>
            <ItemCell>noiseunits.number=[100 100];</ItemCell>
            <ItemCell>noiseunits.typeout={'pointmass' 'Chisquare5'};</ItemCell>
            <ItemCell>[X,id]=simdataset(n, out.Pi, out.Mu, out.S,'noisevars',noisevars,'noiseunits',noiseunits);</ItemCell>
            <ItemCell>spmplot(X,id);</ItemCell>
            <ItemCell>title('4 groups with outliers from $\chi^2_{5}$ and point mass $+1$ noise var','Interpreter','Latex')</ItemCell>
         </MATLABcode>
         <Exec>1</Exec>
      </Item>
      <Item>
         <Title>Example of the use of personalized interval to generate outliers.</Title>
         <Desc> </Desc>
         <MATLABcode>
            <ItemCell>noiseunits=struct;</ItemCell>
            <ItemCell>noiseunits.number=1000;</ItemCell>
            <ItemCell>noiseunits.typeout={'uniform'};</ItemCell>
            <ItemCell>% Generate outliers in the interval [-1 1] for the first variable and</ItemCell>
            <ItemCell>% interval [1 2] for the second variable</ItemCell>
            <ItemCell>noiseunits.interval=[-1 1;</ItemCell>
            <ItemCell>                     1 2];</ItemCell>
            <ItemCell>% Finally add a noise variable</ItemCell>
            <ItemCell>noisevars=struct;</ItemCell>
            <ItemCell>noisevars.number=1;</ItemCell>
            <ItemCell>[X,id]=simdataset(n, out.Pi, out.Mu, out.S,'noisevars',noisevars,'noiseunits',noiseunits);</ItemCell>
            <ItemCell>spmplot(X,id);</ItemCell>
            <ItemCell>title('4 groups with outliers from uniform using a personalized interval $+1$ noise var','Interpreter','Latex')</ItemCell>
         </MATLABcode>
         <Exec>1</Exec>
      </Item>
      <Item>
         <Title>Example of the use of personalized interval to generate outliers (1).</Title>
         <Desc>
            <ItemCell>Generate 1000 outliers from uniform in the interval [-2 3] and 1000 units using componentwise contamination in the interval [-2 3]</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>noiseunits=struct;</ItemCell>
            <ItemCell>noiseunits.number=[1000 1000];</ItemCell>
            <ItemCell>noiseunits.typeout={'uniform' 'componentwise'};</ItemCell>
            <ItemCell>noiseunits.interval=[-2 3];</ItemCell>
            <ItemCell>[X,id]=simdataset(n, out.Pi, out.Mu, out.S,'noiseunits',noiseunits);</ItemCell>
            <ItemCell>spmplot(X,id);</ItemCell>
            <ItemCell>title('4 groups with outliers componentwise and from uniform in interval [-2 3]','Interpreter','Latex')</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>Add 5 noise variables.</Title>
         <Desc> </Desc>
         <MATLABcode>
            <ItemCell>n=300;</ItemCell>
            <ItemCell>noisevars=struct;</ItemCell>
            <ItemCell>noisevars.number=[2 3];</ItemCell>
            <ItemCell>noisevars.distribution={'Chisquare3','T20'};</ItemCell>
            <ItemCell>noiseunits='';</ItemCell>
            <ItemCell>[X,id]=simdataset(n, out.Pi, out.Mu, out.S,'noisevars',noisevars,'noiseunits',noiseunits);</ItemCell>
            <ItemCell>spmplot(X,id,[],'box');</ItemCell>
            <ItemCell>title('4 groups in 2 dims with 5 noise variables. First two from $\chi^2_{3}$ and last three from $T_{20}$','Interpreter','Latex')</ItemCell>
         </MATLABcode>
         <Exec>1</Exec>
      </Item>
      <Item>
         <Title>Add 3 noise variables.</Title>
         <Desc> </Desc>
         <MATLABcode>
            <ItemCell>n=300;</ItemCell>
            <ItemCell>noisevars=struct;</ItemCell>
            <ItemCell>noisevars.number=[1 2];</ItemCell>
            <ItemCell>noisevars.distribution={'Chisquare3','T2'};</ItemCell>
            <ItemCell>noiseunits='';</ItemCell>
            <ItemCell>[X,id]=simdataset(n, out.Pi, out.Mu, out.S,'noisevars',noisevars,'noiseunits',noiseunits);</ItemCell>
            <ItemCell>spmplot(X,id);</ItemCell>
            <ItemCell>title('4 groups in 2 dims with 3 noise variables. First from $\chi^2_{3}$ and last two from $T_{2}$','Interpreter','Latex')</ItemCell>
         </MATLABcode>
         <Exec>1</Exec>
      </Item>
      <Item>
         <Title>Add 3 noise variables and use 'minmax' interval.</Title>
         <Desc> </Desc>
         <MATLABcode>
            <ItemCell>n=300;</ItemCell>
            <ItemCell>noisevars=struct;</ItemCell>
            <ItemCell>noisevars.number=[1 2];</ItemCell>
            <ItemCell>noisevars.distribution={'Chisquare3','T20'};</ItemCell>
            <ItemCell>noisevars.interval='minmax';</ItemCell>
            <ItemCell>noiseunits='';</ItemCell>
            <ItemCell>[X,id]=simdataset(n, out.Pi, out.Mu, out.S,'noisevars',noisevars,'noiseunits',noiseunits);</ItemCell>
            <ItemCell>spmplot(X,id);</ItemCell>
            <ItemCell>title('4 groups in 2 dims with 3 noise variables with ''minimax'' interval','Interpreter','Latex')</ItemCell>
         </MATLABcode>
         <Exec>1</Exec>
      </Item>
      <Item>
         <Title>Add 3 noise variables and use a personalized interval for each variable.</Title>
         <Desc> </Desc>
         <MATLABcode>
            <ItemCell>n=300;</ItemCell>
            <ItemCell>noisevars=struct;</ItemCell>
            <ItemCell>noisevars.number=[1 2];</ItemCell>
            <ItemCell>noisevars.distribution={'Chisquare3','T20'};</ItemCell>
            <ItemCell>noiseunits='';</ItemCell>
            <ItemCell>% In this example we supply min and max for each noise variable</ItemCell>
            <ItemCell>v1=sum(noisevars.number);</ItemCell>
            <ItemCell>noisevars.interval=[3*ones(1,v1); 10*ones(1,v1)];</ItemCell>
            <ItemCell>[X,id]=simdataset(n, out.Pi, out.Mu, out.S,'noisevars',noisevars,'noiseunits',noiseunits);</ItemCell>
            <ItemCell>spmplot(X,id);</ItemCell>
            <ItemCell>title('4 groups in 2 dims with 3 noise variables with personalized interval','Interpreter','Latex')</ItemCell>
         </MATLABcode>
         <Exec>1</Exec>
      </Item>
      <Item>
         <Title>Add noise to an existing dataset.</Title>
         <Desc>
            <ItemCell>Add outliers generated from uniform distribution to the IRIS dataset</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>load fisheriris;</ItemCell>
            <ItemCell>Y=meas;</ItemCell>
            <ItemCell>Mu=grpstats(Y,species);</ItemCell>
            <ItemCell>S=zeros(4,4,3);</ItemCell>
            <ItemCell>S(:,:,1)=cov(Y(1:50,:));</ItemCell>
            <ItemCell>S(:,:,2)=cov(Y(51:100,:));</ItemCell>
            <ItemCell>S(:,:,3)=cov(Y(101:150,:));</ItemCell>
            <ItemCell>pigen=ones(3,1)/3;</ItemCell>
            <ItemCell>% Add 100 outliers and specify a very small value of alpha</ItemCell>
            <ItemCell>noisevars=0;</ItemCell>
            <ItemCell>noiseunits=struct;</ItemCell>
            <ItemCell>noiseunits.number=100;</ItemCell>
            <ItemCell>noiseunits.alpha=0.000001;</ItemCell>
            <ItemCell>% In this case the first argument which is supplied to simdataset is</ItemCell>
            <ItemCell>% the original matrix X</ItemCell>
            <ItemCell>[Ywithnoise,id]=simdataset(Y, pigen, Mu, S,'noisevars',noisevars,'noiseunits',noiseunits);</ItemCell>
            <ItemCell>spmplot(Ywithnoise,id,[],'box');</ItemCell>
            <ItemCell>title('4 groups with outliers from uniform')</ItemCell>
         </MATLABcode>
         <Exec>1</Exec>
      </Item>
   </ExtraEx>
</HelpXML>