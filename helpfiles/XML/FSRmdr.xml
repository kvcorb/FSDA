<?xml version="1.0" encoding="utf-8"?>
<HelpXML>
   <Title><!--This is simply the filename-->FSRmdr</Title>
   <Purpose><!--This is the second line of the .m file-->FSRmdr computes minimum deletion residual and other basic linear regression quantities in each step of the search</Purpose>
   <Description><!--Description section--></Description>
   <InpArgs><!--REQUIRED INPUT ARGUMENT SECTION-->
      <Item>
         <Name>y</Name>
         <ShortDesc>Response variable</ShortDesc>
         <TypeInd>Vector</TypeInd>
         <LongDesc>Response variable, specified as&#xD;
               a vector of length n, where n is the number of&#xD;
               observations. Each entry in y is the response for the&#xD;
               corresponding row of X.&#xD;
               Missing values (NaN's) and infinite values (Inf's) are&#xD;
               allowed, since observations (rows) with missing or infinite&#xD;
               values will automatically be excluded from the&#xD;
               computations.</LongDesc>
         <Example> </Example>
         <DataType>single| double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>X</Name>
         <ShortDesc>Predictor variables</ShortDesc>
         <TypeInd>Matrix</TypeInd>
         <LongDesc>Matrix of explanatory&#xD;
               variables (also called 'regressors') of dimension n x (p-1)&#xD;
               where p denotes the number of explanatory variables&#xD;
               including the intercept.&#xD;
               Rows of X represent observations, and columns represent&#xD;
               variables. By default, there is a constant term in the&#xD;
               model, unless you explicitly remove it using input option&#xD;
               intercept, so do not include a column of 1s in X. Missing&#xD;
               values (NaN's) and infinite values (Inf's) are allowed,&#xD;
               since observations (rows) with missing or infinite values&#xD;
               will automatically be excluded from the computations.</LongDesc>
         <Example> </Example>
         <DataType>single| double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>bsb</Name>
         <ShortDesc>list of units forming the initial subset</ShortDesc>
         <TypeInd>Vector</TypeInd>
         <LongDesc>If bsb=0&#xD;
               (default) then the procedure starts with p units randomly&#xD;
               chosen else if bsb is not 0 the search will start with&#xD;
               m0=length(bsb)</LongDesc>
         <Example> </Example>
         <DataType>single| double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
   </InpArgs>
   <OptArgs><!--OPTIONAL (NAME/PAIRS) INPUT ARGUMENT SECTION-->
      <Item>
         <Name>init</Name>
         <ShortDesc>Search initialization</ShortDesc>
         <TypeInd>Scalar</TypeInd>
         <LongDesc>It specifies the point where to initialize the search and&#xD;
               start monitoring required diagnostics. If it is not&#xD;
               specified it is set equal to:&#xD;
                   p+1, if the sample size is smaller than 40;&#xD;
                   min(3*p+1,floor(0.5*(n+p+1))), otherwise.&#xD;
               </LongDesc>
         <Example> 'init',100 starts monitoring from step m=100&#xD;
               </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>intercept</Name>
         <ShortDesc>Indicator for constant term</ShortDesc>
         <TypeInd>Scalar</TypeInd>
         <LongDesc>If 1, a model with&#xD;
               constant term will be fitted (default), if 0, no constant&#xD;
               term will be included.&#xD;
               </LongDesc>
         <Example> 'intercept',1&#xD;
               </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>plots</Name>
         <ShortDesc>Plot on the screen</ShortDesc>
         <TypeInd>Scalar</TypeInd>
         <LongDesc>If equal to one a plot of&#xD;
               minimum deletion residual appears  on the screen with 1%,&#xD;
               50% and 99% confidence bands else (default) no plot is&#xD;
               shown.&#xD;
               %               Remark: the plot which is produced is very simple. In order&#xD;
               to control a series of options in this plot and in order to&#xD;
               connect it dynamically to the other forward plots it is&#xD;
               necessary to use function mdrplot.&#xD;
</LongDesc>
         <Example> 'plots',1&#xD;
               </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>nocheck</Name>
         <ShortDesc>Check input arguments</ShortDesc>
         <TypeInd>Scalar</TypeInd>
         <LongDesc>If nocheck is equal to 1 no check is performed on&#xD;
               matrix y and matrix X. Notice that y and X are left&#xD;
               unchanged. In other words the additioanl column of ones for&#xD;
               the intercept is not added. As default nocheck=0. The&#xD;
               controls on h, alpha and nsamp still remain&#xD;
               </LongDesc>
         <Example> 'nocheck',1&#xD;
               </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>msg</Name>
         <ShortDesc>Level of output to display</ShortDesc>
         <TypeInd>Scalar</TypeInd>
         <LongDesc>It controls whether to&#xD;
               display or not messages about great interchange on the&#xD;
               screen If msg==1 (default)&#xD;
               messages are displayed on the screen&#xD;
               else no message is displayed on the screen&#xD;
               </LongDesc>
         <Example> 'msg',1&#xD;
               </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>constr</Name>
         <ShortDesc>Constrained search</ShortDesc>
         <TypeInd>Vector</TypeInd>
         <LongDesc>r x 1 vector which contains the list of units which are&#xD;
               forced to join the search in the last r steps. The default&#xD;
               is constr=''.  No constraint is imposed&#xD;
               </LongDesc>
         <Example> 'constr',[1:10] forces the first 10 units to join&#xD;
               the subset in the last 10 steps&#xD;
               </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>bsbmfullrank</Name>
         <ShortDesc>What to do in case subset at step m (say bsbm) produces a&#xD;
               non singular X</ShortDesc>
         <TypeInd>Scalar</TypeInd>
         <LongDesc>This options controls what to do when rank(X(bsbm,:)) is&#xD;
               smaller then number of explanatory variables.&#xD;
               If bsbmfullrank = 1 (default is 1) these units (whose number&#xD;
               is say mnofullrank) are constrained to enter the search in&#xD;
               the final n-mnofullrank steps else the search continues&#xD;
               using as estimate of beta at step m the estimate of beta&#xD;
               found in the previous step.&#xD;
               </LongDesc>
         <Example> 'bsbmfullrank',1&#xD;
               </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>bsbsteps</Name>
         <ShortDesc>Save the units forming subsets</ShortDesc>
         <TypeInd>Vector</TypeInd>
         <LongDesc>It specifies for&#xD;
               which steps of the fwd search it&#xD;
               is necessary to save the units forming subsets. If bsbsteps&#xD;
               is 0 we store the units forming subset in all steps. The&#xD;
               default is store the units forming subset in all steps if&#xD;
               n&amp;lt;=5000, else to store the units forming subset at steps&#xD;
               init and steps which are multiple of 100. For example, as&#xD;
               default, if n=753 and init=6,&#xD;
               units forming subset are stored for&#xD;
               m=init, 100, 200, 300, 400, 500 and 600.&#xD;
                 </LongDesc>
         <Example> 'bsbsteps',[100 200] stores the unis forming&#xD;
               subset in steps 100 and 200.&#xD;
               </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
   </OptArgs>
   <OutArgs><!--OUTPUT ARGUMENT SECTION-->
      <Item>
         <Name>mdr</Name>
         <ShortDesc>n -init x 2 matrix </ShortDesc>
         <TypeInd>Monitoring of minimum&#xD;
               deletion residual at each step of the forward search.</TypeInd>
         <LongDesc>&#xD;
               1st col = fwd search index (from init to n-1).&#xD;
               2nd col = minimum deletion residual.&#xD;
               REMARK: if in a certain step of the search matrix is&#xD;
               singular, this procedure checks ohw many observations&#xD;
               produce a singular matrix. In this case mdr is a column&#xD;
               vector which contains the list of units for which matrix X&#xD;
               is non singular.</LongDesc>
      </Item>
      <Item>
         <Name>Un</Name>
         <ShortDesc> Matrix</ShortDesc>
         <TypeInd>Units included in each step.</TypeInd>
         <LongDesc>&#xD;
               (n-init) x 11 Matrix which contains the unit(s) included&#xD;
               in the subset at each step of the search.&#xD;
               REMARK: in every step the new subset is compared with the&#xD;
               old subset. Un contains the unit(s) present in the new&#xD;
               subset but not in the old one.&#xD;
               Un(1,2) for example contains the unit included in step&#xD;
               init+1.&#xD;
               Un(end,2) contains the units included in the final step&#xD;
               of the search.</LongDesc>
      </Item>
      <Item>
         <Name>BB</Name>
         <ShortDesc> Matrix</ShortDesc>
         <TypeInd>Units belonging to subset in each step.</TypeInd>
         <LongDesc>&#xD;
               n x (n-init+1) or n-by-length(bsbsteps) matrix (depending on input&#xD;
               option bsbsteps) which contains information about the units&#xD;
               belonging to the subset at each step of the forward search.&#xD;
               BB has the following structure&#xD;
               1-st row has number 1 in correspondence of the steps in&#xD;
                   which unit 1 is included inside subset and a missing&#xD;
                   value for the other steps&#xD;
               ......&#xD;
               (n-1)-th row has number n-1 in correspondence of the steps in&#xD;
                   which unit n-1 is included inside subset and a missing&#xD;
                   value for the other steps&#xD;
               n-th row has number n in correspondence of the steps in&#xD;
                   which unit n is included inside subset and a missing&#xD;
                   value for the other steps&#xD;
               The size of matrix BB is n x (n-init+1) if option input&#xD;
               bsbsteps is 0 else the size is n-by-length(bsbsteps).</LongDesc>
      </Item>
      <Item>
         <Name>Bols</Name>
         <ShortDesc> Matrix</ShortDesc>
         <TypeInd>OLS coefficents.</TypeInd>
         <LongDesc>&#xD;
               (n-init+1) x (p+1) matrix containing the monitoring of&#xD;
               estimated beta coefficients in each step of the forward&#xD;
               search.</LongDesc>
      </Item>
      <Item>
         <Name>S2</Name>
         <ShortDesc> Matrix</ShortDesc>
         <TypeInd>S2 and R2.</TypeInd>
         <LongDesc>&#xD;
               (n-init+1) x 3 matrix containing the monitoring of S2 (2nd&#xD;
               column)and R2 (third column) in each step of the forward&#xD;
               search.</LongDesc>
      </Item>
   </OutArgs>
   <MoreAbout><!--MORE ABOUT SECTION--></MoreAbout>
   <Acknowledgements><!--ACKNOWLEDGEMENTS SECTION--></Acknowledgements>
   <References><!--REFERENCES SECTION-->
      <Item>Atkinson and Riani (2000), Robust Diagnostic Regression Analysis,&#xD;
   Springer Verlag, New York.</Item>
      <Item>Atkinson, A.C. and Riani, M. (2006). Distribution theory and&#xD;
   simulations for tests of outliers in regression. Journal of&#xD;
   Computational and Graphical Statistics, Vol. 15, pp. 460-476</Item>
      <Item>Riani, M. and Atkinson, A.C. (2007). Fast calibrations of the forward&#xD;
   search for testing multiple outliers in regression, Advances in Data&#xD;
   Analysis and Classification, Vol. 1, pp. 123-141.</Item>
   </References>
   <SeeAlso><!--SEE ALSO SECTION-->
      <Item>FSR</Item>
      <Item>FSReda</Item>
   </SeeAlso>
   <Ex><!--EXAMPLES SECTION-->
      <Item>
         <Title>FSRmdr with all default options.</Title>
         <Desc>&#xD;
     Compute minimum deletion residual.&#xD;
     Monitor minimum deletion residual in each step of the forward search.&#xD;
     Common part to all examples: load fishery dataset.&#xD;</Desc>
         <MATLABcode>
     load('fishery');&#xD;
     y=fishery.data(:,2);&#xD;
     X=fishery.data(:,1);&#xD;
     % Find starting subset&#xD;
     [out]=LXS(y,X,'nsamp',10000);&#xD;
     [mdr] = FSRmdr(y,X,out.bs);&#xD;
     plot(mdr(:,1),mdr(:,2))&#xD;
     title('Monitoring of minimum deletion residual')&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>FSRmdr with optional arguments.</Title>
         <Desc>&#xD;
     Choose step to start monitoring.&#xD;
     Compute minimum deletion residual and start monitoring it from step&#xD;
     60.&#xD;</Desc>
         <MATLABcode>
     load('fishery');&#xD;
     y=fishery.data(:,2);&#xD;
     X=fishery.data(:,1);&#xD;
     % Find starting subset&#xD;
     [out]=LXS(y,X,'nsamp',10000);&#xD;
    [mdr] = FSRmdr(y,X,out.bs,'init',60);&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>Analyze units entering the search in the final steps.</Title>
         <Desc>&#xD;
     Compute minimum deletion residual and analyze the units entering&#xD;
     subset in each step of the fwd search (matrix Un).  As is well known,&#xD;
     the FS provides an ordering of the data from those most in agreement&#xD;
     with a suggested model (which enter the first steps) to those least in&#xD;
     agreement with it (which are included in the final steps).&#xD;</Desc>
         <MATLABcode>
     load('fishery');&#xD;
     y=fishery.data(:,2);&#xD;
     X=fishery.data(:,1);&#xD;
     % Find starting subset&#xD;
     [out]=LXS(y,X,'nsamp',10000);&#xD;
    [mdr,Un] = FSRmdr(y,X,out.bs);&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>Units forming subset in each step.</Title>
         <Desc>&#xD;
     Obtain detailed information about the units forming subset in each&#xD;
     step of the forward search (matrix BB).&#xD;</Desc>
         <MATLABcode>
     load('fishery');&#xD;
     y=fishery.data(:,2);&#xD;
     X=fishery.data(:,1);&#xD;
     % Find starting subset&#xD;
     [out]=LXS(y,X,'nsamp',10000);&#xD;
    [mdr,Un,BB] = FSRmdr(y,X,out.bs);&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>Monitor \( \hat  \beta \).</Title>
         <Desc>&#xD;
     Monitor how the estimates of beta coefficients changes as the subset&#xD;
     size increases (matrix Bols).&#xD;</Desc>
         <MATLABcode>
     load('fishery');&#xD;
     y=fishery.data(:,2);&#xD;
     X=fishery.data(:,1);&#xD;
     % Find starting subset&#xD;
     [out]=LXS(y,X,'nsamp',10000);&#xD;
    [mdr,Un,BB,Bols] = FSRmdr(y,X,out.bs);&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>Monitor $s^2$.</Title>
         <Desc>&#xD;
     Monitor the estimate of $\sigma^2$ in each step of the fwd search&#xD;
     (matrix S2).&#xD;</Desc>
         <MATLABcode>
     load('fishery');&#xD;
     y=fishery.data(:,2);&#xD;
     X=fishery.data(:,1);&#xD;
     % Find starting subset&#xD;
     [out]=LXS(y,X,'nsamp',10000);&#xD;
    [mdr,Un,BB,Bols,S2] = FSRmdr(y,X,out.bs);&#xD;
    plot(S2(:,1),S2(:,2))&#xD;
    title('Monitoring of s2')&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
   </Ex>
   <ExtraEx><!--EXTRA EXAMPLES SECTION-->
      <Item>
         <Title>Specify a regression model without intercept.</Title>
         <Desc>&#xD;
     FSRmdr using a regression model without intercept.&#xD;</Desc>
         <MATLABcode>
     load('fishery');&#xD;
     y=fishery.data(:,2);&#xD;
     X=fishery.data(:,1);&#xD;
     % Find starting subset&#xD;
     [out]=LXS(y,X,'nsamp',10000);&#xD;
    [mdr,Un,BB,Bols,S2] = FSRmdr(y,X,out.bs,'intercept','0');&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>Example of the use of option nocheck.</Title>
         <Desc>&#xD;
    FSRmdr applied without doing any checks on y and X variables.&#xD;</Desc>
         <MATLABcode>
     load('fishery');&#xD;
     y=fishery.data(:,2);&#xD;
     X=fishery.data(:,1);&#xD;
     % Find starting subset&#xD;
     [out]=LXS(y,X,'nsamp',10000);&#xD;
    [mdr,Un,BB,Bols,S2] = FSRmdr(y,X,out.bs,'nocheck',1);&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>Monitoring of s2, and the evolution of beta coefficients for the Hawkins dataset&#xD;
    load('hawkins.</Title>
         <Desc> </Desc>
         <MATLABcode>
    load('hawkins.txt');&#xD;
    y=hawkins(:,9);&#xD;
    X=hawkins(:,1:8);&#xD;
    [out]=LXS(y,X,'nsamp',10000);&#xD;
    [~,~,~,Bols,S2] = FSRmdr(y,X,out.bs);&#xD;
    %The forward plot of s2 shows that initially the estimate is virtually&#xD;
    %zero. The four line segments comprising the plot correspond to the four&#xD;
    %groups of observations&#xD;
&#xD;
    % Plot of the monitoring of S2 and R2&#xD;
    figure;&#xD;
    subplot(1,2,1)&#xD;
    plot(S2(:,1),S2(:,2))&#xD;
    xlabel('Subset size m');&#xD;
    ylabel('S2');&#xD;
    subplot(1,2,2)&#xD;
    plot(S2(:,1),S2(:,3))&#xD;
    xlabel('Subset size m');&#xD;
    ylabel('R2');&#xD;
&#xD;
    %The forward plots of the estimates of the beta coefficients show that they are virtually constant until m = 86, after which they start fluctuating in different directions.&#xD;
&#xD;
    % Plots of the monitoring of "Estimates of beta coefficients"&#xD;
    figure;&#xD;
    for j=3:size(Bols,2);&#xD;
        subplot(2,4,j-2)&#xD;
        plot(Bols(:,1),Bols(:,j))&#xD;
        xlabel('Subset size m');&#xD;
        ylabel(['b' num2str(j-2)]);&#xD;
    end&#xD;</MATLABcode>
         <Exec>1</Exec>
      </Item>
      <Item>
         <Title>Store units forming subsets in selected steps.</Title>
         <Desc>&#xD;
     In this example the units forming subset are stored just for&#xD;
     selected steps.&#xD;</Desc>
         <MATLABcode>
    load('hawkins.txt');&#xD;
    y=hawkins(:,9);&#xD;
    X=hawkins(:,1:8);&#xD;
    rng('default')&#xD;
    rng(100)&#xD;
    [out]=LXS(y,X,'nsamp',10000);&#xD;
    [mdr,Un,BB,Bols,S2] = FSRmdr(y,X,out.bs,'bsbsteps',[30 60]);&#xD;
    % BB has just two columns&#xD;
    % First column contains information about units forming subset at step m=30&#xD;
    % sum(~isnan(BB(:,1))) is 30&#xD;
    % Second column contains information about units forming subset at step m=60&#xD;
    % sum(~isnan(BB(:,2))) is 60&#xD;
    disp(sum(~isnan(BB(:,1))))&#xD;
    disp(sum(~isnan(BB(:,2))))&#xD;</MATLABcode>
         <Exec>1</Exec>
      </Item>
   </ExtraEx>
</HelpXML>