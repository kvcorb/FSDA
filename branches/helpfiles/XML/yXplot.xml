<?xml version="1.0" encoding="utf-8"?>
<HelpXML>
   <Title><!--This is simply the filename-->yXplot</Title>
   <Purpose><!--This is the second line of the .m file-->yXplot produces an interactive scatterplot of y against each variable of X in the input dataset.
</Purpose>
   <Description><!--Description section--></Description>
   <InpArgs><!--REQUIRED INPUT ARGUMENT SECTION-->
      <Item>
         <Name>y</Name>
         <ShortDesc>Response variable or structure containing y, X and possibly other fields to link with monitoring plots.</ShortDesc>
         <TypeInd>Vector or struct.</TypeInd>
         <LongDesc>A vector with n elements that contains the response variable or a structure containing monitoring information (see the examples).
If y is a vector it can be either a row or a column vector.
INPUT ARGUMENT y IS A VECTOR:
If y is a vector, varargin can be either a sequence of name/value pairs, detailed below, or one of the following explicit assignments:
yXplot(y,X,group);
yXplot(y,X,group, plo);
yXplot(y,X, 'name1',value1, 'name2', value2, ...);
If varargin{1} is a n-elements vector, then it is interpreted as a grouping variable vector 'group'. In this case, it can only be followed by 'plo' (see the name pairs section for a full description of plo). Otherwise, the program expects a sequence of name/value pairs.
INPUT ARGUMENT y IS A STRUCTURE:
Required fields in input structure y to obtain a static plot.
y.y = a vector containing the response of length n.
y.X = a matrix containing the explanatory variables of size nxp.
If the input structure y contains just the data matrix, a standard static yXplot matrix will be created.
On the other hand, if y also contains information on statistics monitored along a search, then the scatter plots will be linked with other (forward) plots with interaction possibilities, enabled via brushing and datatooltip. More precisely, with option databrush it is possible to create an automatic interaction with the other plots, while with option datatooltip it is possible to retrieve information about a particular unit once selected with the mouse).
Required fields in input structure y to enable dynamic brushing and linking.
y.RES = matrix containing the residuals monitored in each step of the forward search. Every row is associated with a residual (unit).
This matrix can be created using function FSReda (compulsory argument).
y.Un = matrix containing the order of entry of each unit (necessary if datatooltip is true or databrush is not empty).
y.label = cell of length n containing the labels of the units (optional argument used when datatooltip=1. If this field is not present labels row1, ..., rown will be automatically created and included in the pop up datatooltip window) Note that the structure described above is automatically generated from function FSReda</LongDesc>
         <Example> </Example>
         <DataType>single| double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>X</Name>
         <ShortDesc>Predictor variables.</ShortDesc>
         <TypeInd>Matrix.</TypeInd>
         <LongDesc>Matrix. Data matrix of explanatory variables (also called 'regressors') of dimension nxp if the first argument is a vector. Rows of X represent observations, and columns represent variables.</LongDesc>
         <Example> </Example>
         <DataType>single|double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
   </InpArgs>
   <OptArgs><!--OPTIONAL (NAME/PAIRS) INPUT ARGUMENT SECTION-->
      <Item>
         <Name>group</Name>
         <ShortDesc>grouping variable.</ShortDesc>
         <TypeInd>Vector with n elements.</TypeInd>
         <LongDesc>It is a grouping variable that determines the marker and color assigned to each point. It can be a categorical variable, vector, string matrix, or cell array of strings.
Note that if 'group' is used to distinguish a set of outliers from a set of good units, the id number for the outliers should be the larger (see optional field 'labeladd' of option 'plo' for details).</LongDesc>
         <Example>'group',ones(n,1)</Example>
         <DataType>double.</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>plo</Name>
         <ShortDesc>yXplot personalization.</ShortDesc>
         <TypeInd>Empty value, scalar of structure.</TypeInd>
         <LongDesc>This option controls the names which are displayed in the margins of the yX matrix and the labels of the legend.
If plo is the empty vector [], then namey, nameX and labeladd are both set to the empty string '' (default), and no label and no name is added to the plot.
If plo = 1 the names y, and X1,..., Xp are added to the margins of the the scatter plot matrix else nothing is added.
If plo is a structure it may contain the following fields:
plo.labeladd = if it is '1', the elements belonging to the max(group) in the spm are labelled with their unit row index.
The default value is labeladd = '', i.e. no label is added.
plo.clr = a string of color specifications. By default, the colors are 'brkmgcy'.
plo.sym = a string or a cell of marker specifications. For example, if sym = 'o+x', the first group will be plotted with a circle, the second with a plus, and the third with a 'x'.
This is obtained with the assignment plo.sym = 'o+x' or equivalently with plo.sym = {'o' '+' 'x'}.
By default the sequence of marker types is:
'+';'o';'*';'x';'s';'d';'^';'v';'&amp;gt;';'&amp;lt;';'p';'h';'.'.
plo.siz = scalar, a marker size to use for all plots. By default the marker size depends on the number of plots and the size of the figure window. Default is siz = '' (empty value).
plo.doleg = a string to control whether legends are created or not.
Set doleg to 'on' (default) or 'off'.
plo.nameX = explanatory variables names. Cell. Cell array of strings of length p containing the labels of the varibles of the regression dataset. If it is empty (default) the sequence X1, ..., Xp will be created automatically.
Note that the names can also be specified using the optional option nameX.
plo.namey = response variable name. Character. Character containing the label of the response Note that the names can also be specified using optional option namey.
plo.ylimy = y limits. Vector. vector with two elements controlling minimum and maximum on the y axis. Default value is '' (automatic scale).
Note that the y limits can also be specified using optional option ylimy.
plo.xlimx = x limits. Vector. vector with two elements controlling minimum and maximum on the x axis. Default value is '' (automatic scale).
Note that the x limits can also be specified using optional option xlimx.</LongDesc>
         <Example>'plo','1'</Example>
         <DataType>scalar or structure.</DataType>
         <Struct>
            <ItemCell>
               <Value>labeladd</Value>
               <Description>if it is '1', the elements belonging to the max(group)&#xD;
                in the spm are labelled with their unit row index.&#xD;
                The default value is labeladd = '', i.e. no label is added.</Description>
            </ItemCell>
            <ItemCell>
               <Value>clr</Value>
               <Description>a string of color specifications. By default, the colors&#xD;
                are 'brkmgcy'.</Description>
            </ItemCell>
            <ItemCell>
               <Value>sym</Value>
               <Description>a string or a cell of marker specifications. For example,&#xD;
                if sym = 'o+x', the first group will be plotted with a&#xD;
                circle, the second with a plus, and the third with a 'x'.&#xD;
                This is obtained with the assignment plo.sym = 'o+x'&#xD;
                or equivalently with plo.sym = {'o' '+' 'x'}.&#xD;
                By default the sequence of marker types is:&#xD;
                '+';'o';'*';'x';'s';'d';'^';'v';'&amp;gt;';'&amp;lt;';'p';'h';'.'.</Description>
            </ItemCell>
            <ItemCell>
               <Value>siz</Value>
               <Description>scalar, a marker size to use for all plots. By default the&#xD;
                marker size depends on the number of plots and the size of&#xD;
                the figure window. Default is siz = '' (empty value).</Description>
            </ItemCell>
            <ItemCell>
               <Value>doleg</Value>
               <Description>a string to control whether legends are created or not.&#xD;
                Set doleg to 'on' (default) or 'off'.</Description>
            </ItemCell>
            <ItemCell>
               <Value>nameX</Value>
               <Description>explanatory variables names. Cell. Cell array of&#xD;
                   strings of length p containing the labels&#xD;
                   of the varibles of the regression dataset. If it is empty&#xD;
                 	(default) the sequence X1, ..., Xp will be created&#xD;
                   automatically.&#xD;
                   Note that the names can also be specified&#xD;
                   using the optional option nameX.</Description>
            </ItemCell>
            <ItemCell>
               <Value>namey</Value>
               <Description>response variable name. Character. Character containing the label of the response&#xD;
                   Note that the names can also be specified&#xD;
                   using optional option namey.</Description>
            </ItemCell>
            <ItemCell>
               <Value>ylimy</Value>
               <Description>y limits. Vector. vector with two elements controlling&#xD;
                   minimum and maximum on the y axis. Default value is ''&#xD;
                   (automatic scale).&#xD;
                   Note that the y limits can also be specified&#xD;
                   using optional option ylimy.</Description>
            </ItemCell>
            <ItemCell>
               <Value>xlimx</Value>
               <Description>x limits. Vector. vector with two elements controlling minimum and maximum&#xD;
                   on the x axis. Default value is '' (automatic scale).&#xD;
                   Note that the x limits can also be specified&#xD;
                   using optional option xlimx.</Description>
            </ItemCell>
         </Struct>
      </Item>
      <Item>
         <Name>tag</Name>
         <ShortDesc>plot tag.</ShortDesc>
         <TypeInd>String.</TypeInd>
         <LongDesc>String which identifies the handle of the plot which is about to be created. The default is to use tag 'pl_yX'. Notice that if the program finds a plot which has a tag equal to the one specified by the user, then the output of the new plot overwrites the existing one in the same window else a new window is created.</LongDesc>
         <Example>'tag',''</Example>
         <DataType>char.</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>nameX</Name>
         <ShortDesc>explanatory variables names.</ShortDesc>
         <TypeInd>Cell.</TypeInd>
         <LongDesc>Cell array of strings of length p containing the labels of the varibles of the regression dataset. If it is empty (default) the sequence X1, ..., Xp will be created automatically.</LongDesc>
         <Example>'nameX', {'First var' 'Second var'}</Example>
         <DataType>cell</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>namey</Name>
         <ShortDesc>response variable name.</ShortDesc>
         <TypeInd>Character or cell.</TypeInd>
         <LongDesc>Character containing the label of the response</LongDesc>
         <Example>'namey', {'response'}</Example>
         <DataType>char or cell</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>ylimy</Name>
         <ShortDesc>y limits.</ShortDesc>
         <TypeInd>Vector.</TypeInd>
         <LongDesc>vector with two elements controlling minimum and maximum on the y axis. Default value is '' (automatic scale).</LongDesc>
         <Example>'ylimy',[-2 6]</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>xlimx</Name>
         <ShortDesc>x limits.</ShortDesc>
         <TypeInd>Vector.</TypeInd>
         <LongDesc>vector with two elements controlling minimum and maximum on the x axis. Default value is '' (automatic scale).</LongDesc>
         <Example>'xlimx',[-2 3]</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>datatooltip</Name>
         <ShortDesc>personalized tooltip.</ShortDesc>
         <TypeInd>Empty value or structure.</TypeInd>
         <LongDesc>The default is datatooltip=''.
Note that this option can be used only if the input argument y is a structure which contains information about the fwd search (i.e. the two fields RES and Un and eventually label).
If datatooltip is not empty the user can use the mouse in order to have information about the unit selected, the step in which the unit enters the search and the associated label.
If datatooltip is a structure, it is possible to control the aspect of the data cursor (see function datacursormode for more details or the examples below).
datatooltip.DisplayStyle= controls the display style;
datatooltip.SnapToDataVertex= controls the display style;
The default options of the structure are DisplayStyle='Window' and SnapToDataVertex='on'.</LongDesc>
         <Example>'datatooltip',''</Example>
         <DataType>char</DataType>
         <Struct>
            <ItemCell>
               <Value>DisplayStyle</Value>
               <Description>controls the display style;</Description>
            </ItemCell>
            <ItemCell>
               <Value>SnapToDataVertex</Value>
               <Description>controls the display style;&#xD;
               The default options of the structure are&#xD;
               DisplayStyle='Window' and SnapToDataVertex='on'.</Description>
            </ItemCell>
         </Struct>
      </Item>
      <Item>
         <Name>databrush</Name>
         <ShortDesc>interactive brushing.</ShortDesc>
         <TypeInd>Empty value, scalar or cell.</TypeInd>
         <LongDesc>Note that this option can be used only if the input argument y is a structure which contains information about the fwd search (i.e. the two fields RES and Un and eventually label).
DATABRUSH IS AN EMPTY VALUE.
If databrush is an empty value (default), no brushing is done.
The activation of this option (databrush is a scalar or a cell) enables the user to select a set of observations in the current plot and to see them highlighted in the resfwdplot, i.e. the plot of the trajectories of all observations, grouped according to the selection(s) done by brushing. If the resfwdplot does not exist it is automatically created.
In addition, brushed units can be highlighted in the other following plots (only if they are already open):
- minimum deletion residual plot;
- monitoring leverage plot;
- maximum studentized residual;
- s^2 and R^2;
- Cook distance and modified Cook distance;
- deletion t statistics.
Remark. The window style of the other figures is set equal to that which contains the monitoring residual plot. In other words, if the scatterplot matrix plot is docked all the other figures will be docked too.
DATABRUSH IS A SCALAR.
If databrush is a scalar the default selection tool is a rectangular brush and it is possible to brush only once (that is persist='').
DATABRUSH IS A CELL.
If databrush is a cell, it is possible to use all optional arguments of function selectdataFS.m and the following optional argument:
- persist. Persist is an empty value or a scalar containing the strings 'on' or 'off'.
The default value of persist is '', that is brushing is allowed only once.
If persist is 'on' or 'off' brushing can be done as many time as the user requires.
If persist='on' then the unit(s) currently brushed are added to those previously brushed. It is possible, every time a new brushing is done, to use a different color for the brushed units.
If persist='off' every time a new brush is performed units previously brushed are removed.
- bivarfit. This option is to add one or more least square lines to the plots of y|X, depending on the selected groups.
bivarfit = '';
is the default: no line is fitted.
bivarfit = '1';
fits a single ols line to all points of each bivariate plot in the scatter matrix y|X.
bivarfit = '2';
fits two ols lines: one to all points and another to the last selected group. This is useful when there are only two groups, of which one refers to a set of potential outliers.
bivarfit = '0';
fits one ols line for each selected group. This is useful for the purpose of fitting mixtures of regression lines.
bivarfit = 'i1' or 'i2' or 'i3' etc.
fits a ols line to a specific group, the one with index 'i' equal to 1, 2, 3 etc.
- multivarfit. If this option is '1', we add to each scatter plot of y|X a line based on the fitted hyperplane coefficients. The line added to the scatter plot y|Xi is mean(y)+Ci*Xi, being Ci the coefficient of Xi.
The default value of multivarfit is '', i.e. no line is added.
- labeladd. If this option is '1', we label the units of the last selected group with the unit row index in matrices X and y. The default value is labeladd='', i.e. no label is added.</LongDesc>
         <Example>'databrush',1</Example>
         <DataType>single | double | struct</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>subsize</Name>
         <ShortDesc>x axis control in resfwdplot.</ShortDesc>
         <TypeInd>Numeric vector.</TypeInd>
         <LongDesc>Numeric vector containing the subset size with length equal to the number of columns of matrix residuals.
If it is not specified it will be set equal to size(residuals,1)-size(residuals,2)+1:size(residuals,1).
Note that this option can be used just if previous option databrush is not empty.
Note also the option subsize produces its effect on the monitoring residuals plot.</LongDesc>
         <Example>'subsize',10:100</Example>
         <DataType>single | double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>selstep</Name>
         <ShortDesc>text in selected steps in resfwdplot.</ShortDesc>
         <TypeInd>Numeric vector.</TypeInd>
         <LongDesc>Numeric vector which specifies for which steps of the forward search textlabels are added in the monitoring residual plot after a brushing action in the yXplot.
The default is to write the labels at the initial and final step. The default is selstep=[m0 n] where m0 and n are respectively the first and final step of the search.
Note that this option can be used just if previous option databrush is not empty.
Note also the option selstep produces its effect on the monitoring residuals plot.</LongDesc>
         <Example>'selstep',100</Example>
         <DataType>single | double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>selunit</Name>
         <ShortDesc>unit labelling in resfwdplot.</ShortDesc>
         <TypeInd>Cell array of strings, string, or numeric vector for labelling units.</TypeInd>
         <LongDesc>If out is a structure the threshold is associated with the trajectories of the residuals monitored along the search else it refers to the values of the response variable.
If it is a cell array of strings, only the lines associated with the units that in at least one step of the search had a residual smaller than selunit{1} or greater than selline{2} will have a textbox.
If it is a string it specifies the threshold above which labels have to be put. For example selunit='2.6' means that the text labels are written only for the units which have in at least one step of the search a value of the scaled residual greater than 2.6 in absolute value.
If it is a numeric vector it contains the list of the units for which it is necessary to put the text labels.
The default value of selunit is string '2.5' if y is a structure else it is an empty value if y is a vector Note that this option can be used just if previous option databrush is not empty.
Note also the option selunit produces its effect on the monitoring residuals plot.</LongDesc>
         <Example>'selunit','3'</Example>
         <DataType>numeric or character</DataType>
         <Struct> </Struct>
      </Item>
   </OptArgs>
   <OutArgs><!--OUTPUT ARGUMENT SECTION-->
      <Item>
         <Name>H</Name>
         <ShortDesc>3D array</ShortDesc>
         <TypeInd>array of handles H to the plotted points.</TypeInd>
         <LongDesc>See gplotmatrix for further details</LongDesc>
         <Structure> </Structure>
      </Item>
      <Item>
         <Name>AX</Name>
         <ShortDesc>Matrix</ShortDesc>
         <TypeInd>handles to the individual subaxes.</TypeInd>
         <LongDesc>See gplotmatrix for further details</LongDesc>
         <Structure> </Structure>
      </Item>
      <Item>
         <Name>BigAx</Name>
         <ShortDesc>Scalar</ShortDesc>
         <TypeInd>handle to big (invisible) axes framing the subaxes.</TypeInd>
         <LongDesc>See gplotmatrix for further details</LongDesc>
         <Structure> </Structure>
      </Item>
   </OutArgs>
   <MoreAbout><!--MORE ABOUT SECTION-->yXplot has the same output of gplotmatrix in the statistics toolbox:
[H,AX,BigAx] = yXplot(...) returns an array of handles H to the plotted points; a matrix AX of handles to the individual subaxes; and a handle BIGAX to big (invisible) axes framing the subaxes. The third dimension of H corresponds to groups in G. AX contains one extra row of handles to invisible axes in which the histograms are plotted. BigAx is left as the CurrentAxes so that a subsequent TITLE, XLABEL, or YLABEL will be centered with respect to the matrix of axes.
</MoreAbout>
   <Acknowledgements><!--ACKNOWLEDGEMENTS SECTION--></Acknowledgements>
   <References><!--REFERENCES SECTION--></References>
   <SeeAlso><!--SEE ALSO SECTION-->
      <Item>spmplot</Item>
      <Item>mdrplot</Item>
      <Item>fanplot</Item>
      <Item>resfwdplot</Item>
   </SeeAlso>
   <Ex><!--EXAMPLES SECTION-->
      <Item>
         <Title>yXplot with first argument vector y and no option.</Title>
         <Desc>
            <ItemCell>In the first example as input there are two matrices y and X respectively A simple yX plot is created</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>n=100;</ItemCell>
            <ItemCell>p=3;</ItemCell>
            <ItemCell>X=randn(n,p);</ItemCell>
            <ItemCell>y=100+randn(n,1);</ItemCell>
            <ItemCell>% Example of the use of function yXplot with all the default options</ItemCell>
            <ItemCell>yXplot(y,X);</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>yXplot with first argument vector y and third argument group.</Title>
         <Desc>
            <ItemCell>Different groups are shown in the yXplot</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>n=100;</ItemCell>
            <ItemCell>p=3;</ItemCell>
            <ItemCell>X=randn(n,p);</ItemCell>
            <ItemCell>y=100+randn(n,1);</ItemCell>
            <ItemCell>sel=51:100;</ItemCell>
            <ItemCell>y(sel)=y(sel)+2;</ItemCell>
            <ItemCell>group=ones(n,1);</ItemCell>
            <ItemCell>group(sel)=2;</ItemCell>
            <ItemCell>yXplot(y,X,group);</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>yXplot with first argument vector y, third argument group and fourth argument plo (Ex1).</Title>
         <Desc>
            <ItemCell>In this case plo is a scalar</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>n=100;</ItemCell>
            <ItemCell>p=3;</ItemCell>
            <ItemCell>X=randn(n,p);</ItemCell>
            <ItemCell>y=100+randn(n,1);</ItemCell>
            <ItemCell>sel=51:100;</ItemCell>
            <ItemCell>y(sel)=y(sel)+2;</ItemCell>
            <ItemCell>group=ones(n,1);</ItemCell>
            <ItemCell>group(sel)=2;</ItemCell>
            <ItemCell>% plo is a scalar</ItemCell>
            <ItemCell>plo=1;</ItemCell>
            <ItemCell>yXplot(y,X,group,plo);</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>yXplot with first argument vector y, third argument group and fourth argument plo (Ex2).</Title>
         <Desc>
            <ItemCell>In this case plo is a structure</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>n=100;</ItemCell>
            <ItemCell>p=3;</ItemCell>
            <ItemCell>X=randn(n,p);</ItemCell>
            <ItemCell>y=randn(n,1);</ItemCell>
            <ItemCell>sel=51:100;</ItemCell>
            <ItemCell>y(sel)=y(sel)+2;</ItemCell>
            <ItemCell>group=ones(n,1);</ItemCell>
            <ItemCell>group(sel)=2;</ItemCell>
            <ItemCell>% plo is a struct</ItemCell>
            <ItemCell>plo=struct;</ItemCell>
            <ItemCell>% Set the scale for the x axes</ItemCell>
            <ItemCell>plo.xlimx=[-1 2];</ItemCell>
            <ItemCell>% Set the scale for the y axis</ItemCell>
            <ItemCell>plo.ylimy=[0 2];</ItemCell>
            <ItemCell>% Control symbol type</ItemCell>
            <ItemCell>plo.sym={'^';'v'};</ItemCell>
            <ItemCell>yXplot(y,X,group,plo);</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
   </Ex>
   <ExtraEx><!--EXTRA EXAMPLES SECTION-->
      <Item>
         <Title>yXplot with first input argument a vector, varargin is name/value pairs Ex1.</Title>
         <Desc>
            <ItemCell>Example of use of option selunit.</ItemCell>
            <ItemCell>Example of the use of function yXplot putting the text for the units which have a value of y smaller than 98 and greater than 102.</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>yXplot(y,X,'selunit',{'98' '102'});</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>yXplot with first input argument a vector, varargin is name/value pairs Ex2.</Title>
         <Desc>
            <ItemCell>yXplot with personalized labelling.</ItemCell>
            <ItemCell>Example of the use of function yXplot putting the text for the units which have a value of y smaller than 1% percentile and greater than 99% percentile of y</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>selth={num2str(prctile(y,1)) num2str(prctile(y,99))};</ItemCell>
            <ItemCell>yXplot(y,X,'selunit',selth);</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>yXplot with first input argument a vector, varargin is name/value pairs Ex3.</Title>
         <Desc>
            <ItemCell>In this case group is passed as a name value pairs.</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>n=100;</ItemCell>
            <ItemCell>p=3;</ItemCell>
            <ItemCell>X=randn(n,p);</ItemCell>
            <ItemCell>y=100+randn(n,1);</ItemCell>
            <ItemCell>sel=51:100;</ItemCell>
            <ItemCell>y(sel)=y(sel)+2;</ItemCell>
            <ItemCell>group=ones(n,1);</ItemCell>
            <ItemCell>group(sel)=2;</ItemCell>
            <ItemCell>% add a personalized tag to the figure</ItemCell>
            <ItemCell>yXplot(y,X,'group',group,'tag','myfig');</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>yXplot with first input argument a vector, varargin is name/value pairs Ex4.</Title>
         <Desc>
            <ItemCell>In this case options xlimx, ylimy, nameX and namey are used</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>n=100;</ItemCell>
            <ItemCell>p=2;</ItemCell>
            <ItemCell>X=randn(n,p);</ItemCell>
            <ItemCell>y=100+randn(n,1);</ItemCell>
            <ItemCell>sel=51:100;</ItemCell>
            <ItemCell>y(sel)=y(sel)+2;</ItemCell>
            <ItemCell>group=ones(n,1);</ItemCell>
            <ItemCell>group(sel)=2;</ItemCell>
            <ItemCell>% Control scale of the x axes</ItemCell>
            <ItemCell>xlimx=[-1 4];</ItemCell>
            <ItemCell>% Control scale of the y axis</ItemCell>
            <ItemCell>ylimy=[99 101];</ItemCell>
            <ItemCell>% Personalized labels for the x axes</ItemCell>
            <ItemCell>nameX={'one' 'two'};</ItemCell>
            <ItemCell>% Personalized labels for y axis</ItemCell>
            <ItemCell>namey='Response';</ItemCell>
            <ItemCell>yXplot(y,X,'group',group,'xlimx',xlimx,'ylimy',ylimy,'namey',namey,'nameX',nameX);</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>yXplot when first input argument y is a structure.</Title>
         <Desc>
            <ItemCell>Ex1.</ItemCell>
            <ItemCell>In the following example the input is a strucure which also contains information about the forward search.</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>[out]=LXS(y,X,'nsamp',1000);</ItemCell>
            <ItemCell>[out]=FSReda(y,X,out.bs);</ItemCell>
            <ItemCell>% Example of the use of function yXplot with all the default options</ItemCell>
            <ItemCell>yXplot(out);</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>&lt;i&gt;Interactive example 1.&lt;/i&gt; Example of the use of options selunit and selstep.</Title>
         <Desc> </Desc>
         <MATLABcode>
            <ItemCell>yXplot(out,'selunit',[2 5 20 23 35 45],'selstep',[20 22 27 36],...</ItemCell>
            <ItemCell>        'databrush',{'persist','off','selectionmode' 'Rect'})</ItemCell>
            <ItemCell>%   produces a resfwdplot in which labels are put for units</ItemCell>
            <ItemCell>%   [2 5 20 23 35 45] in steps [20 22 27 36] of the search</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>&lt;i&gt;Interactive example 2.&lt;/i&gt; Example of the use of options selstep, selunit, selunitbold and selunitcolor.</Title>
         <Desc>
            <ItemCell>It produces a yXplot plot in which labels are put for units which have a residual greater and 1.5. When a set of units is brushed in the yXplot in the monitoring residuals plot the labels are added in steps selsteps.</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>Xplot(out,'selstep',[40 21 80],'selunit','1.5',...</ItemCell>
            <ItemCell>       'databrush',{'persist','off','selectionmode' 'Rect'})</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>&lt;i&gt;Interactive example 3.&lt;/i&gt; Example of the use of option selunit (notice that in this case selunit is a cell array of strings.</Title>
         <Desc>
            <ItemCell>Highlight only the trajectories which in at least one step of the search had a value smaller than -3 or greater than 2 and label them at the beginning and at the end of the search.</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>yXplot(out,'selunit',{'-3';'2'},...</ItemCell>
            <ItemCell>        'databrush',{'selectionmode' 'Rect'});</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>&lt;i&gt;Interactive example 4.&lt;/i&gt; Example of the use of option databrush (brushing is done only once using a rectangular selection tool).</Title>
         <Desc> </Desc>
         <MATLABcode>
            <ItemCell>   yXplot(out,'databrush',1)</ItemCell>
            <ItemCell>%   An equivalent statement is</ItemCell>
            <ItemCell>   yXplot(out,'databrush',{'selectionmode' 'Rect'})</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>&lt;i&gt;Interactive example 5.&lt;/i&gt; Example of the use of brush using a rectangular selection tool and a cyan colour.</Title>
         <Desc> </Desc>
         <MATLABcode>
            <ItemCell>Xplot(out,'databrush',{'selectionmode' 'Rect' 'FlagColor' 'c'})</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>&lt;i&gt;Interactive example 6.&lt;/i&gt; Example of the use of brush using multiple selection circular tools.</Title>
         <Desc> </Desc>
         <MATLABcode>
            <ItemCell>yXplot(out,'databrush',{'selectionmode' 'Brush'})</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>&lt;i&gt;Interactive example 7.&lt;/i&gt; Example of the use of brush using lasso selection tool and fleur pointer.</Title>
         <Desc> </Desc>
         <MATLABcode>
            <ItemCell>yXplot(out,'databrush',{'selectionmode' 'lasso','Pointer','fleur'})</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>&lt;i&gt;Interactive example 8.&lt;/i&gt; Example of the use of rectangular brush.</Title>
         <Desc>
            <ItemCell>Superimposed labels for the brushed units and persistent labels in the plot which has been brushed</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>yXplot(out,'databrush',{'selectionmode' 'Rect' 'Label' 'on' 'RemoveLabels' 'off'})</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>&lt;i&gt;Interactive example 9.&lt;/i&gt; Example of persistent cumulative brushing (with persist off).</Title>
         <Desc>
            <ItemCell>All previous examples used a non persistent brushing (that is brushing could be done only once). The examples below use persistent brushing (that is brushing can be done multiple times) Example of the use of persistent non cumulative brush. Every time a brushing action is performed previous highlightments are removed Every time a brushing action is performed current highlightments replace previous highlightments</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>yXplot(out,'databrush',{'selectionmode','Rect','persist' 'off' ...</ItemCell>
            <ItemCell>                        'Label' 'on' 'RemoveLabels' 'off'})</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>&lt;i&gt;Interactive example 10.&lt;/i&gt; Example of persistent cumulative brushing (with persist on).</Title>
         <Desc>
            <ItemCell>Every time a brushing action is performed current highlightments are added to previous highlightments</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>yXplot(out,'databrush',{'selectionmode','Rect','persist' 'on' ...</ItemCell>
            <ItemCell>                        'Label' 'off' 'RemoveLabels' 'on'})</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>&lt;i&gt;Interactive example 11.&lt;/i&gt; Example of persistent cumulative brushing (with persist on and labeladd '1').</Title>
         <Desc>
            <ItemCell>Now option labeladd '1'. In this case the row numbers of the selected units is displayed in the monitoring residuals plot</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>yXplot(out,'databrush',{'selectionmode','Rect','persist' 'on' ...</ItemCell>
            <ItemCell>                        'labeladd' '1'})</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>Example of the use of option datatooltip.</Title>
         <Desc>
            <ItemCell>It gives the possibility of clicking on the different points and have information about the unit selected, the step of entry into the subset and the associated label</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>    yXplot(out,'datatooltip',1);</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>Option datatooltip combined with rownames Example of use of option datatooltip.</Title>
         <Desc>
            <ItemCell>First input argument of yXplot is a structure.</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>load carsmall</ItemCell>
            <ItemCell>x1 = Weight;</ItemCell>
            <ItemCell>x2 = Horsepower;    % Contains NaN data</ItemCell>
            <ItemCell>X=[x1 x2];</ItemCell>
            <ItemCell>y = MPG;    % Contaminated data</ItemCell>
            <ItemCell>boo=~isnan(y);</ItemCell>
            <ItemCell>y=y(boo,:);</ItemCell>
            <ItemCell>X=X(boo,:);</ItemCell>
            <ItemCell>Model=Model(boo,:);</ItemCell>
            <ItemCell>[out]=LXS(y,X,'nsamp',1000);</ItemCell>
            <ItemCell>[out]=FSReda(y,X,out.bs);</ItemCell>
            <ItemCell>% field label (rownames) is added to structure out</ItemCell>
            <ItemCell>% In this case datatooltip will display the rowname and not the default</ItemCell>
            <ItemCell>% string row...</ItemCell>
            <ItemCell>out.label=cellstr(Model);</ItemCell>
            <ItemCell>yXplot(out,'datatooltip',1)</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
   </ExtraEx>
</HelpXML>