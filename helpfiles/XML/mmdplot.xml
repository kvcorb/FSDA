<?xml version="1.0" encoding="utf-8"?>
<HelpXML>
   <Title><!--This is simply the filename-->mmdplot</Title>
   <Purpose><!--This is the second line of the .m file-->mmdplot plots the trajectory of minimum Mahalanobis distance (mmd)</Purpose>
   <Description><!--Description section--></Description>
   <InpArgs><!--REQUIRED INPUT ARGUMENT SECTION-->
      <Item>
         <Name>out</Name>
         <ShortDesc>Structure containing monitoring of mdr</ShortDesc>
         <TypeInd>Structure</TypeInd>
         <LongDesc>Structure containing the following fields.&#xD;
        out.mmd =  a matrix containing the monitoring of minimum Mahalanobis &#xD;
               distance in each step of the forward search. The first&#xD;
               column of mdr must contain the fwd search index This matrix&#xD;
               can be created using function FSMeda (compulsory argument).&#xD;
               If this matrix has three columns in the third colum there&#xD;
               is the monitoring of the (m+1)-th Mahalanobis distance&#xD;
       out.Un  =   matrix containing the order of entry of each unit&#xD;
               (necessary if datatooltip is true or databrush is not empty)&#xD;
       out.Y   =   the original n x v data matrix (necessary only if&#xD;
               option databrush is not empty)</LongDesc>
         <Example> </Example>
         <DataType>single| double</DataType>
         <ReqArg>1</ReqArg>
         <Struct>
            <ItemCell>
               <Value>mmd</Value>
               <Description>a matrix containing the monitoring of minimum Mahalanobis &#xD;
               distance in each step of the forward search. The first&#xD;
               column of mdr must contain the fwd search index This matrix&#xD;
               can be created using function FSMeda (compulsory argument).&#xD;
               If this matrix has three columns in the third colum there&#xD;
               is the monitoring of the (m+1)-th Mahalanobis distance</Description>
            </ItemCell>
            <ItemCell>
               <Value>Un</Value>
               <Description>matrix containing the order of entry of each unit&#xD;
               (necessary if datatooltip is true or databrush is not empty)</Description>
            </ItemCell>
            <ItemCell>
               <Value>Y</Value>
               <Description>the original n x v data matrix (necessary only if&#xD;
               option databrush is not empty)</Description>
            </ItemCell>
         </Struct>
      </Item>
   </InpArgs>
   <OptArgs><!--OPTIONAL (NAME/PAIRS) INPUT ARGUMENT SECTION-->
      <Item>
         <Name>quant</Name>
         <ShortDesc>quantiles for which envelopes have&#xD;
               to be computed</ShortDesc>
         <TypeInd>Vector</TypeInd>
         <LongDesc>1 x k vector containing quantiles for which envelopes have&#xD;
               to be computed. The default is to produce 1%, 50% and 99%&#xD;
               envelopes.&#xD;
               </LongDesc>
         <Example> 'quant',[0.01 0.99] &#xD;
               </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>mplus1</Name>
         <ShortDesc>add (m+1) order statistic curve</ShortDesc>
         <TypeInd>Scalar</TypeInd>
         <LongDesc>If mplus1=1 it&#xD;
               is also possible to plot the&#xD;
               curve associated with (m+1)th order statistic.&#xD;
               The default is mplus1=0&#xD;
               </LongDesc>
         <Example> 'mplus1',1 &#xD;
               </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>envm</Name>
         <ShortDesc>sample size to use</ShortDesc>
         <TypeInd>Scalar</TypeInd>
         <LongDesc>Scalar which specifies the size of the sample which is&#xD;
                   used to superimpose the envelope. The default is to add&#xD;
                   an envelope based on all the observations (size n&#xD;
                   envelope)&#xD;
               </LongDesc>
         <Example> 'envm',n &#xD;
               </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>xlimx</Name>
         <ShortDesc>min and max for x axis</ShortDesc>
         <TypeInd>Vector</TypeInd>
         <LongDesc>vector with two elements controlling minimum and&#xD;
                   maximum on the x axis. Default value is mmd(1,1)-3 and&#xD;
                   mmd(end,1)*1.3&#xD;
                   </LongDesc>
         <Example> 'xlimx',[20 100]&#xD;
                   </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>ylimy</Name>
         <ShortDesc>min and max for x axis</ShortDesc>
         <TypeInd>Vector</TypeInd>
         <LongDesc>Vector with two elements controlling minimum and&#xD;
                   maximum on the y axis. Default value is min(mmd(:,2))&#xD;
                   and max(mmd(:,2));&#xD;
                   </LongDesc>
         <Example> 'ylimy',[2 6]&#xD;
                   </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>lwdenv</Name>
         <ShortDesc>Line width</ShortDesc>
         <TypeInd>Scalar</TypeInd>
         <LongDesc>Scalar which controls the width of the lines associated&#xD;
                   with the envelopes. Default is lwdenv=1&#xD;
                   </LongDesc>
         <Example> 'lwdenv',2&#xD;
                   </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>tag</Name>
         <ShortDesc>plot handle</ShortDesc>
         <TypeInd>String</TypeInd>
         <LongDesc>String which identifies the handle&#xD;
                   of the plot which is about to be created. The default&#xD;
                   is to use tag 'pl_mmd'. Notice that if the program&#xD;
                   finds a plot which has a tag equal to the one specified&#xD;
                   by the user, then the output of the new plot overwrites&#xD;
                   the existing one in the same window else a new window&#xD;
                   is created&#xD;
                   </LongDesc>
         <Example> 'tag','mymmd'&#xD;
                   </Example>
         <DataType>char</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>datatooltip</Name>
         <ShortDesc>interactive clicking</ShortDesc>
         <TypeInd>Empty value (default) or&#xD;
                   structure</TypeInd>
         <LongDesc>If datatooltip is not empty the user can use the mouse&#xD;
                   in order to have information about the unit seected,&#xD;
                   the step in which the unit enters the search and the&#xD;
                   associated label. If datatooltip is a structure, it is&#xD;
                   possible to control the aspect of the data cursor (see&#xD;
                   function datacursormode for more details or the&#xD;
                   examples below). The default options of the structure&#xD;
                   are DisplayStyle='Window' and SnapToDataVertex='on'.&#xD;
                   </LongDesc>
         <Example> 'datatooltip',1&#xD;
                   </Example>
         <DataType>empty value, numeric or structure</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>label</Name>
         <ShortDesc>rwo labels</ShortDesc>
         <TypeInd>Cell</TypeInd>
         <LongDesc>Cell containing the labels of the&#xD;
                   units (optional argument used when datatooltip=1. If&#xD;
                   this field is not present labels row1, ..., rown will&#xD;
                   be automatically created and included in the pop up&#xD;
                   datatooltip window)&#xD;
                   </LongDesc>
         <Example> 'label',{'Smith','Johnson','Robert','Stallone'}&#xD;
                   </Example>
         <DataType>cell</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>databrush</Name>
         <ShortDesc>interactive mouse brushing</ShortDesc>
         <TypeInd>Empty value (default),&#xD;
                   scalar or structure</TypeInd>
         <LongDesc>DATABRUSH IS AN EMPTY VALUE .&#xD;
                   If databrush is an empty&#xD;
                   value (default), no brushing is done. The activation of&#xD;
                   this option (databrush is a scalar or a structure) enables&#xD;
                   the user  to select a set of trajectories in the&#xD;
                   current plot and to see them highlighted in the spm&#xD;
                   (notice that if the spm does not exist it is&#xD;
                   automatically created). In addition, brushed units can&#xD;
                   be highlighted in the monitoring MD plot&#xD;
                   Note that the window style of the&#xD;
                   other figures is set equal to that which contains the&#xD;
                   monitoring residual plot. In other words, if the&#xD;
                   monitoring residual plot is docked all the other&#xD;
                   figures will be docked too.&#xD;
                  DATABRUSH IS A SCALAR.&#xD;
                   If databrush is a scalar the default selection tool is a&#xD;
                   rectangular brush and it is possible to brush only once&#xD;
                   (that is persist='').&#xD;
                  DATABRUSH IS A STRUCTURE. &#xD;
                   If databrush is a structure, it is&#xD;
                   possible to use all optional arguments&#xD;
                   of function selectdataFS.m and the following optional&#xD;
                   argument:&#xD;
                  persist. Persist is an empty value or a scalar&#xD;
                   containing the strings 'on' or 'off' If persist = 'on'&#xD;
                   or 'off' brusing can be done as many time as the user&#xD;
                   requires. If persist='on' then the unit(s) currently&#xD;
                   brushed are added to those previously brushed. If&#xD;
                   persist='off' every time a new brush is performed units&#xD;
                   previously brushed are removed. The default value of&#xD;
                   persist is '' that is brushing is allowed only once. If&#xD;
                   persist is 'on' it is possible, every time a new&#xD;
                   brushing is done, to use a different color for the&#xD;
                   brushed units&#xD;
                  labeladd. If this option is '1', we label the units&#xD;
                     of the last selected group with the unit row index in&#xD;
                     matrices X and y. The default value is labeladd='',&#xD;
                     i.e. no label is added.&#xD;
                   %                   Remark: if databrush is a struct, it is possible to&#xD;
                   specify all optional arguments of function selectdataFS&#xD;
                   inside the curly brackets of option databrush.&#xD;
</LongDesc>
         <Example> 'databrush',1&#xD;
                   </Example>
         <DataType>single | double | struct</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>FontSize</Name>
         <ShortDesc>Size of axes labels</ShortDesc>
         <TypeInd>Scalar</TypeInd>
         <LongDesc>Scalar which controls the&#xD;
                   fontsize of the labels of the axes. Default value is 12&#xD;
                   </LongDesc>
         <Example> 'FontSize',14&#xD;
                   </Example>
         <DataType>single | double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>SizeAxesNum</Name>
         <ShortDesc>Size of axes numbers</ShortDesc>
         <TypeInd>Scalar which controls the fontsize of the numbers of&#xD;
                   the axes</TypeInd>
         <LongDesc>Default value is 10&#xD;
                   </LongDesc>
         <Example> 'SizeAxesNum',14&#xD;
                   </Example>
         <DataType>single | double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>nameY</Name>
         <ShortDesc>Regressors names</ShortDesc>
         <TypeInd>Cell array of strings</TypeInd>
         <LongDesc>Cell array of&#xD;
                   strings of length v containing the labels&#xD;
                   of the varibales of the original data matrix. If it is empty&#xD;
                 	(default) the sequence Y1, ..., Yp will be created&#xD;
                   automatically&#xD;
                   </LongDesc>
         <Example> 'nameY',{'Age','Income','Married','Profession'}&#xD;
                   </Example>
         <DataType>cell</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>lwd</Name>
         <ShortDesc>Curves line width</ShortDesc>
         <TypeInd>Scalar</TypeInd>
         <LongDesc>Scalar which controls linewidth of the curve which&#xD;
                   contains the monitoring of minimum Mahalanobis distance.&#xD;
                   Default line width=2&#xD;
                   </LongDesc>
         <Example> 'lwd',3&#xD;
                   </Example>
         <DataType>single | double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>titl</Name>
         <ShortDesc>main title</ShortDesc>
         <TypeInd>Character</TypeInd>
         <LongDesc>A label for the title (default: '')&#xD;
                   </LongDesc>
         <Example> 'namey','Plot title'&#xD;
                   </Example>
         <DataType>char</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>labx</Name>
         <ShortDesc>x axis title</ShortDesc>
         <TypeInd>Character</TypeInd>
         <LongDesc>A label for the x-axis (default: 'Subset size m')&#xD;
                   </LongDesc>
         <Example> 'labx','Subset size m'&#xD;
                   </Example>
         <DataType>char</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>laby</Name>
         <ShortDesc>y axis title</ShortDesc>
         <TypeInd>Character</TypeInd>
         <LongDesc>A label for the y-axis (default: 'Minimum Mahalnobis distance')&#xD;
                   </LongDesc>
         <Example> 'laby','mmd'&#xD;
                   </Example>
         <DataType>char</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>scaled</Name>
         <ShortDesc>scaled or unscaled envelopes</ShortDesc>
         <TypeInd>Boolean</TypeInd>
         <LongDesc>Use reference envelopes scaled or unscaled).&#xD;
                   If scaled=1 the envelopes are produced for&#xD;
                   scaled Mahalanobis distances (no consistency factor is&#xD;
                   applied) else the traditional consistency factor is applied&#xD;
                   Default is to use unscaled envelopes&#xD;
                   </LongDesc>
         <Example> 'scaled',0&#xD;
                   </Example>
         <DataType>char</DataType>
         <Struct> </Struct>
      </Item>
   </OptArgs>
   <OutArgs><!--OUTPUT ARGUMENT SECTION--></OutArgs>
   <MoreAbout><!--MORE ABOUT SECTION--></MoreAbout>
   <Acknowledgements><!--ACKNOWLEDGEMENTS SECTION--></Acknowledgements>
   <References><!--REFERENCES SECTION-->
      <Item>Atkinson and Riani (2000), Robust Diagnostic Regression Analysis,&#xD;
   Springer Verlag, New York.</Item>
   </References>
   <SeeAlso><!--SEE ALSO SECTION--></SeeAlso>
   <Ex><!--EXAMPLES SECTION-->
      <Item>
         <Title>Example of mmdplot.</Title>
         <Desc>&#xD;
    Steps common to all the examples&#xD;</Desc>
         <MATLABcode>
    Y=load('head.txt');&#xD;
    [fre]=unibiv(Y);&#xD;
    %create an initial subset with the 4 observations, which fell the smallest&#xD;
    %number of times outside the robust bivariate ellipses, and with the&#xD;
    %lowest Mahalanobis Distance.&#xD;
    fre=sortrows(fre,[3 4]);&#xD;
    m0=20;&#xD;
    bs=fre(1:m0,1);&#xD;
    [out]=FSMeda(Y,bs);&#xD;
    mmdplot(out)&#xD;</MATLABcode>
         <Exec>1</Exec>
      </Item>
      <Item>
         <Title>Example of the use of function mmd with personalized envelopes.</Title>
         <Desc/>
         <MATLABcode>
    mmdplot(out,'quant',[0.99;0.9999]);&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
   </Ex>
   <ExtraEx><!--EXTRA EXAMPLES SECTION-->
      <Item>
         <Title>&lt;i&gt;Interactive example 1.&lt;/i&gt;
     mmdplot with option dataooltip.</Title>
         <Desc>&#xD;
    Example of the use of function mmdplot with datatooltip passed as&#xD;
    scalar (that is using default options for datacursor (i.e.&#xD;
    DisplayStyle =window)&#xD;</Desc>
         <MATLABcode>
     mmdplot(out,'datatooltip',1);&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>&lt;i&gt;Interactive example 2.&lt;/i&gt;
     mmdplot with option dataooltip passed as structure.</Title>
         <Desc>&#xD;
    Example of the use of function mmdplot with datatooltip passed as&#xD;
    structure&#xD;</Desc>
         <MATLABcode>
    clear tooltip&#xD;
    tooltip.SnapToDataVertex='on'&#xD;
    tooltip.DisplayStyle='datatip'&#xD;
    mmdplot(out,'datatooltip',tooltip);&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>Example of the use of option envm.</Title>
         <Desc>&#xD;
   In this case the resuperimposed envelope is based on n-2 observations&#xD;</Desc>
         <MATLABcode>
   mmdplot(out,'envm',size(Y,1)-2);&#xD;
&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>&lt;i&gt;Interactive example 3.&lt;/i&gt;
     Example of the use of function mdrplot with databrush.</Title>
         <Desc/>
         <MATLABcode>
    mmdplot(out,'databrush',1);&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>&lt;i&gt;Interactive example 4.&lt;/i&gt;
     Example of databrush passed as structure.</Title>
         <Desc>&#xD;
     Example where databrush is a structure&#xD;</Desc>
         <MATLABcode>
    databrush=struct&#xD;
    databrush.selectionmode='Lasso'&#xD;
    mmdplot(out,'databrush',databrush)&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>&lt;i&gt;Interactive example 5.&lt;/i&gt;
    Example of the use of brush using brush mode.</Title>
         <Desc/>
         <MATLABcode>
    databrush=struct&#xD;
    databrush.selectionmode='Brush'&#xD;
    databrush.Label='on';&#xD;
    mmdplot(out,'databrush',databrush)&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>&lt;i&gt;Interactive example 6.&lt;/i&gt;
    Example of the use of persistent non cumulative brush.</Title>
         <Desc>     &#xD;
    Every time a&#xD;
    brushing action is performed previous highlightments are removed&#xD;</Desc>
         <MATLABcode>
    databrush=struct&#xD;
    databrush.persist='off'&#xD;
    databrush.Label='on';&#xD;
    databrush.RemoveLabels='off';&#xD;
    mmdplot(out,'databrush',databrush)&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>&lt;i&gt;Interactive example 7.&lt;/i&gt;
    Example of the use of persistent cumulative brush.</Title>
         <Desc>     &#xD;
     Every time a&#xD;
    brushing action is performed current highlightments are added to&#xD;
    previous highlightments&#xD;</Desc>
         <MATLABcode>
    databrush=struct&#xD;
    databrush.persist='on';&#xD;
    databrush.selectionmode='Rect'&#xD;
    mmdplot(out,'databrush',databrush)&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
   </ExtraEx>
</HelpXML>