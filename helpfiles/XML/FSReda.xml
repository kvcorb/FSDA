<?xml version="1.0" encoding="utf-8"?>
<HelpXML>
   <Title><!--This is simply the filename-->FSReda</Title>
   <Purpose><!--This is the second line of the .m file-->FSReda enables to monitor several quantities in each step of the forward search</Purpose>
   <Description><!--Description section--></Description>
   <InpArgs><!--REQUIRED INPUT ARGUMENT SECTION-->
      <Item>
         <Name>y</Name>
         <ShortDesc>A vector with n elements that contains the response variables</ShortDesc>
         <TypeInd>Missing values (NaN's) and infinite values (Inf's) are&#xD;
               allowed, since observations (rows) with missing or infinite&#xD;
               values will automatically be excluded from the&#xD;
               computations</TypeInd>
         <LongDesc> </LongDesc>
         <Example> </Example>
         <DataType>single| double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>X</Name>
         <ShortDesc>Data matrix of explanatory variables (also called 'regressors')&#xD;
               of dimension (n x p-1)</ShortDesc>
         <TypeInd>Rows of X represent observations, and&#xD;
               columns represent variables</TypeInd>
         <LongDesc>Missing values (NaN's) and&#xD;
               infinite values (Inf's) are allowed, since observations&#xD;
               (rows) with missing or infinite values will automatically&#xD;
               be excluded from the computations.</LongDesc>
         <Example> </Example>
         <DataType>single| double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>bsb</Name>
         <ShortDesc>list of units forming the initial&#xD;
               subset</ShortDesc>
         <TypeInd>Vector or scalar</TypeInd>
         <LongDesc>If bsb=0 (default) then the procedure starts with p&#xD;
               units randomly chosen else if bsb is not 0 the search will&#xD;
               start with m0=length(bsb).</LongDesc>
         <Example> </Example>
         <DataType>single| double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
   </InpArgs>
   <OptArgs><!--OPTIONAL (NAME/PAIRS) INPUT ARGUMENT SECTION-->
      <Item>
         <Name>intercept</Name>
         <ShortDesc>Indicator for constant term</ShortDesc>
         <TypeInd>Scalar</TypeInd>
         <LongDesc>If 1, a model with constant term will be fitted (default),&#xD;
                     if 0, no constant term will be included.&#xD;
                       </LongDesc>
         <Example> 'intercept',1&#xD;
                       </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>init</Name>
         <ShortDesc>Search initialization</ShortDesc>
         <TypeInd>Scalar</TypeInd>
         <LongDesc>It specifies the point where to initialize the search&#xD;
                       and start monitoring required diagnostics. if init is not&#xD;
                       specified it will be set equal to :&#xD;
                       p+1, if the sample size is smaller than 40;&#xD;
                       min(3*p+1,floor(0.5*(n+p+1))), otherwise.&#xD;
                       </LongDesc>
         <Example> 'init',100 starts monitoring from step m=100&#xD;
                       </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>nocheck</Name>
         <ShortDesc>Check input arguments</ShortDesc>
         <TypeInd>Scalar</TypeInd>
         <LongDesc>If nocheck is equal to 1 no check is performed on&#xD;
                       matrix y and matrix X. Notice that y and X are left&#xD;
                       unchanged. In other words the additional column of ones for&#xD;
                       the intercept is not added. As default nocheck=0. The&#xD;
                       controls on h, alpha and nsamp still remain&#xD;
                       </LongDesc>
         <Example> 'nocheck',1&#xD;
                       </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>tstat</Name>
         <ShortDesc>the kind of t-statistics which have to be monitored</ShortDesc>
         <TypeInd>Character</TypeInd>
         <LongDesc>tstat = 'trad' implies  monitoring of traditional t&#xD;
               statistics (out.Tols). In this case the estimate of $\sigma^2$ at step m&#xD;
               is based on $s^2_m$ (notice that $s^2_m&amp;lt;&amp;lt;\sigma^2$ when m/n is&#xD;
               small) tstat = 'scal' (default) implies monitoring of&#xD;
               rescaled t statistics In this scale the estimate of&#xD;
               $\sigma^2$ at step m is based on $s^2_m / var_{truncnorm(m/n)}$&#xD;
               where $var_{truncnorm(m/n)}$ is the variance of the truncated&#xD;
               normal distribution.&#xD;
               </LongDesc>
         <Example> 'tstat','trad'&#xD;
               </Example>
         <DataType>char</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>conflev</Name>
         <ShortDesc>confidence levels to be used to compute confidence interval&#xD;
               for the elements of $\beta$ and for $\sigma^2$</ShortDesc>
         <TypeInd>Vector</TypeInd>
         <LongDesc>The default value of conflev is [0.95 0.99] that&#xD;
               is 95% and 99% confidence intervals are computed.&#xD;
                </LongDesc>
         <Example> 'conflev',[0.90 0.93] &#xD;
               </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
   </OptArgs>
   <OutArgs><!--OUTPUT ARGUMENT SECTION-->
      <Item>
         <Name>out</Name>
         <ShortDesc> </ShortDesc>
         <TypeInd> </TypeInd>
         <LongDesc>
            <ItemCell>
               <Value>RES</Value>
               <Description>n x (n-init+1) = matrix containing the monitoring of&#xD;
               scaled residuals: &#xD;
               1st row = residual for first unit; &#xD;
               ...; &#xD;
               nth row = residual for nth unit.</Description>
            </ItemCell>
            <ItemCell>
               <Value>LEV</Value>
               <Description>(n+1) x (n-init+1) = matrix containing the monitoring of&#xD;
               leverage: &#xD;
               1st row = leverage for first unit: &#xD;
               ...; &#xD;
               nth row = leverage for nth unit.</Description>
            </ItemCell>
            <ItemCell>
               <Value>BB</Value>
               <Description>n x (n-init+1) matrix containing the information about the units belonging&#xD;
               to the subset at each step of the forward search: &#xD;
               1st col = indexes of the units forming subset in the&#xD;
               initial step; &#xD;
               ...; &#xD;
               last column = units forming subset in the final step (all&#xD;
               units).</Description>
            </ItemCell>
            <ItemCell>
               <Value>mdr</Value>
               <Description>n-init x 3 matrix which contains the monitoring of minimum&#xD;
               deletion residual or (m+1)ordered residual  at each step of&#xD;
               the forward search: &#xD;
               1st col = fwd search index (from init to n-1); &#xD;
               2nd col = minimum deletion residual; &#xD;
               3rd col = (m+1)-ordered residual. &#xD;
               Remark: these quantities are stored with sign, that is the&#xD;
               min deletion residual is stored with negative sign if&#xD;
               it corresponds to a negative residual.</Description>
            </ItemCell>
            <ItemCell>
               <Value>msr</Value>
               <Description>n-init+1 x 3 = matrix which contains the monitoring of&#xD;
               maximum studentized residual or m-th ordered residual: &#xD;
               1st col = fwd search index (from init to n); &#xD;
               2nd col = maximum studentized residual; &#xD;
               3rd col = (m)-ordered studentized residual.</Description>
            </ItemCell>
            <ItemCell>
               <Value>nor</Value>
               <Description>(n-init+1) x 4 matrix containing the monitoring of&#xD;
               normality test in each step of the forward search: &#xD;
               1st col = fwd search index (from init to n);&#xD;
               2nd col = Asymmetry test;&#xD;
               3rd col = Kurtosis test;&#xD;
               4th col = Normality test.</Description>
            </ItemCell>
            <ItemCell>
               <Value>Bols</Value>
               <Description>(n-init+1) x (p+1) matrix containing the monitoring of&#xD;
               estimated beta coefficients in each step of the forward&#xD;
               search.</Description>
            </ItemCell>
            <ItemCell>
               <Value>S2</Value>
               <Description>(n-init+1) x 4 matrix containing the monitoring of S2 or R2&#xD;
               in each step of the forward search: &#xD;
               1st col = fwd search index (from init to n); &#xD;
               2nd col = monitoring of S2; &#xD;
               3rd col = monitoring of R2; &#xD;
               4th col = monitoring of rescaled S2. &#xD;
               In this case the&#xD;
               estimated of $\sigma^2$ at step m is divided by the&#xD;
               consistency factor (to make the estimate asymptotically&#xD;
               unbiased).</Description>
            </ItemCell>
            <ItemCell>
               <Value>coo</Value>
               <Description>(n-init+1) x 3 matrix containing the monitoring of Cook or&#xD;
               modified Cook distance in each step of the forward search: &#xD;
               1st col = fwd search index (from init to n); &#xD;
               2nd col = monitoring of Cook distance; &#xD;
               3rd col = monitoring of modified Cook distance.</Description>
            </ItemCell>
            <ItemCell>
               <Value>Tols</Value>
               <Description>(n-init+1) x (p+1) matrix containing the monitoring of&#xD;
               estimated t-statistics (as specified in option input&#xD;
               'tstat'.&#xD;
               in each step of the forward search</Description>
            </ItemCell>
            <ItemCell>
               <Value>Un</Value>
               <Description>(n-init) x 11 Matrix which contains the unit(s)&#xD;
               included in the subset at each step of the fwd search. &#xD;
               REMARK: in every step the new subset is compared with the&#xD;
               old subset. Un contains the unit(s) present in the new&#xD;
               subset but not in the old one Un(1,2) for example contains&#xD;
               the unit included in step init+1 Un(end,2) contains the&#xD;
               units included in the final step of the search.</Description>
            </ItemCell>
            <ItemCell>
               <Value>betaINT</Value>
               <Description>Confidence intervals for the elements of $\beta$.&#xD;
                 betaINT is a (n-init+1)-by-2*length(confint)-by-p 3D array.&#xD;
                 Each third dimension refers to an element of beta: &#xD;
                 betaINT(:,:,1) is associated with first element of beta; &#xD;
                 ...; &#xD;
                 betaINT(:,:,p) is associated with last element of beta. &#xD;
                 The first two columns contain the lower&#xD;
                 and upper confidence limits associated with conflev(1).&#xD;
                 Columns three and four contain the lower&#xD;
                 and upper confidence limits associated with conflev(2); &#xD;
                 ...; &#xD;
                 The last two columns contain the lower&#xD;
                 and upper confidence limits associated with conflev(end).&#xD;
                 &#xD;
                 For example betaint(:,3:4,5) contain the lower and upper&#xD;
                 confidence limits for the fifth element of beta using&#xD;
                 confidence level specified in the second element of input&#xD;
                 option conflev.</Description>
            </ItemCell>
            <ItemCell>
               <Value>sigma2INT</Value>
               <Description>confidence interval for $\sigma^2$. &#xD;
                1st col = fwd search index; &#xD;
                2nd col = lower confidence limit based on conflev(1);&#xD;
                3rd col = upper confidence limit based on conflev(1);&#xD;
                4th col = lower confidence limit based on conflev(2);&#xD;
                5th col = upper confidence limit based on conflev(2);&#xD;
                ... &#xD;
                penultimate col = lower confidence limit based on conflev(end);&#xD;
                last col = upper confidence limit based on conflev(end);</Description>
            </ItemCell>
            <ItemCell>
               <Value>y</Value>
               <Description>A vector with n elements that contains the response&#xD;
               variable which has been used</Description>
            </ItemCell>
            <ItemCell>
               <Value>X</Value>
               <Description>Data matrix of explanatory variables&#xD;
               which has been used (it also contains the column of ones if&#xD;
               input option intercept was missing or equal to 1)</Description>
            </ItemCell>
            <ItemCell>
               <Value>class</Value>
               <Description>string FSReda.</Description>
            </ItemCell>
         </LongDesc>
      </Item>
   </OutArgs>
   <MoreAbout><!--MORE ABOUT SECTION--></MoreAbout>
   <Acknowledgements><!--ACKNOWLEDGEMENTS SECTION--></Acknowledgements>
   <References><!--REFERENCES SECTION-->
      <Item>Atkinson and Riani (2000), Robust Diagnostic Regression Analysis,&#xD;
   Springer Verlag, New York.</Item>
   </References>
   <SeeAlso><!--SEE ALSO SECTION-->
      <Item>LXS</Item>
      <Item>FSRbsb</Item>
   </SeeAlso>
   <Ex><!--EXAMPLES SECTION-->
      <Item>
         <Title>FSReda with all default options.</Title>
         <Desc>&#xD;
     Example of use of FSReda based on a starting point coming&#xD;
     from LMS.&#xD;</Desc>
         <MATLABcode>
    n=200;&#xD;
    p=3;&#xD;
    randn('state', 123456);&#xD;
    X=randn(n,p);&#xD;
    % Uncontaminated data&#xD;
    y=randn(n,1);&#xD;
    % Contaminated data&#xD;
    ycont=y;&#xD;
    ycont(1:5)=ycont(1:5)+6;&#xD;
    [out]=LXS(y,X,'nsamp',1000);&#xD;
    out=FSReda(y,X,out.bs);&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>FSReda with optional argument.</Title>
         <Desc>&#xD;
     Example of use of function FSReda using a random start and traditional&#xD;
     t-stat monitoring.&#xD;</Desc>
         <MATLABcode>
    n=200;&#xD;
    p=3;&#xD;
    randn('state', 123456);&#xD;
    X=randn(n,p);&#xD;
    % Uncontaminated data&#xD;
    y=randn(n,1);&#xD;
    % Contaminated data&#xD;
    ycont=y;&#xD;
    ycont(1:5)=ycont(1:5)+6;&#xD;
    out=FSReda(y,X,0,'tstat','trad');&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
   </Ex>
   <ExtraEx><!--EXTRA EXAMPLES SECTION-->
      <Item>
         <Title>Examples with real data: wool data.</Title>
         <Desc/>
         <MATLABcode>
    xx=load('wool.txt');&#xD;
    X=xx(:,1:3);&#xD;
    y=log(xx(:,4));&#xD;
    [out]=LXS(y,X,'nsamp',0);&#xD;
    [out]=FSReda(y,X,out.bs,'tstat','scal');&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>Example with artificial dataset.</Title>
         <Desc/>
         <MATLABcode>
    n=100;&#xD;
    p=8;&#xD;
    state=1;&#xD;
    randn('state', state);&#xD;
    X=randn(n,p);&#xD;
    y=randn(n,1);&#xD;
    y(1:10)=y(1:10)+5;&#xD;
    % Run the forward search with Exploratory Data Analysis purposes&#xD;
    % LMS using 10000 subsamples&#xD;
    [outLXS]=LXS(y,X,'nsamp',10000);&#xD;
    % Forward Search&#xD;
    [out]=FSReda(y,X,outLXS.bs);&#xD;
    %The monitoring residuals plot shows a set of positive residuals which&#xD;
    %starting from the central part of the search tend to have a residual much&#xD;
    %larger than that of the other units.&#xD;
    resfwdplot(out);&#xD;
    %The minimum deletion residual from m=90 starts going above the 99% threshold.&#xD;
    mdrplot(out);&#xD;
    %The curve which monitors the normality test shows a sudden big increase with the outliers are included&#xD;
    figure;&#xD;
    lwdenv=2;&#xD;
    xlimx=[10 100];&#xD;
    subplot(2,2,1);&#xD;
    plot(out.nor(:,1),out.nor(:,2));&#xD;
    title('Asimmetry test');&#xD;
    xlim(xlimx);&#xD;
    quant=chi2inv(0.99,1);&#xD;
    v=axis;&#xD;
    line([v(1),v(2)],[quant,quant],'color','r','LineWidth',lwdenv);&#xD;
    subplot(2,2,2)&#xD;
    plot(out.nor(:,1),out.nor(:,3))&#xD;
    title('Kurtosis test');&#xD;
    xlim(xlimx);&#xD;
    v=axis;&#xD;
    line([v(1),v(2)],[quant,quant],'color','r','LineWidth',lwdenv);&#xD;
    subplot(2,2,3:4)&#xD;
    plot(out.nor(:,1),out.nor(:,4));&#xD;
    xlim(xlimx);&#xD;
    quant=chi2inv(0.99,2);&#xD;
    v=axis;&#xD;
    line([v(1),v(2)],[quant,quant],'color','r','LineWidth',lwdenv);&#xD;
    title('Normality test');&#xD;
    xlabel('Subset size m');&#xD;</MATLABcode>
         <Exec>1</Exec>
      </Item>
      <Item>
         <Title>Monitoring of 95 per cent and 99 per cent confidence intervals of&#xD;
     beta and sigma2.</Title>
         <Desc>&#xD;
     House price data &#xD;</Desc>
         <MATLABcode>
    load hprice.txt;&#xD;
    n=size(hprice,1);&#xD;
    y=hprice(:,1);&#xD;
    X=hprice(:,2:5);&#xD;
&#xD;
    outFSR=FSR(y,X,'plots',0,'msg',0);&#xD;
    dout=n-length(outFSR.ListOut);&#xD;
    % init = point to start monitoring diagnostics along the FS&#xD;
    init=20;&#xD;
    [outLXS]=LXS(y,X,'nsamp',10000);&#xD;
    outEDA=FSReda(y,X,outLXS.bs,'conflev',[0.95 0.99],'init',init);&#xD;
    p=size(X,2)+1;&#xD;
    % Set font size, line width and line style&#xD;
    figure;&#xD;
    lwd=2.5;&#xD;
    FontSize=14;&#xD;
    linst={'-','--',':','-.','--',':'};&#xD;
    nr=3;&#xD;
    nc=2;&#xD;
    xlimL=init; % lower value fo xlim&#xD;
    xlimU=n+1;  % upper value of xlim&#xD;
    close all&#xD;
    for j=1:p&#xD;
        subplot(nr,nc,j);&#xD;
        hold('on')&#xD;
        % plot 95% and 99% HPD  trajectories&#xD;
        plot(outEDA.Bols(:,1),outEDA.betaINT(:,1:2,j),'LineStyle',linst{4},'LineWidth',lwd,'Color','b')&#xD;
        plot(outEDA.Bols(:,1),outEDA.betaINT(:,3:4,j),'LineStyle',linst{4},'LineWidth',lwd,'Color','r')&#xD;
&#xD;
        % plot estimate of beta1_j&#xD;
        plot(outEDA.Bols(:,1),outEDA.Bols(:,j+1)','LineStyle',linst{1},'LineWidth',lwd,'Color','k')&#xD;
&#xD;
&#xD;
        % Set ylim&#xD;
        ylimU=max(outEDA.betaINT(:,4,j));&#xD;
        ylimL=min(outEDA.betaINT(:,3,j));&#xD;
        ylim([ylimL ylimU])&#xD;
&#xD;
        % Set xlim&#xD;
        xlim([xlimL xlimU]);&#xD;
&#xD;
        % Add vertical line in correspondence of the step prior to the&#xD;
        % entry of the first outlier&#xD;
        line([dout; dout],[ylimL; ylimU],'Color','r','LineWidth',lwd);&#xD;
&#xD;
        ylabel(['$\hat{\beta_' num2str(j-1) '}$'],'Interpreter','LaTeX','FontSize',20,'rot',-360);&#xD;
        set(gca,'FontSize',FontSize);&#xD;
        if j&amp;gt;(nr-1)*nc&#xD;
            xlabel('Subset size m','FontSize',FontSize);&#xD;
        end&#xD;
    end&#xD;
&#xD;
    % Subplot associated with the monitoring of sigma^2&#xD;
    subplot(nr,nc,6);&#xD;
    hold('on')&#xD;
    % 99%&#xD;
    plot(outEDA.sigma2INT(:,1),outEDA.sigma2INT(:,4:5),'LineStyle',linst{4},'LineWidth',lwd,'Color','r')&#xD;
    % 95%&#xD;
    plot(outEDA.sigma2INT(:,1),outEDA.sigma2INT(:,2:3),'LineStyle',linst{2},'LineWidth',lwd,'Color','b')&#xD;
    % Plot rescaled S2&#xD;
    plot(outEDA.S2(:,1),outEDA.S2(:,4),'LineWidth',lwd,'Color','k')&#xD;
    ylabel('$\hat{\sigma}^2$','Interpreter','LaTeX','FontSize',20,'rot',-360);&#xD;
    set(gca,'FontSize',FontSize);&#xD;
&#xD;
    % Set ylim&#xD;
    ylimU=max(outEDA.sigma2INT(:,5));&#xD;
    ylimL=min(outEDA.sigma2INT(:,4));&#xD;
    ylim([ylimL ylimU])&#xD;
    % Set xlim&#xD;
    xlim([xlimL xlimU]);&#xD;
&#xD;
    % Add vertical line in correspondence of the step prior to the&#xD;
    % entry of the first outlier&#xD;
    line([dout; dout],[ylimL; ylimU],'Color','r','LineWidth',lwd);&#xD;
    xlabel('Subset size m','FontSize',FontSize);&#xD;
&#xD;
    % Add multiple title&#xD;
    suplabel(['Housing data; confidence intervals of the parameters monitored in the interval ['...&#xD;
        num2str(xlimL) ',' num2str(xlimU) ...&#xD;
        ']'],'t');&#xD;
    disp(['The vertical lines are located in the' ...&#xD;
        ' step prior to the inclusion of the first outlier'])&#xD;</MATLABcode>
         <Exec>1</Exec>
      </Item>
   </ExtraEx>
</HelpXML>