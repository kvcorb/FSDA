<?xml version="1.0" encoding="utf-8"?>
<HelpXML>
   <Title><!--This is simply the filename-->makecontentsfileFS</Title>
   <Purpose><!--This is the second line of the .m file-->makecontentsfileFS  extends Matlab function makecontentsfile</Purpose>
   <Description><!--Description section-->makecontentsfileFS creates a file named contents which contains&#xD;
   information about selected files present in folder and/or subfolders</Description>
   <InpArgs><!--REQUIRED INPUT ARGUMENT SECTION--></InpArgs>
   <OptArgs><!--OPTIONAL (NAME/PAIRS) INPUT ARGUMENT SECTION-->
      <Item>
         <Name>dirpath</Name>
         <ShortDesc>path to use</ShortDesc>
         <TypeInd>String or cell array of strings</TypeInd>
         <LongDesc>Absolute path of the folder(s) for which summary file must&#xD;
                   be created.&#xD;
                   If dirpath is not specified dirpath is the one of the&#xD;
                   current folder and it is found using MATLAB instruction&#xD;
                   pwd. If dirpath is a cell array of string then NameOutputFile&#xD;
                   is created for all entry of dirpath.&#xD;
                   %                   Remark: dirpath can be conveniently created with&#xD;
                   function findDir.m&#xD;
</LongDesc>
         <Example> 'dirpath',pwd&#xD;
                   </Example>
         <DataType>string</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>NameOutputFile</Name>
         <ShortDesc>Name of output file</ShortDesc>
         <TypeInd>String</TypeInd>
         <LongDesc>String containing the name of the file which has to be&#xD;
                   created. If this option is not specified Contents.m is used.&#xD;
                   </LongDesc>
         <Example> 'NameOutputFile','Mycontents.m'&#xD;
                   </Example>
         <DataType>string</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>force</Name>
         <ShortDesc>Overwrite existing file</ShortDesc>
         <TypeInd>Boolean</TypeInd>
         <LongDesc>Boolean which specifies whether existing output file must&#xD;
                   be overwritten. If force is true (default) FileName is&#xD;
                   overwritten else just out cell is produced&#xD;
                   </LongDesc>
         <Example> 'force',false&#xD;
                   </Example>
         <DataType>string</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>FilterOutFileName</Name>
         <ShortDesc>filter files depending on their name</ShortDesc>
         <TypeInd>String</TypeInd>
         <LongDesc>String which specifies which .m files do not have to be&#xD;
                   included inside NameOutputFile. All files whose name contains&#xD;
                   FilterOutFileName will not be included inside NameOutputFile.&#xD;
                   If this optional argument is not specified all files containing&#xD;
                   string [OlD] (lower case or uppercase) will not be&#xD;
                   listed inside NameOutputFile&#xD;
                   </LongDesc>
         <Example> 'FilterOutFileName','veryold'&#xD;
                   </Example>
         <DataType>string</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>FilterFileContent</Name>
         <ShortDesc>filter</ShortDesc>
         <TypeInd>m files depending on their content</TypeInd>
         <LongDesc>String.&#xD;
                   String which specifies the string files must contain&#xD;
                   to be included inside NameOutputFile.&#xD;
                   If this optional argument is not specified or it is empty&#xD;
                   all files .m file (whose name does not contain&#xD;
                   FilterOutFileName) will be listed inside&#xD;
                   NameOutputFile. In the final column of output cell dout, the letters after&#xD;
                   FilterFileContent will be shown. For example suppose&#xD;
                   that FilterFileContent is '%TAGFDSA' and that two&#xD;
                   files respectively contain the words '%TAGFDSAregression' and&#xD;
                   '%TAGFDSAmultivariate' then the words 'regression' and&#xD;
                   'multivariate' will be given inside last column of dout&#xD;
                   and inside NameOutputFile under column 'category'&#xD;
                   </LongDesc>
         <Example> 'FilterFileContent','%FScategory'&#xD;
                   </Example>
         <DataType>string</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>printOutputCell</Name>
         <ShortDesc>print out cell is a file</ShortDesc>
         <TypeInd>String</TypeInd>
         <LongDesc>String contaning the name of the file of the current&#xD;
                   folder which contains the summary of all files present&#xD;
                   in findDir folders. The default value of&#xD;
                   printOutputCell is '' that is the overall content file&#xD;
                   is not created&#xD;
                   </LongDesc>
         <Example> 'printOutputCell','ContentsAll.m'&#xD;
                   </Example>
         <DataType>string</DataType>
         <Struct> </Struct>
      </Item>
   </OptArgs>
   <OutArgs><!--OUTPUT ARGUMENT SECTION-->
      <Item>
         <Name>out</Name>
         <ShortDesc>structured information of filtered files </ShortDesc>
         <TypeInd>Selected Tags.</TypeInd>
         <LongDesc> cell.&#xD;
                 Cell of size r-times-9 containing detailed information about&#xD;
                 the files present in required folder or folders if&#xD;
                 dirpath is a cell array of strings.&#xD;
               The columns of dout contain the following information:&#xD;
               out(:,1)= name of the file (with extension);&#xD;
               out(:,2)= date (in local format);&#xD;
               out(:,3)= size of the files in bytes;&#xD;
               out(:,4)= boolean 1 if name is a folder and 0 if name is a file;&#xD;
               out(:,5)= Modification date as serial date number;&#xD;
               out(:,6)= matlab file name (without .m extension);&#xD;
               out(:,7)= file description (the so called H1 line of the file);&#xD;
               out(:,8)= string which identifies file category. File&#xD;
                           category is the string after&#xD;
                           'FilterFileContent' in each file.&#xD;
               out(:,9)= string which contains file path.&#xD;
               Remark: if the file contains:&#xD;
               FilterFileContentword1 in row 34;&#xD;
               FilterFileContentAnotherName in row 456;&#xD;
               FilterFileContentObama, in row 1243;&#xD;
               than category is associated to&#xD;
               the last instance which is found (in this example 'Obama')</LongDesc>
      </Item>
      <Item>
         <Name>Excluded</Name>
         <ShortDesc>&#xD;
                 cell</ShortDesc>
         <TypeInd>structured information of .</TypeInd>
         <LongDesc>m files not included.&#xD;
                 Cell of size r-times-9 containing detailed information about&#xD;
                 the files present in required folder or folders if&#xD;
                 dirpath is a cell array of strings but which have been&#xD;
                 excluded by the filters.&#xD;
               The columns of Excluded contain the following information:&#xD;
               Excluded(:,1)= name of the file (with extension);&#xD;
               Excluded(:,2)= date (in local format);&#xD;
               Excluded(:,3)= size of the files in bytes;&#xD;
               Excluded(:,4)= boolean 1 if name is a folder and 0 if name is a file;&#xD;
               Excluded(:,5)= Modification date as serial date number;&#xD;
               Excluded(:,6)= matlab file name (without .m extension);&#xD;
               Excluded(:,7)= file description (the so called H1 line of the file);&#xD;
               Excluded(:,8)= string which identifies file category. File&#xD;
                           category is the string after&#xD;
                           'FilterFileContent' in each file.&#xD;
               Excluded(:,9)= string which contains file path.</LongDesc>
      </Item>
   </OutArgs>
   <MoreAbout><!--MORE ABOUT SECTION--></MoreAbout>
   <Acknowledgements><!--ACKNOWLEDGEMENTS SECTION--></Acknowledgements>
   <References><!--REFERENCES SECTION--></References>
   <SeeAlso><!--SEE ALSO SECTION-->
      <Item>publishFunctionAlpha</Item>
      <Item>publishFunctionCate</Item>
      <Item>publishFS</Item>
   </SeeAlso>
   <Ex><!--EXAMPLES SECTION-->
      <Item>
         <Title>makecontentsfileFS with all default options.</Title>
         <Desc/>
         <MATLABcode>
    out=makecontentsfileFS('force',false);&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>Just create output cell out but not the output file if it already exists.</Title>
         <Desc>&#xD;
     Create personalized content file of current folder.&#xD;</Desc>
         <MATLABcode>
    out=makecontentsfileFS('force',false);&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>Create personalized content file of selected subfolders.</Title>
         <Desc>&#xD;
     Create contents file for subfolder '(main root of FSDA)\utilities' and list&#xD;
     just the files which contain string 'FScategory:'&#xD;</Desc>
         <MATLABcode>
    FileName='addFSDA2path';&#xD;
    FullPath=which(FileName);&#xD;
    FSDAroot=FullPath(1:end-length(FileName)-3);&#xD;
    dirpathsel=[FSDAroot filesep 'utilities'];&#xD;
    %  Note that force is false and therefore just output cell is created.&#xD;
    out=makecontentsfileFS('dirpath',dirpathsel,'FilterFileContent','%FScategory:','force',false)&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
   </Ex>
   <ExtraEx><!--EXTRA EXAMPLES SECTION-->
      <Item>
         <Title>Example of the use of options dirpath and  FilterFileContent.</Title>
         <Desc>&#xD;
     Preliminary step: create a list of the subfolders which have to be&#xD;
     included, using routine findDir with options 'InclDir' and 'ExclDir'.&#xD;
     Find full path of the main root where FSDA is installed&#xD;</Desc>
         <MATLABcode>
    FileName='addFSDA2path';&#xD;
    FullPath=which(FileName);&#xD;
    root=FullPath(1:end-length(FileName)-3);&#xD;
    InclDir={'graphics' 'regression' 'multivariate' 'clustering' 'combinatorial' ...&#xD;
    'examples' 'utilities' 'utilities_stat'};&#xD;
    ExclDir={'privateFS'  'datasets'};&#xD;
    % Create list of folders which must have a personalized contents file&#xD;
    list = findDir(root,'InclDir',InclDir,'ExclDir',ExclDir)&#xD;
    % Crete personalized contents file for main folder of FSDA&#xD;
    % and required subfolders.&#xD;
    [out,Excluded]=makecontentsfileFS('dirpath',list,'FilterFileContent','%FScategory:','force',false)&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
   </ExtraEx>
</HelpXML>