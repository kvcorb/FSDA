<?xml version="1.0" encoding="utf-8"?>
<HelpXML>
   <Title><!--This is simply the filename-->FSMmmdrs</Title>
   <Purpose><!--This is the second line of the .m file-->FSMmmdrs performs random start monitoring of minimum Mahalanobis distance</Purpose>
   <Description><!--Description section-->The trajectories originate from many different random initial subsets and&#xD;
 provide information on the presence of groups in the data. Groups&#xD;
 are investigated by monitoring the minimum Mahalanobis&#xD;
 distance outside the FS subset.</Description>
   <InpArgs><!--REQUIRED INPUT ARGUMENT SECTION-->
      <Item>
         <Name>Y</Name>
         <ShortDesc>Input data</ShortDesc>
         <TypeInd>Matrix</TypeInd>
         <LongDesc>n x v data matrix; n observations and v variables. Rows of&#xD;
               Y represent observations, and columns represent variables.&#xD;
               Missing values (NaN's) and infinite values (Inf's) are&#xD;
               allowed, since observations (rows) with missing or infinite&#xD;
               values will automatically be excluded from the&#xD;
               computations.&#xD;
                </LongDesc>
         <Example> </Example>
         <DataType>single|double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
   </InpArgs>
   <OptArgs><!--OPTIONAL (NAME/PAIRS) INPUT ARGUMENT SECTION-->
      <Item>
         <Name>init</Name>
         <ShortDesc>scalar, specifies the point where to initialize the search&#xD;
               and start monitoring the required diagnostics</ShortDesc>
         <TypeInd>If not&#xD;
               specified, it is set equal to p+1</TypeInd>
         <LongDesc> </LongDesc>
         <Example> 'init',10&#xD;
                 </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>bsbsteps</Name>
         <ShortDesc>vector which specifies for which steps of the fwd search it&#xD;
               is necessary to save the units forming subset for each&#xD;
               random start</ShortDesc>
         <TypeInd>If bsbsteps is 0 for each random start we&#xD;
               store the units forming subset in all steps</TypeInd>
         <LongDesc>The default is&#xD;
               store the units forming subset in all steps if n&amp;lt;=500 else&#xD;
               to store the units forming subset at step init and steps&#xD;
               which are multiple of 100. For example, if n=753 and&#xD;
               init=6, units forming subset are stored for m=init, 100,&#xD;
               200, 300, 400, 500 and 600.&#xD;
                 %               REMARK: vector bsbsteps must contain numbers from init to&#xD;
               n. if min(bsbsteps)&amp;lt;init a warning message will appear on&#xD;
               the screen.&#xD;
</LongDesc>
         <Example> 'bsbsteps',[10 20 30]&#xD;
                 </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>nsimul</Name>
         <ShortDesc>scalar, number of random starts</ShortDesc>
         <TypeInd>Default value=200</TypeInd>
         <LongDesc> </LongDesc>
         <Example> 'nsimul',1000&#xD;
                 </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>nocheck</Name>
         <ShortDesc>It controls whether to perform checks on matrix Y</ShortDesc>
         <TypeInd>Scalar</TypeInd>
         <LongDesc>If nocheck is equal to 1 no check is performed.&#xD;
                 As default nocheck=0.&#xD;
                 </LongDesc>
         <Example> 'nocheck',1&#xD;
                 </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>plots</Name>
         <ShortDesc>scalar</ShortDesc>
         <TypeInd>If equal to one a plot of random starts minimum&#xD;
               Mahalanobis residual appears  on the screen with 1%, 50% and&#xD;
               99% confidence bands else (default) no plot is shown</TypeInd>
         <LongDesc>%               Remark: the plot which is produced is very simple. In order&#xD;
               to control a series of options in this plot and in order to&#xD;
               connect it dynamically to the other forward plots it is&#xD;
               necessary to use function mdrrsplot.&#xD;
</LongDesc>
         <Example> 'plots',0&#xD;
               </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>numpool</Name>
         <ShortDesc>scalar</ShortDesc>
         <TypeInd>If numpool &amp;gt; 1, the routine automatically checks&#xD;
               if the Parallel Computing Toolbox is installed and&#xD;
               distributes the random starts over numpool parallel&#xD;
               processes</TypeInd>
         <LongDesc>If numpool &amp;lt;= 1, the random starts are run&#xD;
               sequentially. By default, numpool is set equal to the&#xD;
               number of physical cores available in the CPU (this choice&#xD;
               may be inconvenient if other applications are running&#xD;
               concurrently). The same happens if the numpool value&#xD;
               chosen by the user exceeds the available number of cores.&#xD;
               %               REMARK : up to R2013b, there was a limitation on the&#xD;
               maximum number of cores that could be addressed by the&#xD;
               parallel processing toolbox (8 and, more recently, 12).&#xD;
               From R2014a, it is possible to run a local cluster of more&#xD;
               than 12 workers.&#xD;
%               REMARK : Unless you adjust the cluster profile, the&#xD;
               default maximum number of workers is the same as the&#xD;
               number of computational (physical) cores on the machine.&#xD;
%               REMARK : In modern computers the number of logical cores&#xD;
               is larger than the number of physical cores. By default,&#xD;
               MATLAB is not using all logical cores because, normally,&#xD;
               hyper-threading is enabled and some cores are reserved to&#xD;
               this feature.&#xD;
%               REMARK : It is because of Remarks 3 that we have chosen as&#xD;
               default value for numpool the number of physical cores&#xD;
               rather than the number of logical ones. The user can&#xD;
               increase the number of parallel pool workers allocated to&#xD;
               the multiple start monitoring by:&#xD;
               - setting the NumWorkers option in the local cluster profile&#xD;
                 settings to the number of logical cores (Remark 2). To do&#xD;
                 so go on the menu "Home|Parallel|Manage Cluster Profile"&#xD;
                 and set the desired "Number of workers to start on your&#xD;
                 local machine".&#xD;
               - setting numpool to the desired number of workers;&#xD;
               Therefore, *if a parallel pool is not already open*,&#xD;
               UserOption numpool (if set) overwrites the number of&#xD;
               workers set in the local/current profile. Similarly, the&#xD;
               number of workers in the local/current profile overwrites&#xD;
               default value of 'numpool' obtained as feature('numCores')&#xD;
               (i.e. the number of physical cores).&#xD;
</LongDesc>
         <Example> 'numpool',8&#xD;
               </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>cleanpool</Name>
         <ShortDesc>Scalar</ShortDesc>
         <TypeInd>Cleanpool is 1 if the parallel pool has to be cleaned after&#xD;
               the execution of the random starts</TypeInd>
         <LongDesc>Otherwise it is 0.&#xD;
               The default value of cleanpool is 1.&#xD;
               Clearly this option has an effect just if previous option&#xD;
               numpool is &amp;gt; 1.&#xD;
               </LongDesc>
         <Example> 'cleanpool',1&#xD;
               </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>msg</Name>
         <ShortDesc>Level of output to display</ShortDesc>
         <TypeInd>Scalar</TypeInd>
         <LongDesc>Scalar which controls whether to display or not messages&#xD;
               about random start progress. More precisely, if previous&#xD;
               option numpool&amp;gt;1, then a progress bar is displayed, on&#xD;
               the other hand a message will be displayed on the screen&#xD;
               when 10%, 25%, 50%, 75% and 90% of the random starts have&#xD;
               been accomplished&#xD;
                                REMARK: in order to create the progress bar when nparpool&amp;gt;1&#xD;
               the program writes on a temporary .txt file in the folder&#xD;
               where the user is working. Therefore it is necessary to&#xD;
               work in a folder where the user has write permission. If this&#xD;
               is not the case and the user (say) is working without write&#xD;
               permission in folder C:\Program Files\MATLAB the following&#xD;
               message will appear on the screen:&#xD;
                   Error using ProgressBar (line 57)&#xD;
                   Do you have write permissions for C:\Program Files\MATLAB?&#xD;
&#xD;
  </LongDesc>
         <Example> 'msg',0 &#xD;
                 </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
   </OptArgs>
   <OutArgs><!--OUTPUT ARGUMENT SECTION-->
      <Item>
         <Name>mmdrs</Name>
         <ShortDesc> Matrix</ShortDesc>
         <TypeInd>Minimum Mahalanobis distance.</TypeInd>
         <LongDesc>&#xD;
               (n-init)-by-(nsimul+1) matrix which contains the monitoring&#xD;
               of minimum Mahalanobis distance at each step of the forward&#xD;
               search for each random start.&#xD;
               1st col = fwd search index (from init to n-1);&#xD;
               2nd col = minimum Mahalanobis distance for random start 1;&#xD;
               ...;&#xD;
               nsimul+1 col = minimum deletion residual for random start nsimul.</LongDesc>
      </Item>
      <Item>
         <Name>BBrs</Name>
         <ShortDesc> 3D array</ShortDesc>
         <TypeInd>units belonging to the subset.</TypeInd>
         <LongDesc>&#xD;
               Units belonging to the subset&#xD;
               at the steps specified by input option bsbsteps.&#xD;
               If bsbsteps=0 BBrs has size n-by-(n-init+1)-by-nsimul.&#xD;
               In this case BBrs(:,:,j) with j=1, 2, ..., nsimul&#xD;
               has the following structure:&#xD;
               1-st row has number 1 in correspondence of the steps in&#xD;
                   which unit 1 is included inside subset and a missing&#xD;
                   value for the other steps;&#xD;
               ......&#xD;
               (n-1)-th row has number n-1 in correspondence of the steps&#xD;
                   in which unit n-1 is included inside subset and a&#xD;
                   missing value for the other steps;&#xD;
               n-th row has the number n in correspondence of the steps in&#xD;
                   which unit n is included inside subset and a missing&#xD;
                   value for the other steps.&#xD;
               If, on the other hand, bsbsteps is a vector which specifies&#xD;
               the steps of the search in which it is necessary to store&#xD;
               subset, BBrs has size n-by-length(bsbsteps)-by-nsimul.&#xD;
               In other words, BBrs(:,:,j) with j=1, 2, ..., nsimul has&#xD;
               the same structure as before, but now contains just&#xD;
               length(bsbsteps) columns.</LongDesc>
      </Item>
   </OutArgs>
   <MoreAbout><!--MORE ABOUT SECTION--></MoreAbout>
   <Acknowledgements><!--ACKNOWLEDGEMENTS SECTION--></Acknowledgements>
   <References><!--REFERENCES SECTION-->
      <Item>Atkinson A.C., Riani M., and Cerioli A. (2006). Random Start Forward&#xD;
   Searches with Envelopes for Detecting Clusters in Multivariate Data.&#xD;
   In: ZANI S., CERIOLI A., RIANI M., VICHI M. EDS. Data Analysis,&#xD;
   Classification and the Forward Search. (pp. 163-172). ISBN:&#xD;
   3-540-35977-x. BERLIN: Springer Verlag (GERMANY).</Item>
      <Item>Atkinson A.C., Riani M., (2007),Exploratory Tools for Clustering&#xD;
   Multivariate Data. COMPUTATIONAL STATISTICS &amp; DATA ANALYSIS. vol. 52,&#xD;
   pp. 272-285 ISSN: 0167-9473. doi:10.1016/j.csda.2006.12.034</Item>
      <Item>Riani M., Cerioli A., Atkinson A.C., Perrotta D., Torti F. (2008).&#xD;
   Fitting Mixtures of Regression Lines with the Forward Search. In:&#xD;
   Mining Massive Data Sets for Security F. Fogelman-Soulie et al. EDS.&#xD;
   (pp. 271-286). IOS Press, Amsterdam (The Netherlands).</Item>
   </References>
   <SeeAlso><!--SEE ALSO SECTION-->
      <Item>FSRmdr</Item>
      <Item>FSRmdrrs</Item>
      <Item>FSMmmd</Item>
   </SeeAlso>
   <Ex><!--EXAMPLES SECTION-->
      <Item>
         <Title>Two groups with approximately same units.</Title>
         <Desc>&#xD;
     We start with an example with simulated data with two groups&#xD;
     with roughly the same number of observations&#xD;</Desc>
         <MATLABcode>
    close all&#xD;
    rng('default')&#xD;
    rng(10);&#xD;
    n1=100;&#xD;
    n2=100;&#xD;
    v=3;&#xD;
    Y1=rand(n1,v);&#xD;
    Y2=rand(n2,v)+1;&#xD;
    Y=[Y1;Y2];&#xD;
    group=[ones(n1,1);2*ones(n2,1)];&#xD;
    spmplot(Y,group);&#xD;
    title('Two simulated groups')&#xD;
    Y=[Y1;Y2];&#xD;
    close all&#xD;
    % parfor of Parallel Computing Toolbox is used (if present in current computer)&#xD;
    % and pool is not cleaned after the execution of the random starts&#xD;
    % The number of workers which is used is the one specified&#xD;
    % in the local/current profile&#xD;
    [mmdrs,BBrs]=FSMmmdrs(Y,'nsimul',100,'init',10,'plots',1,'cleanpool',0);&#xD;
    disp('The two peaks in the trajectories of minimum Mahalanobis distance (mmd).')&#xD;
    disp('clearly show the presence of two groups.')&#xD;
    disp('The decrease after the peak in the trajectories of mmd is due to the masking effect.')&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>Two groups with approximately same units (larger sizes).</Title>
         <Desc>&#xD;
     Same example as before but now the values of n1 and n2 (size of the&#xD;
     two groups) have been increased.    &#xD;</Desc>
         <MATLABcode>
    close all&#xD;
    rng('default')&#xD;
    rng(10);&#xD;
    n1=200;&#xD;
    n2=170;&#xD;
    v=3;&#xD;
    Y1=rand(n1,v);&#xD;
    Y2=rand(n2,v)+1;&#xD;
    Y=[Y1;Y2];&#xD;
    group=[ones(n1,1);2*ones(n2,1)];&#xD;
    spmplot(Y,group);&#xD;
    title('Two simulated groups')&#xD;
    Y=[Y1;Y2];&#xD;
    close all&#xD;
    % parfor of Parallel Computing Toolbox is used (if present in current&#xD;
    % computer) and pool is not cleaned after&#xD;
    % the execution of the random starts&#xD;
    [mmdrs,BBrs]=FSMmmdrs(Y,'nsimul',100,'init',10,'plots',1,'cleanpool',0);&#xD;
    disp('The two peaks in the trajectories of minimum Mahalanobis distance (mmd).')&#xD;
    disp('clearly show the presence of two groups.')&#xD;
    disp('The decrease after the peak in the trajectories of mmd is due to the masking effect.')&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>Two groups (different sizes).</Title>
         <Desc>&#xD;
     Same example as before but now there is one group which has a size&#xD;
     much greater than the other (n1=60 and n2=150). In this case it is&#xD;
     possible to see that there is a trajectory of minimum Mahalanobis&#xD;
     residual which goes outside the envelope in steps 60-80. This&#xD;
     corresponds to the searches initialized using the units coming from&#xD;
     the smaller group. Note that due to the partial overlapping after the&#xD;
     peak in steps 80-100 there is a gradual decrease. When m is around&#xD;
     140, most of the units from this group tend to get out of the subset.&#xD;
     Therefore the value of mmd becomes much smaller than it should be.&#xD;
     Please note the dip around step m=140, which is due to entrance of the&#xD;
     units of the second larger group. This trajectory just after the dip&#xD;
     collapses into the trajectory which starts from the second group.&#xD;
     Please use&#xD;
     mdrrsplot with option databrush in order to explore the units&#xD;
     belonging to subset. Here we limit ourselves to notice that around m&#xD;
     =180 all the units from second group are included into subset (plus&#xD;
     some of group 1 given that the two groups partially overlap). Also&#xD;
     notice once again the decrease in the unique trajectory of minimum&#xD;
     Mahalanobis residual after m around 180 which is due to the entry of the&#xD;
     units of the first smaller group.&#xD;</Desc>
         <MATLABcode>
    close all&#xD;
    rng('default')&#xD;
    rng(10);&#xD;
    n1=60;&#xD;
    n2=150;&#xD;
    v=3;&#xD;
    Y1=randn(n1,v);&#xD;
    Y2=randn(n2,v)+3;&#xD;
    Y=[Y1;Y2];&#xD;
    group=[ones(n1,1);2*ones(n2,1)];&#xD;
    spmplot(Y,group);&#xD;
    title('Two simulated groups')&#xD;
    Y=[Y1;Y2];&#xD;
    figure&#xD;
    % parfor of Parallel Computing Toolbox is used (if present in current&#xD;
    % computer). Parallel pool is closed after the execution of the random starts&#xD;
    [mmdrs,BBrs]=FSMmmdrs(Y,'nsimul',100,'init',10,'plots',1);&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
   </Ex>
   <ExtraEx><!--EXTRA EXAMPLES SECTION-->
      <Item>
         <Title>Fishery example.</Title>
         <Desc>&#xD;
     Random start for fishery dataset: just store information about the&#xD;
     units forming subset for each random start at specified steps&#xD;</Desc>
         <MATLABcode>
    load('fishery.txt');&#xD;
    Y=fishery(:,1:2);&#xD;
    figure&#xD;
    [mmdrs,BBrs]=FSMmmdrs(Y,'nsimul',100,'init',10,'plots',1,'bsbsteps',[10 300 600]);&#xD;
    % sum(~isnan(BBrs(:,1,1)))&#xD;
    %&#xD;
    % ans =&#xD;
    %&#xD;
    %     10&#xD;
    %&#xD;
    % sum(~isnan(BBrs(:,2,1)))&#xD;
    %&#xD;
    % ans =&#xD;
    %&#xD;
    %    300&#xD;
    %&#xD;
    % sum(~isnan(BBrs(:,3,1)))&#xD;
    %&#xD;
    % ans =&#xD;
    %&#xD;
    %    600&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
   </ExtraEx>
</HelpXML>