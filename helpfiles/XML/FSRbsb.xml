<?xml version="1.0" encoding="utf-8"?>
<HelpXML>
   <Title><!--This is simply the filename-->FSRbsb</Title>
   <Purpose><!--This is the second line of the .m file-->FSRbsb returns the units belonging to the subset in each step of the forward search</Purpose>
   <Description><!--Description section--></Description>
   <InpArgs><!--REQUIRED INPUT ARGUMENT SECTION-->
      <Item>
         <Name>y</Name>
         <ShortDesc>Response variable</ShortDesc>
         <TypeInd>Vector</TypeInd>
         <LongDesc>A vector with n elements that contains&#xD;
               the response variable. y can be either a row or a column vector.</LongDesc>
         <Example> </Example>
         <DataType>single| double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>X</Name>
         <ShortDesc>Predictor variables</ShortDesc>
         <TypeInd>Matrix</TypeInd>
         <LongDesc>Matrix of explanatory variables (also called 'regressors')&#xD;
               of dimension n x (p-1) where p denotes the number of&#xD;
               explanatory variables including the intercept.&#xD;
               Rows of X represent observations, and columns represent&#xD;
               variables. By default, there is a constant term in the&#xD;
               model, unless you explicitly remove it using input option&#xD;
               intercept, so do not include a column of 1s in X. Missing&#xD;
               values (NaN's) and infinite values (Inf's) are allowed,&#xD;
               since observations (rows) with missing or infinite values&#xD;
               will automatically be excluded from the computations..</LongDesc>
         <Example> </Example>
         <DataType>single| double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>bsb</Name>
         <ShortDesc>list of units forming the initial subset</ShortDesc>
         <TypeInd>Vector | 0</TypeInd>
         <LongDesc>If&#xD;
               bsb=0 then the procedure starts with p units randomly&#xD;
               chosen else if bsb is not 0 the search will start with&#xD;
               m0=length(bsb)</LongDesc>
         <Example> </Example>
         <DataType>single| double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
   </InpArgs>
   <OptArgs><!--OPTIONAL (NAME/PAIRS) INPUT ARGUMENT SECTION-->
      <Item>
         <Name>init</Name>
         <ShortDesc>Search initialization</ShortDesc>
         <TypeInd>Scalar</TypeInd>
         <LongDesc>It specifies the initial subset size to start&#xD;
                   monitoring units forming subset&#xD;
                   </LongDesc>
         <Example> 'init',100 starts the search from step m=100&#xD;
                   </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>intercept</Name>
         <ShortDesc>Indicator for constant term</ShortDesc>
         <TypeInd>Scalar</TypeInd>
         <LongDesc>If 1, a model with constant term will be fitted (default),&#xD;
                  if 0, no constant term will be included.&#xD;
                  </LongDesc>
         <Example> 'intercept',1&#xD;
                  </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>nocheck</Name>
         <ShortDesc>Check input arguments</ShortDesc>
         <TypeInd>Scalar</TypeInd>
         <LongDesc>If nocheck is equal to 1 no check is performed on&#xD;
                  matrix y and matrix X. Notice that y and X are left&#xD;
                  unchanged. In other words the additioanl column of ones for&#xD;
                  the intercept is not added. As default nocheck=0.&#xD;
                  </LongDesc>
         <Example> 'nocheck',1&#xD;
                  </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>bsbsteps</Name>
         <ShortDesc>Save the units forming subsets in selected steps</ShortDesc>
         <TypeInd>Vector</TypeInd>
         <LongDesc>It specifies for which steps of the fwd search it is&#xD;
               necessary to save the units forming subset. If bsbsteps is&#xD;
               0 we store the units forming subset in all steps. The&#xD;
               default is store the units forming subset in all steps if&#xD;
               n&amp;lt;=5000, else to store the units forming subset at steps&#xD;
               init and steps which are multiple of 100. For example, as&#xD;
               default, if n=7530 and init=6, units forming subset are&#xD;
               stored for&#xD;
               m=init, 100, 200, ..., 7500.&#xD;
               </LongDesc>
         <Example> 'bsbsteps',[100 200] stores the unis forming&#xD;
               subset in steps 100 and 200.&#xD;
               </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>plots</Name>
         <ShortDesc>Plot on the screen</ShortDesc>
         <TypeInd>Scalar</TypeInd>
         <LongDesc>If plots=1 the monitoring units plot is displayed on the&#xD;
                 screen. The default value of plots is 0 (that is no plot&#xD;
                 is produced on the screen).&#xD;
                 </LongDesc>
         <Example> 'plots',1&#xD;
                 </Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
   </OptArgs>
   <OutArgs><!--OUTPUT ARGUMENT SECTION-->
      <Item>
         <Name>Un</Name>
         <ShortDesc> Matrix</ShortDesc>
         <TypeInd>Units included in each step.</TypeInd>
         <LongDesc>&#xD;
               (n-init) x 11 Matrix which contains the unit(s) included&#xD;
               in the subset at each step of the search.&#xD;
               REMARK: in every step the new subset is compared with the&#xD;
               old subset. Un contains the unit(s) present in the new&#xD;
               subset but not in the old one.&#xD;
               Un(1,2) for example contains the unit included in step&#xD;
               init+1.&#xD;
               Un(end,2) contains the units included in the final step&#xD;
               of the search.</LongDesc>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>BB</Name>
         <ShortDesc> Matrix</ShortDesc>
         <TypeInd>Units belonging to subset in each step or selected steps.</TypeInd>
         <LongDesc>&#xD;
               n-by-(n-init+1) or n-by-length(bsbsteps) matrix which&#xD;
               contains the units belonging to the subset at each step (or&#xD;
               in selected steps as specified by optional vector bsbsteps)&#xD;
               of the forward search.&#xD;
               More precisely:&#xD;
               BB(:,1) contains the units forming subset in step bsbsteps(1);&#xD;
               ....;&#xD;
               BB(:,end) contains the units forming subset in step  bsbsteps(end);&#xD;
               Row 1 of matrix BB is referred to unit 1;&#xD;
               ......;&#xD;
               Row n of matrix BB is referred to unit n;&#xD;
               Units not belonging to subset are denoted with NaN.</LongDesc>
         <Struct> </Struct>
      </Item>
   </OutArgs>
   <MoreAbout><!--MORE ABOUT SECTION--></MoreAbout>
   <Acknowledgements><!--ACKNOWLEDGEMENTS SECTION--></Acknowledgements>
   <References><!--REFERENCES SECTION-->
      <Item>Atkinson and Riani (2000), Robust Diagnostic Regression Analysis,&#xD;
   Springer Verlag, New York.</Item>
   </References>
   <SeeAlso><!--SEE ALSO SECTION-->
      <Item>FSRBbsb</Item>
      <Item>FSRHbsb</Item>
   </SeeAlso>
   <Ex><!--EXAMPLES SECTION-->
      <Item>
         <Title>FSRbsb with all default options.</Title>
         <Desc/>
         <MATLABcode>
    load('fishery');&#xD;
    y=fishery.data(:,1);&#xD;
    X=fishery.data(:,2);&#xD;
    [out]=LXS(y,X,'nsamp',10000);&#xD;
    Un = FSRbsb(y,X,out.bs);&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>FSRbsb with optional arguments.</Title>
         <Desc>&#xD;
     Monitoring units plot for fishery dataset&#xD;</Desc>
         <MATLABcode>
    load('fishery');&#xD;
    y=fishery.data(:,1);&#xD;
    X=fishery.data(:,2);&#xD;
    [out]=LXS(y,X,'nsamp',10000);&#xD;
    Un = FSRbsb(y,X,out.bs,'plots',1);&#xD;</MATLABcode>
         <Exec>1</Exec>
      </Item>
      <Item>
         <Title>Monitoring the units belonging to subset.</Title>
         <Desc/>
         <MATLABcode>
    state=1000;&#xD;
    randn('state', state);&#xD;
    n=100;&#xD;
    X=randn(n,3);&#xD;
    bet=[3;4;5];&#xD;
    y=3*randn(n,1)+X*bet;&#xD;
    y(1:20)=y(1:20)+15;&#xD;
    [outLMS]=LXS(y,X);&#xD;
    bsb=outLMS.bs;&#xD;
    % Store in matrix BB the units belonging to subset in each step of the forward search&#xD;
    [Un,BB] = FSRbsb(y,X,bsb);&#xD;
    % Create the 'monitoring units plot'&#xD;
    figure;&#xD;
    seqr=[Un(1,1)-1; Un(:,1)];&#xD;
    plot(seqr,BB','bx');&#xD;
    xlabel('Subset size m');&#xD;
    ylabel('Monitoring units plot');&#xD;
    % The plot, which monitors the units belonging to subset in each step of&#xD;
    % the forward search shows that apart from unit 11 which enters the&#xD;
    % search in step m=78 all the other contaminated units enter the search&#xD;
    % in the last 19 steps.&#xD;
&#xD;
    % if we consider the seed state=500, we obtain a plot showing that the&#xD;
    % 20 contaminated units enter the search in the final 20 steps.&#xD;
    state=500;&#xD;
    randn('state', state);&#xD;
    X=randn(n,3);&#xD;
    y=3*randn(n,1)+X*bet;&#xD;
    y(1:20)=y(1:20)+15;&#xD;
    [outLMS]=LXS(y,X);&#xD;
    bsb=outLMS.bs;&#xD;
    % Store in matrix BB the units belonging to subset in each step of the forward search&#xD;
    [Un,BB] = FSRbsb(y,X,bsb);&#xD;
    % Create the 'monitoring units plot'&#xD;
    figure;&#xD;
    seqr=[Un(1,1)-1; Un(:,1)];&#xD;
    plot(seqr,BB','bx');&#xD;
    xlabel('Subset size m');&#xD;
    ylabel('Monitoring units plot');&#xD;</MATLABcode>
         <Exec>1</Exec>
      </Item>
   </Ex>
   <ExtraEx><!--EXTRA EXAMPLES SECTION-->
      <Item>
         <Title>Example with monitoring from step 60.</Title>
         <Desc/>
         <MATLABcode>
    load('fishery');&#xD;
    y=fishery.data(:,1);&#xD;
    X=fishery.data(:,2);&#xD;
    [out]=LXS(y,X,'nsamp',10000);&#xD;
    Un = FSRbsb(y,X,out.bs,'init',60);&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>FSR using a regression model without intercept.</Title>
         <Desc/>
         <MATLABcode>
    load('fishery');&#xD;
    y=fishery.data(:,1);&#xD;
    X=fishery.data(:,2);&#xD;
    [out]=LXS(y,X);&#xD;
    bsb=out.bs;&#xD;
    [Un,BB] = FSRbsb(y,X,out.bs,'intercept','0');&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>FSR applied without doing any checks on y and X variables.</Title>
         <Desc/>
         <MATLABcode>
    load('fishery');&#xD;
    y=fishery.data(:,1);&#xD;
    X=fishery.data(:,2);&#xD;
    [out]=LXS(y,X,'nsamp',10000);&#xD;
    [Un,BB] = FSRbsb(y,X,out.bs,'nocheck','1');&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
   </ExtraEx>
</HelpXML>