<?xml version="1.0" encoding="utf-8"?>
<HelpXML>
   <Title><!--This is simply the filename-->tkmeans</Title>
   <Purpose><!--This is the second line of the .m file-->tkmeans computes trimmed k-means
</Purpose>
   <Description><!--Description section-->tkmeans(Y, k, alpha) partitions the points in the n-by-v data matrix Y into k clusters. This partition minimizes the trimmed sum, over all clusters, of the within-cluster sums of point-to-cluster-centroid distances. Rows of Y correspond to points, columns correspond to variables. tkmeans returns inside structure out an n-by-1 vector IDX containing the cluster indices of each point. By default, tkmeans uses (squared) Euclidean distances.
</Description>
   <InpArgs><!--REQUIRED INPUT ARGUMENT SECTION-->
      <Item>
         <Name>Y</Name>
         <ShortDesc>Input data.</ShortDesc>
         <TypeInd>Matrix.</TypeInd>
         <LongDesc>Data matrix containining n observations on v variables.
Rows of Y represent observations, and columns represent variables.
Missing values (NaN's) and infinite values (Inf's) are allowed, since observations (rows) with missing or infinite values will automatically be excluded from the computations.</LongDesc>
         <Example> </Example>
         <DataType>single| double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>k</Name>
         <ShortDesc>number of groups.</ShortDesc>
         <TypeInd>Scalar.</TypeInd>
         <LongDesc> </LongDesc>
         <Example> </Example>
         <DataType>single| double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>alpha</Name>
         <ShortDesc>global trimming level.</ShortDesc>
         <TypeInd>Scalar.</TypeInd>
         <LongDesc>alpha is a scalar between 0 and 0.5. If alpha=0 tkmeans reduces to kmeans</LongDesc>
         <Example> </Example>
         <DataType>single| double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
   </InpArgs>
   <OptArgs><!--OPTIONAL (NAME/PAIRS) INPUT ARGUMENT SECTION-->
      <Item>
         <Name>nsamp</Name>
         <ShortDesc>Number of subsamples which will be extracted to find the partition.</ShortDesc>
         <TypeInd>Integer.</TypeInd>
         <LongDesc>If nsamp=0 all subsets will be extracted.
They will be (n choose k).
% Remark: if the number of all possible subset is &amp;lt;300 the default is to extract all subsets, otherwise just 300</LongDesc>
         <Example>'nsamp',0</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>refsteps</Name>
         <ShortDesc>number of refining iterations in each subsample (default = 15).</ShortDesc>
         <TypeInd>Scalar.</TypeInd>
         <LongDesc> </LongDesc>
         <Example>'refsteps',20</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>reftol</Name>
         <ShortDesc>Default value of tolerance for the refining steps.</ShortDesc>
         <TypeInd>Scalar.</TypeInd>
         <LongDesc>The default value is 1e-14.</LongDesc>
         <Example>'reftol',0.0001</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>weights</Name>
         <ShortDesc>cluster weights.</ShortDesc>
         <TypeInd>Integer.</TypeInd>
         <LongDesc>A dummy scalar, specifying whether cluster weights (1) shall be considered in the concentration and assignment steps. If weights=1 in the assignment step to the squared Euclidean distance of unit i to group j log n_j is substracted. The default is no cluster weights.</LongDesc>
         <Example>'weights',1</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>plots</Name>
         <ShortDesc>plots generation.</ShortDesc>
         <TypeInd>Scalar or structure.</TypeInd>
         <LongDesc>If plots = 1, a plot with the classification is shown on the screen.</LongDesc>
         <Example>'plots',1</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>msg</Name>
         <ShortDesc>scalar which controls whether to display or not messages on the screen.</ShortDesc>
         <TypeInd>Scalar.</TypeInd>
         <LongDesc>If msg==1 (default) messages are displayed on the screen about estimated time to compute the estimator else no message is displayed on the screen.</LongDesc>
         <Example>'msg',1</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>nocheck</Name>
         <ShortDesc>If nocheck is equal to 1 no check is performed on matrix Y.</ShortDesc>
         <TypeInd>Scalar.</TypeInd>
         <LongDesc>As default nocheck=0.</LongDesc>
         <Example>'nocheck',1</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>nomes</Name>
         <ShortDesc>estimated time.</ShortDesc>
         <TypeInd>Scalar.</TypeInd>
         <LongDesc>If nomes is equal to 1 no message about estimated time to compute tkemans is displayed, else if nomes is equal to 0 (default), a message about estimated time is displayed.</LongDesc>
         <Example>'nomes',1</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>Ysave</Name>
         <ShortDesc>saving Y.</ShortDesc>
         <TypeInd>Scalar.</TypeInd>
         <LongDesc>Scalar that is set to 1 to request that the input matrix Y is saved into the output structure out. Default is 0, i.e.
no saving is done.</LongDesc>
         <Example>'Ysave',1</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
   </OptArgs>
   <OutArgs><!--OUTPUT ARGUMENT SECTION-->
      <Item>
         <Name>out</Name>
         <ShortDesc> </ShortDesc>
         <TypeInd> </TypeInd>
         <LongDesc> </LongDesc>
         <Structure>
            <ItemCell>
               <Value>weights</Value>
               <Description>(1/k, ...., 1/k) else if input option weights &amp;lt;&amp;gt; 1 out.weights=(n1/n, ..., nk/n) out.h : scalar. Number of observations that have determined the centroids (number of untrimmed units).
out.obj : scalar. Value of the objective function which is minimized (value of the best returned solution).
out.Y : original data matrix Y. The field is present if option Ysave is set to 1.</Description>
            </ItemCell>
         </Structure>
      </Item>
      <Item>
         <Name>varargout</Name>
         <ShortDesc>Cell</ShortDesc>
         <TypeInd>C : subsamples extracted.</TypeInd>
         <LongDesc>.</LongDesc>
         <Structure> </Structure>
      </Item>
   </OutArgs>
   <MoreAbout><!--MORE ABOUT SECTION--></MoreAbout>
   <Acknowledgements><!--ACKNOWLEDGEMENTS SECTION--></Acknowledgements>
   <References><!--REFERENCES SECTION-->
      <Item>(2008), "A General Trimming Approach to Robust Cluster Analysis". Annals of Statistics, Vol.36, 1324-1345. Technical Report available at www.eio.uva.es/inves/grupos/representaciones/trTCLUST.pdf</Item>
   </References>
   <SeeAlso><!--SEE ALSO SECTION-->
      <Item>kmeans</Item>
      <Item>tclust</Item>
   </SeeAlso>
   <Ex><!--EXAMPLES SECTION-->
      <Item>
         <Title>Trimmed k-means using geyser data (1).</Title>
         <Desc>
            <ItemCell>3 groups and trimming level of 3%</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>Y=load('geyser2.txt');</ItemCell>
            <ItemCell>out=tkmeans(Y,3,0.03,'plots',1)</ItemCell>
         </MATLABcode>
         <Exec>1</Exec>
      </Item>
      <Item>
         <Title>Trimmed k-means using geyser data (2).</Title>
         <Desc>
            <ItemCell>option weights =1</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>Y=load('geyser2.txt');</ItemCell>
            <ItemCell>out=tkmeans(Y,3,0.03,'plots',1,'weights',1)</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>Trimmed k-means using M5data.</Title>
         <Desc>
            <ItemCell>Weights =1</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>Y=load('M5data.txt');</ItemCell>
            <ItemCell>out=tkmeans(Y(:,1:2),3,0,'plots',1)</ItemCell>
            <ItemCell>out=tkmeans(Y(:,1:2),5,0.1,'plots',1)</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
   </Ex>
   <ExtraEx><!--EXTRA EXAMPLES SECTION-->
      <Item>
         <Title>Trimmed k-means using structured noise.</Title>
         <Desc>
            <ItemCell>The data have been generated using the following R instructions set.seed (0) v &amp;lt;- runif (100, -2 * pi, 2 * pi) noise &amp;lt;- cbind (100 + 25 * sin (v), 10 + 5 * v) x &amp;lt;- rbind ( rmvnorm (360, c (0.0, 0), matrix (c (1, 0, 0, 1), ncol = 2)), rmvnorm (540, c (5.0, 10), matrix (c (6, -2, -2, 6), ncol = 2)), noise)</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>Y=load('structurednoise.txt');</ItemCell>
            <ItemCell>out=tkmeans(Y(:,1:2),2,0.1,'plots',1)</ItemCell>
            <ItemCell>out=tkmeans(Y(:,1:2),5,0.15,'plots',1)</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>Trimmed k-means using mixture100 data.</Title>
         <Desc>
            <ItemCell>The data have been generated using the following R instructions set.seed (100) mixt &amp;lt;- rbind (rmvnorm (360, c ( 0, 0), matrix (c (1, 0, 0, 1), ncol = 2)), rmvnorm (540, c ( 5, 10), matrix (c (6, -2, -2, 6), ncol = 2)), rmvnorm (100, c (2.5, 5), matrix (c (50, 0, 0, 50), ncol = 2)))</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>Y=load('mixture100.txt');</ItemCell>
            <ItemCell>out=tkmeans(Y(:,1:2),3,0,'plots',1)</ItemCell>
            <ItemCell>out=tkmeans(Y(:,1:2),2,0.05,'plots',1)</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
   </ExtraEx>
</HelpXML>