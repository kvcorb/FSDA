<?xml version="1.0" encoding="utf-8"?>
<HelpXML>
   <Title><!--This is simply the filename-->publishFS</Title>
   <Purpose><!--This is the second line of the .m file-->Enables to create automatic HELP FILES from structured .m function files</Purpose>
   <Description><!--Description section-->publishFS creates HTML files from structured .m file. To understand the&#xD;
   characteristics the .m file must have, please see the "More About" section</Description>
   <InpArgs><!--REQUIRED INPUT ARGUMENT SECTION-->
      <Item>
         <Name>file</Name>
         <ShortDesc>MATLAB File</ShortDesc>
         <TypeInd>String</TypeInd>
         <LongDesc>Full or partial&#xD;
                  path of the MATLAB file for which Structured Matlab&#xD;
                  HTML help has to be created&#xD;
                  Example-'myfile.m'</LongDesc>
         <Example> </Example>
         <DataType>single| double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
   </InpArgs>
   <OptArgs><!--OPTIONAL (NAME/PAIRS) INPUT ARGUMENT SECTION-->
      <Item>
         <Name>Display</Name>
         <ShortDesc>Level of display</ShortDesc>
         <TypeInd>String</TypeInd>
         <LongDesc>'off' or 'none' displays no output.&#xD;
             'iter' displays a series of messages on the screen about&#xD;
             the execution of the different section of the input .m file&#xD;
             'iter-detailed' displays a series of messages on the screen not only about&#xD;
             the execution of the different section of the input .m file,&#xD;
             but also about cells containing information about the required input arguments,&#xD;
             optional input arguments, and output arguments&#xD;
             </LongDesc>
         <Example> 'Display','none'&#xD;
             </Example>
         <DataType>string</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>outputDir</Name>
         <ShortDesc>Output folder</ShortDesc>
         <TypeInd>String</TypeInd>
         <LongDesc>Output folder to which the HTML document is saved, specified&#xD;
             as the comma-separated pair consisting of 'outputDir' and the&#xD;
             full path. You must specify the full path as a string, for&#xD;
             example 'C:\PublishedOutput'.&#xD;
             The default value, '', specifies the (FSDA root)\helpfiles\FSDA&#xD;
             path.&#xD;
             Remark - outputDir must be a valid path.&#xD;
             </LongDesc>
         <Example> 'outputDir','C:'&#xD;
             </Example>
         <DataType>string</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>imagesDir</Name>
         <ShortDesc>Output folder of png images</ShortDesc>
         <TypeInd>String</TypeInd>
         <LongDesc>Output folder to which the images attached to the HTML&#xD;
             document are saved, specified as the comma-separated pair&#xD;
             consisting of 'outputDir' and the full path. You must specify&#xD;
             the full path as a string, for example&#xD;
             'C:\PublishedOutput'.&#xD;
             The default value, '', specifies the&#xD;
             "(FSDA root)\helpfiles\FSDA\images" path.&#xD;
             Remark - if imageDir is not specified but outputDir is&#xD;
             specified images will be save into the same folder of the&#xD;
             HTML output file&#xD;
             Remark - imagesDir must be a valid path.&#xD;
             </LongDesc>
         <Example> 'imagesDir','C:'&#xD;
             </Example>
         <DataType>string</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>evalCode</Name>
         <ShortDesc>Option to run code</ShortDesc>
         <TypeInd>Logical</TypeInd>
         <LongDesc>Option to evaluate code of the&#xD;
             examples in the input .m files enclosed in tags "%{" "%}" whose&#xD;
             first line starts with symbols "%%".&#xD;
             If evalcode is true the code associated with the examples&#xD;
             which start with symbols '%%' will be run and the output will&#xD;
             be automatically included into the HTML output file. The&#xD;
             images will be save in subfolder images_help of the&#xD;
             outputDir. The default value of evalCode is true.&#xD;
             </LongDesc>
         <Example> 'evalCode','false'&#xD;
             </Example>
         <DataType>Boolean</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>write2file</Name>
         <ShortDesc>Option to write HTML file</ShortDesc>
         <TypeInd>Logical</TypeInd>
         <LongDesc>Option which specifies&#xD;
             whether HTML file must be created or if just structure out&#xD;
             must be created. The default value of write2file is true,&#xD;
             that is html file is created&#xD;
             </LongDesc>
         <Example> 'write2file','false'&#xD;
             </Example>
         <DataType>Boolean</DataType>
         <Struct> </Struct>
      </Item>
   </OptArgs>
   <OutArgs><!--OUTPUT ARGUMENT SECTION-->
      <Item>
         <Name>out</Name>
         <ShortDesc> </ShortDesc>
         <TypeInd> </TypeInd>
         <LongDesc>
            <ItemCell>
               <Value>title</Value>
               <Description>title of HTML file. String.&#xD;
                   String to be included in HTML tag title</Description>
            </ItemCell>
            <ItemCell>
               <Value>purpose</Value>
               <Description>purpose of the routine. String.&#xD;
                 String forming second row of output HTML file&#xD;
                 String forming second row of output HTML file</Description>
            </ItemCell>
            <ItemCell>
               <Value>description</Value>
               <Description>short description of the file. String&#xD;
                 If this field is not empty it is included in the HTML file&#xD;
                 at the beginning of the section "Description"</Description>
            </ItemCell>
            <ItemCell>
               <Value>InpArgs</Value>
               <Description>Required and Optional input arguments. Cell.&#xD;
                 Cell of size k-by-7 containing information about required&#xD;
                 and optional input argument.&#xD;
                 1st column = name&#xD;
                 2nd column = short description&#xD;
                 3rd column = type indication (Scalar, matrix, ...)&#xD;
                 4th column = string containing long description. If the&#xD;
                 input argument is a struct, columns 2 and 3 will be empty and all&#xD;
                 information about the fields of the structure will be&#xD;
                 included in the 4th column.&#xD;
                 5th column = example (if present)&#xD;
                 6th column = Data type&#xD;
                 7th column = string contaning '1' if the argument is&#xD;
                 required and '0' if it is optional&#xD;
                 8th column = this column is empty unless 3rd column&#xD;
                 contains the word structure. If this is the case the 8th&#xD;
                 column will contain a cell with two columns containing&#xD;
                 the Values/Description of the associated structure.</Description>
            </ItemCell>
            <ItemCell>
               <Value>OptArgs</Value>
               <Description>Optional input arguments specified as name/values pairs. Cell.&#xD;
                 Cell of size r-by-7 containing information about&#xD;
                 and optional input argument specified as name/values pairs.&#xD;
                 1st column = name.&#xD;
                 2nd column = short description.&#xD;
                 3rd column = type indication (Scalar, matrix, ...).&#xD;
                 4th column = string containing long description. If the&#xD;
                 optional input argument is a struct, columns 2 and 3 will be empty and all&#xD;
                 information about the fields of the structure will be&#xD;
                 included in the 4th column.&#xD;
                 5th column = example (if present).&#xD;
                 6th column = Data type (ex. Single |Double).&#xD;
                 7th column = this column is empty unless 3rd column&#xD;
                 contains the word structure. If this is the case the 7th&#xD;
                 column will contain a cell with two columns containing&#xD;
                 the Values/Description of the associated structure.</Description>
            </ItemCell>
            <ItemCell>
               <Value>OutArgs</Value>
               <Description>Required and Optional input arguments. Cell.&#xD;
                 Cell of size k-by-7 containing information about required&#xD;
                 and optional input argument.&#xD;
                 1st column = name.&#xD;
                 2nd column = short description.&#xD;
                 3rd column = type indication (Scalar, matrix, ...).&#xD;
                 4th column = string containing long description. If an&#xD;
                 output argument is a struct, columns 2 and 3 will be&#xD;
                 empty and all information about the fields of the&#xD;
                 structure will be included in the 4th column.</Description>
            </ItemCell>
            <ItemCell>
               <Value>MoreAbout</Value>
               <Description>More About. String. String containing what in the HTML&#xD;
                 file will appear under the section "More About".</Description>
            </ItemCell>
            <ItemCell>
               <Value>Acknowledgements</Value>
               <Description>Acknowledgements. String. String containing what in the HTML&#xD;
                 file will appear under the section "Acknowledgements".</Description>
            </ItemCell>
            <ItemCell>
               <Value>References</Value>
               <Description>References. cell. Cell of length r containing the r&#xD;
                 references.</Description>
            </ItemCell>
            <ItemCell>
               <Value>SeeAlso</Value>
               <Description>References. cell. Cell of length s containing the s&#xD;
                 references to linked files.</Description>
            </ItemCell>
            <ItemCell>
               <Value>Ex</Value>
               <Description>Examples. cell. Cell of length t containing the t&#xD;
                 examples.&#xD;
                 First column= title of the example;&#xD;
                 Second column = detailed description;&#xD;
                 Third column = MATLAB code;&#xD;
                 Fourth column = dummy variable which indicates whether&#xD;
                 the example must be executed or not) If 1 example is executed</Description>
            </ItemCell>
            <ItemCell>
               <Value>ExtraEx</Value>
               <Description>Extra Examples. cell. Cell of length u containing the u&#xD;
                 extra examples.&#xD;
                 First column= title of the example;&#xD;
                 Second column = detailed description;&#xD;
                 Third column = MATLAB code;&#xD;
                 Fourth column = dummy variable which indicates whether&#xD;
                 the example must be executed or not) If 1 example is executed</Description>
            </ItemCell>
            <ItemCell>
               <Value>laste</Value>
               <Description>object of class MException which provides information&#xD;
                 about last error in executing the examples. If all&#xD;
                 examples run without errors laste is an empty value;</Description>
            </ItemCell>
            <ItemCell>
               <Value>InpArgsMisMatch</Value>
               <Description>cell of size k-by-3 which in presence of name/pairs&#xD;
                 optional arguments enables to understand which are the&#xD;
                 optional arguments which are described but are not used&#xD;
                 inside the file and vice versa. More precisely, the first&#xD;
                 column contains the list of the options for which there&#xD;
                 is a mismatch. The second column contains 1 if the option&#xD;
                 was described. The third column contains 1 if the option&#xD;
                 was effectively used. Of course, the sum of columns two&#xD;
                 and three is always 1.&#xD;
                 For example if InpArgsMisMatch is equal to&#xD;
                         []    'Options described'    'Options used'&#xD;
                 'nomes'       [                0]    [           1]&#xD;
                 'refsteps'    [                0]    [           1]&#xD;
                 'reftol'      [                0]    [           1]&#xD;
                 it means that options 'nomes', 'refstesps' and 'reftol'&#xD;
                 have not been described, but are used inside the .m file</Description>
            </ItemCell>
            <ItemCell>
               <Value>OutArgsStructMisMatch</Value>
               <Description>cell of size r-by-3 which in presence of output&#xD;
                 arguments which are structures enables to highlight&#xD;
                 the fields of the structures which are described but&#xD;
                 are not used inside the file and vice versa. More precisely,&#xD;
                 the first column contains the list of the fields for&#xD;
                 which there is a mismatch. The second column contains 1 if&#xD;
                 the field was described. The third column contains 1 is&#xD;
                 the field was effectively used. Of course the sum of&#xD;
                 columns two and three is always 1. For example if&#xD;
                 OutArgsStructMisMatch is&#xD;
                   []    'Fields described'    'Fields used'&#xD;
                   'out'                    []               []&#xD;
                   'Y'      [               1]    [          0]&#xD;
                it means that field Y of output structure out has been&#xD;
                described but has not been produced by the output of the&#xD;
                .m file&#xD;
                 It is important to remark that this output is&#xD;
                 present only if option evalCode is 1 because publishFS&#xD;
                 takes the output of the examples which are run to check&#xD;
                 if the output structure contains all fields&#xD;
                 which are described. If the output of the function is&#xD;
                 called out, then publishFS tries to find if the examples&#xD;
                 which were run have produced a structure which contains&#xD;
                 the name out. Therefore, if an example produced a&#xD;
                 structure named outMM or Myout then publishFS checks the&#xD;
                 fields present in outMM or Myout to detect eventual&#xD;
                 mismatches.</Description>
            </ItemCell>
         </LongDesc>
      </Item>
   </OutArgs>
   <MoreAbout><!--MORE ABOUT SECTION-->
         The .m file (which must be located on the MATLAB path or on the currect&#xD;
         folder) must satisfy the following characteristics to be correctly&#xD;
         processed.&#xD;
&#xD;
         [1] The row below the row which starts with 'function ....' must contain the&#xD;
         description of the purpose of the .m file.&#xD;
         Remark: generally the row which starts with 'function ....' is the first&#xD;
         row of an .m file.&#xD;
         [2] String 'Required input arguments:' must be present. The lines below&#xD;
         this string must contain the description of the compulsory input&#xD;
         arguments. Each argument must have the name (a series of spaces from 0&#xD;
         to 10) symbol ':' and then the description. The format of the description&#xD;
         is as follows:&#xD;
         The first sentence after symbol ':' is the title of the input argument&#xD;
         and in the HTML file it will appear in bold face in the same line of the&#xD;
         input argument (this is the short description of the required input&#xD;
         argument).&#xD;
         The second sentence after symbol ':' describes the objects&#xD;
         (for example, scalar, vector, 3D array) and in the HTML file will appear&#xD;
         in the second row.&#xD;
         These first two rows will always be visible.&#xD;
         What starts with the third sentence after symbol ':' is the detailed&#xD;
         description of that particular input argument and in the HTML file it&#xD;
         will be visible just if the user clicks on any point in the first two&#xD;
         lines or the user clicks on the option expand all.&#xD;
         The last line may start with the words "Data Types:" and contains the&#xD;
         specification of a particular input argument (e.g. Data Types: single |&#xD;
         double). For example, suppose that the .m routine which has to be&#xD;
         processed has two required input arguments which are respectively called&#xD;
         y and X, then the accepted format is as follows.&#xD;
&#xD;
                       Required input arguments:&#xD;
&#xD;
                        y:         Response variable. Vector. Response variable,&#xD;
                                   specified as a vector of length n, where n is&#xD;
                                   the number of observations. Each entry in y is&#xD;
                                   the response for the corresponding row of X.&#xD;
                                   Data Types: single | double.&#xD;
                      X :          Predictor variables. Matrix of explanatory&#xD;
                                   variables (also called 'regressors') of&#xD;
                                   dimension n x (p-1) where p denotes the number&#xD;
                                   of explanatory variables including the&#xD;
                                   intercept. Rows of X represent observations,&#xD;
                                   and columns represent variables. By default,&#xD;
                                   there is a constant term in the model, unless&#xD;
                                   you explicitly remove it using input option&#xD;
                                   intercept, so do not include a column of 1s in&#xD;
                                   X.&#xD;
                                   Data Types: single | double.&#xD;
&#xD;
         IMPORTANT NOTICE: if an input argument is a structure (publishFS&#xD;
         automatically checks if the input argument contains the word "structure"&#xD;
         then the fields of the structure will be automatically included into a&#xD;
         HTML table). In this case the fields of the structure are identified as&#xD;
         the lines which contain "a series of spaces" "a_word" "a series&#xD;
         of spaces followed by symbol '='". For example suppose the an input&#xD;
         option is called bayes and object bayes is a structure with field names&#xD;
         beta0, R, tau0 and n0, the accepted format is as follows.&#xD;
&#xD;
            bayes      : prior information. Structure.&#xD;
                               It contains the following fields.&#xD;
                   out.beta0=  p-times-1 vector containing prior mean of \beta.&#xD;
                   out.R    =  p-times-p positive definite matrix which can be&#xD;
                               interpreted as X0'X0 where X0 is a n0 x p matrix&#xD;
                               coming from previous experiments (assuming that the&#xD;
                               intercept is included in the model.&#xD;
                     out.tau0 = scalar. Prior estimate of tau.&#xD;
                     out.n0   = scalar. Sometimes it helps to think of the prior&#xD;
                              information as coming from n0 previous experiments.&#xD;
&#xD;
&#xD;
&#xD;
         [3] If the input .m file between the row which starts with&#xD;
          &amp;lt;a href="matlab: docsearchFS(.....&#xD;
          and the row with the string&#xD;
          "Required input arguments:"&#xD;
          contains a series of sentences, they will be automatically included in&#xD;
          the HTML output just below the description.&#xD;
&#xD;
          An example is given below:&#xD;
                 'function [out , varargout]  = tclust(Y,k,alpha,restrfactor,varargin);&#xD;
                 tclust computes trimmed clustering with restricitons on&#xD;
                 the eigenvalues.&#xD;
&#xD;
                 &amp;lt;a href="matlab: docsearchFS('tclust')"&amp;gt;Link to the help function&amp;lt;/a&amp;gt;;&#xD;
&#xD;
                   tclust partitions the points in the n-by-v data matrix Y into k&#xD;
                   clusters.  This partition minimizes the trimmed sum, over all&#xD;
                   clusters, of the within-cluster sums of&#xD;
                   point-to-cluster-centroid distances....&#xD;
&#xD;
                  Required input arguments:'.&#xD;
&#xD;
         [4] String 'Optional input arguments:' must be present even if there are&#xD;
         no optional arguments.&#xD;
         publishFS, in order to understand what are the names of the optional&#xD;
         input arguments scans the rows below the string "Optional input&#xD;
         arguments:" and identifies the lines which contain the optional arguments&#xD;
         as those which contain "a series of spaces" "a_word" "a series of spaces&#xD;
         followed by symbol ':'".&#xD;
         The first sentence after symbol ':' is the title of the optional input&#xD;
         argument and in the HTML file it will appear in the same row of the name&#xD;
         of the optional input argument (this is the short description of the&#xD;
         optional input argument).&#xD;
         The second sentence after symbol ':' describes the objects (for example,&#xD;
         scalar, vector, 3D array) and in the HTML file will appear in the second&#xD;
         row. These first two rows will always be visible.&#xD;
         What starts with the third sentence after symbol ':' is the detailed&#xD;
         description of that particular optional input argument and in the HTML&#xD;
         file it will be visible just if the user clicks on any point in the first&#xD;
         two lines or the user clicks on the option expand all.&#xD;
         The last two lines of each optional input argument MUST start with the&#xD;
         words 'Example -' and 'Data Types -' followed by a string without spaces&#xD;
         which specifies a possible use of the option and the type of data. For&#xD;
         example, suppose that the first two optional arguments are called&#xD;
         respecively 'intercept' and 'h', then the&#xD;
         accepted format is as follows:&#xD;
&#xD;
&#xD;
                       Optional input arguments:&#xD;
&#xD;
                       intercept :  Indicator for constant term. Scalar.&#xD;
                                   If 1, a model with constant term will be fitted&#xD;
                                   (default),&#xD;
                                   if 0, no constant term will be included.&#xD;
                                   Example - 'intercept',1.&#xD;
                                   Data Types - double.&#xD;
                               h : The number of observations that have determined the least&#xD;
                                     trimmed squares estimator. Scalar.&#xD;
                                     Example - 'h',round(n*0,75).&#xD;
                                     Data Types - double.&#xD;
&#xD;
&#xD;
&#xD;
&#xD;
          IMPORTANT NOTICE: given that options are identified as those which have&#xD;
          symbol "%" followed by "a series of spaces" then "a word" then "a series&#xD;
          of spaces" then symbol ":", each line inside the description does not&#xD;
          have to start as follows "%   ANYWORD   :" because the parser will&#xD;
          wrongly identify "ANYWORD" as an additional optional input argument. The&#xD;
          only once exception to this rule is the word "%  REMARK :". However, if&#xD;
          there is a remark, it must be put at the very end of the description of&#xD;
          the optional input argument. At the very end means after the rows&#xD;
           Example and Data Types.&#xD;
&#xD;
         [5] String 'Output:' must be present.&#xD;
         The lines after string 'Output:'&#xD;
         must contain the list of the output arguments using the same rules&#xD;
         described above for the optional arguments. In this case, however, the&#xD;
         identification of the ouptut arguments is easier because they are&#xD;
         extracted directly from the first line of the file (e.g. if the first&#xD;
         line is as follows&#xD;
         function [mdr,Un,BB,Bols,S2] = FSRmdr(y,X,bsb,varargin) then the 5&#xD;
         output arguments are immediately known to the parser).&#xD;
         In the case of output argument publishFS checks if the first 50&#xD;
         characters contain the words "which contains" or "containing" e.g.:&#xD;
&#xD;
                      mdr:         n -init x 2&#xD;
                                   matrix containing the&#xD;
                                   monitoring of minimum deletion residual.&#xD;
                                   1st col = fwd search&#xD;
                                   ........&#xD;
                        Un:        (n-init) x 11 Matrix&#xD;
                                   which contains the unit(s) included in the&#xD;
                                   subset at each step of the search.&#xD;
                                   ...........&#xD;
&#xD;
         In this case what is after the strings "which contains" or "containing"&#xD;
         will appear in bold face as the title of the output argument. What is&#xD;
         before the strings "which contains" or "containing" will appear in the&#xD;
         second row.&#xD;
&#xD;
         For example, the above lines will be processed as follows:&#xD;
&#xD;
              mdr   -  Monitoring of minimum deletion residual;&#xD;
              n -init x 2 matrix.&#xD;
&#xD;
              Un    - unit(s) included in the subset at each step of the search.&#xD;
              (n-init) x 11 Matrix which contains the unit(s) included in the&#xD;
              subset at each step of the search.&#xD;
&#xD;
         If in the HTML file the user clicks on them the expdanded description&#xD;
         (that is what starts after the second full stop will appear).&#xD;
&#xD;
         Alternatively, if the first 50 characters of each output argument do not&#xD;
         contain the strings "which contains" or "containing" the following&#xD;
         convention is used. The first sentence after symbol ":" is assumed&#xD;
         to be the title of the output argument and in the HTML file it will&#xD;
         appear in bold face in the same line of the name of output&#xD;
         argument. The second sentence (words between first and second full stop)&#xD;
         will appear in the second row. The third sentence is the full description&#xD;
         of the output argument. For example, suppose that the output of a&#xD;
         procedure contains the objects mdr and Un, the accepted format&#xD;
         is as follows.&#xD;
               Output:&#xD;
&#xD;
                      mdr:         Minimum deletion residual. Matrix.  n -init x 2&#xD;
                                   matrix which contains the&#xD;
                                   monitoring of minimum deletion residual.&#xD;
                                   1st col = ...&#xD;
                      Un:          Units included. Matrix. (n-init) x 11 Matrix&#xD;
                                   which contains the unit(s) included in the&#xD;
                                   subset at each step of the search.&#xD;
                                   REMARK: in every step ....&#xD;
&#xD;
         The above lines will be processed as follows:&#xD;
&#xD;
              mdr   -  Minimum deletion residual. Matrix.&#xD;
                       n -init x 2 matrix which contains the&#xD;
                       monitoring of minimum deletion residual.&#xD;
                       1st col = ...&#xD;
&#xD;
              Un    - Units included. Matrix.&#xD;
                       (n-init) x 11 Matrix which contains the unit(s)&#xD;
                       included in the subset at each step of the search.&#xD;
                       REMARK: in every step ....&#xD;
&#xD;
         If in the HTML file the user clicks on them the expdanded description&#xD;
         (that is what starts after the second full stop will appear).&#xD;
&#xD;
         IMPORTANT NOTICE: Similarly to what happend for each input argument, if&#xD;
         an output argument is a structure, publishFS automatically checks if it&#xD;
         contains the words "structure" and "field". In this case, the fields of&#xD;
         the structure will be automatically included into a HTML table. The&#xD;
         fields of the structure are identified as the lines which contain "a&#xD;
         series of spaces" "name_of_output_structure.a_word" "a series of spaces&#xD;
         followed by symbol '='". For example suppose that the output of a&#xD;
         procedure is an object called out which is a structure with two fields&#xD;
         out.rew and out.beta, an accepted format is as follows:&#xD;
&#xD;
                                    Output:&#xD;
&#xD;
                                  out :     A structure containing the following fields:&#xD;
                                            out.rew  = Scalar if out.rew=1 all&#xD;
                                                       subsequent output refers to&#xD;
                                                       reweighted else no&#xD;
                                                       reweighting is done.&#xD;
                                            out.beta = Vector of beta LTS (LMS)&#xD;
                                                       coefficient estimates,&#xD;
                                                       including the intercept&#xD;
                                                       when options.intercept=1.&#xD;
                                                       out.beta=[intercept&#xD;
                                                       slopes].&#xD;
&#xD;
&#xD;
         PLEASE REMEMBER THAT THE FIELDS of an output instance HAVE TO CONTAIN THE&#xD;
         "=" SIGN AND NOT THE ":" SIGN.&#xD;
&#xD;
         REMARK: If there is the string REMARK after the description of the last&#xD;
         field of the structure, all the words after REMARK are put outside and&#xD;
         below the HTML table.&#xD;
&#xD;
         If the description of a particular output has the string "which contains"&#xD;
         or "containing",  as follows&#xD;
&#xD;
                      mdr:          n -init x 2 matrix which contains the&#xD;
                                   monitoring of minimum deletion residual at each&#xD;
                                   step of the forward search.&#xD;
                                   1st col = fwd search index (from init to n-1).&#xD;
                                   2nd col = minimum deletion residual.&#xD;
&#xD;
         publishFS will try to put what comes before the string "which&#xD;
         contains" or "containing" inside the subtitle (second row) of the each&#xD;
         ouptut argument in the HTML file. For example, the example above in the&#xD;
         HTML file will be processed as follows:&#xD;
                        mdr -Monitoring of minimum deletion residual at each step of the forward search.&#xD;
                        n -init -by- 2 matrix.&#xD;
         If, in the HTML file, the user clicks on the first line:&#xD;
                       "mdr -Monitoring...";&#xD;
         the expanded description will automatically appear.&#xD;
&#xD;
         [6] A line which starts with string "See also:" must be present.&#xD;
         Linked m files must be separated by symbol ",". For example, suppose that&#xD;
         files FSRBmdr.m and FSR.m have connections with the current file, then an&#xD;
         accepted format is         See also: FSRBmdr.m, FSR.m.&#xD;
&#xD;
         [7] A line which starts with string "References:" must be present.&#xD;
         The year of each reference must be enclosed in round parenthesis.&#xD;
         PublishFS decides that a new reference starts if a new line contains&#xD;
         symbol "(" + "a sequence of 4 or 5 characthers identifying the year&#xD;
         because the reference can be for example 2003 or 2003a" + symbol ")"&#xD;
         For example, an acceptable format for the two references below is:&#xD;
&#xD;
&#xD;
                         Chaloner and Brant (1988). A Bayesian Approach to Outlier&#xD;
                         Detection and Residual Analysis, Biometrika, Vol 75&#xD;
                         pp. 651-659.&#xD;
                         Riani M., Corbellini A., Atkinson A.C. (2015), Very&#xD;
                         Robust Bayesian Regression for Fraud Detection,&#xD;
                         submitted.&#xD;
&#xD;
         [8] All the examples associated with the file which has to be processed&#xD;
         must be enclosed inside Percent-braces (comments blocks, i.e.&#xD;
         symbols "%{" and "%}" ).&#xD;
         The first sentence identifies the title of the comment which&#xD;
         will appear in the HTML file.&#xD;
         IMPORTANT NOTICE: if the comment has to be executed, the first line&#xD;
         associated with the title must start with two "%%" symbols instead of just&#xD;
         one "%" symbol. The examples in the first positions will appear in&#xD;
         the HTML file under the caption "Examples" while the latest will appear&#xD;
         under the caption "Related Examples". More precisely, if the output of a&#xD;
         procedure contains k outputs and some optional input arguments the first&#xD;
         k+1 comment blocks will appear in the HTML file under "Examples".&#xD;
         First comment block is associated with the call of the procedure with&#xD;
         just one output and all default input arguments.&#xD;
         Second comment block is associated with the call of the procedure with&#xD;
         just one output and with some optional input arguments.&#xD;
         Third comment block is associated with the call of the procedure with&#xD;
         two output arguments.&#xD;
         ...&#xD;
         k+1 comment block is associated with the call of the procedure with&#xD;
         k output arguments.&#xD;
         k+2 comment block is the first which in the HTML file will appear under&#xD;
         the heading "Related Examples".&#xD;
         For example, suppose that the first example of procedure FSRmdr has to be&#xD;
         executed and its output must be included into the HTML file, then the accepted&#xD;
         format is as follows ("please notice the two symbols "%%" in the&#xD;
         first row").&#xD;
&#xD;
&#xD;
                         "%{".&#xD;
                             "%% FSRmdr with all default options".&#xD;
                             "% Compute minimum deletion residual".&#xD;
                             "% Monitor minimum deletion residual in each step of the forward search".&#xD;
                             "% Common part to all examples: load fishery dataset".&#xD;
                              load('fishery');&#xD;
                              y=fishery.data(:,2);&#xD;
                              X=fishery.data(:,1);&#xD;
                              "% Find starting subset"&#xD;
                              [out]=LXS(y,X,'nsamp',10000);&#xD;
                              [mdr] = FSRmdr(y,X,out.bs);&#xD;
                              plot(mdr(:,1),mdr(:,2))&#xD;
                              title('Monitoring of minimum deletion residual')&#xD;
                         "%}".&#xD;
&#xD;
                         "%{".&#xD;
                             "% FSRmdr with optional arguments".&#xD;
                             "% Choose step to start monitoring".&#xD;
                             "% Compute minimum deletion residual and&#xD;
                              start monitoring it from step 60".&#xD;
                             [mdr] = FSRmdr(y,X,out.bs,'init',60).&#xD;
                         "%}".&#xD;
&#xD;
          In order to understand where the example finish and the MATLAB code&#xD;
          starts publishFS checks if one of the following strings&#xD;
         is present&#xD;
         "Input parameters checking",&#xD;
         "Beginning of code",&#xD;
         "nargin".&#xD;
         If this is the case the search of "comments blocks signs"&#xD;
         (i.e. symbols  "%{" and "%}") is limited to the first character prior&#xD;
         to the detection of one of the previous strings. This&#xD;
         modification has been added in order to make sure that there are&#xD;
         no additional block signs within matlab code.&#xD;
&#xD;
         [9] If a procedure contains varargout, then the string:&#xD;
                       "Optional Output:"&#xD;
         must be present. For example suppose there is a function called mcd which&#xD;
         has the following sintax:&#xD;
&#xD;
                         function [RAW,REW,varargout] = mcd(Y,varargin).&#xD;
&#xD;
         Then at the end of the output argument the format must be as follows:&#xD;
&#xD;
                               Optional Output:&#xD;
&#xD;
                                         C     : matrix of the indices of the&#xD;
                                                 subsamples extracted for&#xD;
                                                 computing the estimate.&#xD;
&#xD;
         [10] If the .m file contains string  "More About:" a particular section&#xD;
         called "More about" in the HTML file will be created&#xD;
         (just before See Also).&#xD;
         [11] If the .m file contains string "Acknowledgements:" then a particular&#xD;
         section named "Acknowledgements" will be created just above the&#xD;
         references.&#xD;
&#xD;
--------------------------------------------------------------------------&#xD;
&#xD;
         GENERAL REMARKS:&#xD;
&#xD;
         -----------------------------------------------------------------------:.&#xD;
         REMARK1: if symbol "%" is wanted and it is not a simple comment delimiter, it&#xD;
         must be replaced by words "per cent". For example, string "50 envelope"&#xD;
         must become "50 per cent" envelope.&#xD;
         -----------------------------------------------------------------------:.&#xD;
         REMARK2: If there is just one output argument it can be without square&#xD;
         brackets. Among the input elements of a procedure the number of spaces&#xD;
         between them is not important. For example&#xD;
         "y,X,varargin" or "y, X   ,  varargin"   are both fine.&#xD;
         -----------------------------------------------------------------------:.&#xD;
         REMARK 3: publishFS uses javascript matlab-highlighter.min.js in order to&#xD;
         automatically color the examples in the HTML file.&#xD;
         -----------------------------------------------------------------------:.&#xD;
         REMARK 4: publishFS uses MathJax javascript in order to interpret the&#xD;
         equations inside the .m file written in Latex style. For in line&#xD;
         equations both symbols dollar dollar  and backslash(  backslash) are accepted.&#xD;
         For single line equations symbols backslash[ backslash] must be used.&#xD;
         -----------------------------------------------------------------------:.&#xD;
         REMARK 5: if there are not enough examples in the .m file the procedure&#xD;
         still runs but a warning will be automatically produced.&#xD;
         -----------------------------------------------------------------------:.&#xD;
         REMARK 6: the output file to be correctly viewed must be located in a&#xD;
         folder which contains a subfolder named includesFS containing the files&#xD;
         present inside&#xD;
         (home FSDA) filesep helpfiles filesep FSDA filesep includesFS.&#xD;
         Therefore if the&#xD;
         the directory which contains the output file is not located inside&#xD;
         (home FSDA) filesep helpfiles filesep FSDA subfolder&#xD;
         includesFS must be copied into the current folder.&#xD;
         -----------------------------------------------------------------------:.&#xD;
         REMARK 7: strings are HTML formatted as follows. Every time there is&#xD;
         symbol ". one_or_more_space symbol_of carriage_return" or&#xD;
         ": one_or_more_space symbol_of carriage_return" the parser adds HTML&#xD;
         string '&amp;lt;/p&amp;gt;/&amp;lt;p&amp;gt;' after just symbol "."  or symbol ":".&#xD;
         This is done using subfunction named formatHTML at the end of this file.&#xD;
         subfunction formatHTMLwithMATHJAX is even more general because it applies&#xD;
         function formatHTML just to the parts of the input string which are not&#xD;
         enclosed inside symbols 'backslash[ backslash]'.&#xD;
         -----------------------------------------------------------------------:.&#xD;
         REMARK 8: parser automatically puts an hyperlink every time in the text&#xD;
         there is something which starts with "http": or every time there is a&#xD;
         reference to a .m file. For example the sentence: "More details can be&#xD;
         found in routine ncx2mixtcdf.m" is converted as follows.&#xD;
         "More details can be found in routine&#xD;
         &amp;lt;a href="ncx2mixtcdf.html"&amp;gt;ncx2mixtcdf&amp;lt;/a&amp;gt;".&#xD;
         Similarly, a sentence such as:&#xD;
         The full paper can be downloaded from "http://www.mysite.org".&#xD;
         is converted as follows:&#xD;
         "The full paper can be donwloaded from&#xD;
         &amp;lt;a href="http://www.mysite.org"&amp;gt; http://www.mysite.org &amp;lt;/a&amp;gt;".&#xD;
         -----------------------------------------------------------------------:.&#xD;
&#xD;
</MoreAbout>
   <Acknowledgements><!--ACKNOWLEDGEMENTS SECTION--></Acknowledgements>
   <References><!--REFERENCES SECTION--></References>
   <SeeAlso><!--SEE ALSO SECTION-->
      <Item>publish</Item>
   </SeeAlso>
   <Ex><!--EXAMPLES SECTION-->
      <Item>
         <Title>Create file FSRmdr.html starting from file FSRmdr.</Title>
         <Desc/>
         <MATLABcode>
  out=publishFS('FSRmdr','evalCode',false,'Display','iter-detailed')&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>Create file FSRmdr.html starting from file FSRmdr and&#xD;
   display detailed information about the Input, Output and Optional&#xD;
   arguments.</Title>
         <Desc/>
         <MATLABcode>
  out=publishFS('FSRmdr','evalCode',false,'Display','iter-detailed')&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
   </Ex>
   <ExtraEx><!--EXTRA EXAMPLES SECTION-->
      <Item>
         <Title> </Title>
         <Desc> </Desc>
         <MATLABcode>
  out=publishFS('FSRmdr','evalCode',true,'outputDir','C:\tmp')&#xD;</MATLABcode>
         <Exec>0</Exec>
      </Item>
   </ExtraEx>
</HelpXML>