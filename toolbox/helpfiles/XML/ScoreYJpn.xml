<?xml version="1.0" encoding="utf-8"?>
<HelpXML>
   <Title><!--This is simply the filename-->ScoreYJpn</Title>
   <Purpose><!--This is the second line of the .m file-->Computes the score test for YJ transformation separately for pos and neg observations
</Purpose>
   <Description><!--Description section--></Description>
   <InpArgs><!--REQUIRED INPUT ARGUMENT SECTION-->
      <Item>
         <Name>y</Name>
         <ShortDesc>Response variable.</ShortDesc>
         <TypeInd>Vector.</TypeInd>
         <LongDesc>A vector with n elements that contains the response variable. It can be either a row or a column vector.</LongDesc>
         <Example> </Example>
         <DataType>single| double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>X</Name>
         <ShortDesc>Predictor variables.</ShortDesc>
         <TypeInd>Matrix.</TypeInd>
         <LongDesc>Data matrix of explanatory variables (also called 'regressors') of dimension (n x p-1). Rows of X represent observations, and columns represent variables.
Missing values (NaN's) and infinite values (Inf's) are allowed, since observations (rows) with missing or infinite values will automatically be excluded from the computations.</LongDesc>
         <Example> </Example>
         <DataType>single| double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
   </InpArgs>
   <OptArgs><!--OPTIONAL (NAME/PAIRS) INPUT ARGUMENT SECTION-->
      <Item>
         <Name>intercept</Name>
         <ShortDesc>Indicator for constant term.</ShortDesc>
         <TypeInd>Scalar.</TypeInd>
         <LongDesc>If 1, a model with constant term will be fitted (default), else no constant term will be included.</LongDesc>
         <Example>'intercept',1</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>la</Name>
         <ShortDesc>transformation parameter.</ShortDesc>
         <TypeInd>Vector.</TypeInd>
         <LongDesc>It specifies for which values of the transformation parameter it is necessary to compute the score test. Default value of lambda is la=[-1 -0.5 0 0.5 1]; that is the five most common values of lambda</LongDesc>
         <Example>'la',[0 0.5]</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>nocheck</Name>
         <ShortDesc>Check input arguments.</ShortDesc>
         <TypeInd>Scalar.</TypeInd>
         <LongDesc>If nocheck is equal to 1 no check is performed on matrix y and matrix X. Notice that y and X are left unchanged. In other words the additional column of ones for the intercept is not added. As default nocheck=0.</LongDesc>
         <Example>'nocheck',1</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
   </OptArgs>
   <OutArgs><!--OUTPUT ARGUMENT SECTION-->
      <Item>
         <Name>outSC</Name>
         <ShortDesc> </ShortDesc>
         <TypeInd> </TypeInd>
         <LongDesc> </LongDesc>
         <Structure>
            <ItemCell>
               <Value>Score</Value>
               <Description>score test. Matrix.
Matrix of size length(lambda)-by-2 which contains the value of the score test for each value of lambda specfied in optional input parameter la. The first column refers to the test for positive observations while the second column refers to the test for negative observations. If la is not specified, the number of rows of outSc.Score is equal to 5 and will contain the values of the score test for the 5 most common values of lambda.</Description>
            </ItemCell>
         </Structure>
      </Item>
   </OutArgs>
   <MoreAbout><!--MORE ABOUT SECTION--></MoreAbout>
   <Acknowledgements><!--ACKNOWLEDGEMENTS SECTION--></Acknowledgements>
   <References><!--REFERENCES SECTION-->
      <Item>Yeo, I.-K. and Johnson, R. (2000). A new family of power transformations to improve normality or symmetry. Biometrika, 87, 954-959.</Item>
      <Item>Atkinson A.C. and Riani M. (2018). Extensions of the score test.
Submitted.</Item>
   </References>
   <SeeAlso><!--SEE ALSO SECTION-->
      <Item>FSRfan</Item>
      <Item>Score</Item>
      <Item>ScoreYJ</Item>
   </SeeAlso>
   <Ex><!--EXAMPLES SECTION-->
      <Item>
         <Title>Ex in which positive and negative observations require the same lambda.</Title>
         <Desc> </Desc>
         <MATLABcode>
            <ItemCell>rng('default')</ItemCell>
            <ItemCell>rng(1)</ItemCell>
            <ItemCell>n=100;</ItemCell>
            <ItemCell>y=randn(n,1);</ItemCell>
            <ItemCell>% Transform the value to find out if we can recover the true value of</ItemCell>
            <ItemCell>% the transformation parameter</ItemCell>
            <ItemCell>la=0.5;</ItemCell>
            <ItemCell>ytra=normYJ(y,[],la,'inverse',true);</ItemCell>
            <ItemCell>% Start the analysis</ItemCell>
            <ItemCell>X=ones(n,1);</ItemCell>
            <ItemCell>[outSC]=ScoreYJ(ytra,X,'intercept',0);</ItemCell>
            <ItemCell>[outSCpn]=ScoreYJpn(ytra,X,'intercept',0);</ItemCell>
            <ItemCell>la=[-1 -0.5 0 0.5 1]';</ItemCell>
            <ItemCell>disp([la outSCpn.Score(:,1) outSC.Score outSCpn.Score(:,2)])</ItemCell>
            <ItemCell>% Comment: if we consider the 5 most common values of lambda</ItemCell>
            <ItemCell>% the value of the score test when lambda=0.5 is the only one which is not</ItemCell>
            <ItemCell>% significant. Both values of the score test for positive and negative</ItemCell>
            <ItemCell>% observations confirm that this value of the transformation parameter is</ItemCell>
            <ItemCell>% OK for both sides of the distribution.</ItemCell>
         </MATLABcode>
         <Exec>1</Exec>
      </Item>
      <Item>
         <Title>Ex in which positive and negative observation require different lambdas.</Title>
         <Desc> </Desc>
         <MATLABcode>
            <ItemCell>rng(1000)</ItemCell>
            <ItemCell>n=100;</ItemCell>
            <ItemCell>y=randn(n,1);</ItemCell>
            <ItemCell>% Tranform in a different way positive and negative values</ItemCell>
            <ItemCell>lapos=0;</ItemCell>
            <ItemCell>ytrapos=normYJ(y(y&amp;gt;=0),[],lapos,'inverse',true);</ItemCell>
            <ItemCell>laneg=1;</ItemCell>
            <ItemCell>ytraneg=normYJ(y(y&amp;lt;0),[],laneg,'inverse',true);</ItemCell>
            <ItemCell>ytra=[ytrapos; ytraneg];</ItemCell>
            <ItemCell>% Start the analysis</ItemCell>
            <ItemCell>X=ones(n,1);</ItemCell>
            <ItemCell>[outSC]=ScoreYJ(ytra,X,'intercept',0);</ItemCell>
            <ItemCell>[outSCpn]=ScoreYJpn(ytra,X,'intercept',0);</ItemCell>
            <ItemCell>la=[-1 -0.5 0 0.5 1]';</ItemCell>
            <ItemCell>disp([la outSCpn.Score(:,1) outSC.Score outSCpn.Score(:,2)])</ItemCell>
            <ItemCell>% Comment: if we consider the 5 most common values of lambda</ItemCell>
            <ItemCell>% the value of the score test when lambda=0.5 is the only one which is not</ItemCell>
            <ItemCell>% significant. However when lambda=0.5 the score test for negative</ItemCell>
            <ItemCell>% observations is highly significant. The difference between the test for</ItemCell>
            <ItemCell>% positive and the test for negative is 2.7597+0.7744=3.5341, which is very</ItemCell>
            <ItemCell>% large. This indicates that the two tails need a different value of the</ItemCell>
            <ItemCell>% transformation parameter.</ItemCell>
         </MATLABcode>
         <Exec>1</Exec>
      </Item>
   </Ex>
   <ExtraEx><!--EXTRA EXAMPLES SECTION-->
      <Item>
         <Title>Extended score with all default options for the wool data.</Title>
         <Desc>
            <ItemCell>Load the wool data.</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>XX=load('wool.txt');</ItemCell>
            <ItemCell>y=XX(:,end);</ItemCell>
            <ItemCell>X=XX(:,1:end-1);</ItemCell>
            <ItemCell>% Score test using the five most common values of lambda.</ItemCell>
            <ItemCell>% In this case (given that all observations are positive the extended</ItemCell>
            <ItemCell>% score test for positive observations reduces to the standard score test</ItemCell>
            <ItemCell>% while that for negative is equal to NaN.</ItemCell>
            <ItemCell>[outSc]=ScoreYJpn(y,X);</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>Extended score test using Darwin data given by Yeo and Yohnson.</Title>
         <Desc> </Desc>
         <MATLABcode>
            <ItemCell> y=[6.1, -8.4, 1.0, 2.0, 0.7, 2.9, 3.5, 5.1, 1.8, 3.6, 7.0, 3.0, 9.3, 7.5 -6.0]';</ItemCell>
            <ItemCell> n=length(y);</ItemCell>
            <ItemCell> X=ones(n,1);</ItemCell>
            <ItemCell> % Score and extended score test in the grid of lambda 1, 1.1, ..., 2</ItemCell>
            <ItemCell> la=[1:0.1:2];</ItemCell>
            <ItemCell> % Given that there are no explanatory variables the test must be</ItemCell>
            <ItemCell> % called with intercept 0</ItemCell>
            <ItemCell> outpn=ScoreYJpn(y,X,'intercept',0,'la',la);</ItemCell>
            <ItemCell> out=ScoreYJ(y,X,'intercept',0,'la',la);</ItemCell>
            <ItemCell> disp([la' outpn.Score(:,1) out.Score outpn.Score(:,2)])</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
   </ExtraEx>
</HelpXML>