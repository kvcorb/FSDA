<?xml version="1.0" encoding="utf-8"?>
<HelpXML>
   <Title><!--This is simply the filename-->tkmeans</Title>
   <Purpose><!--This is the second line of the .m file-->tkmeans computes trimmed k-means
</Purpose>
   <Description><!--Description section-->tkmeans(Y, k, alpha) partitions the points in the n-by-v data matrix Y into k clusters. This partition minimizes the trimmed sum, over all clusters, of the within-cluster sums of point-to-cluster-centroid distances. Rows of Y correspond to points, columns correspond to variables. tkmeans returns inside structure out an n-by-1 vector IDX containing the cluster indices of each point. By default, tkmeans uses (squared) Euclidean distances.
</Description>
   <InpArgs><!--REQUIRED INPUT ARGUMENT SECTION-->
      <Item>
         <Name>Y</Name>
         <ShortDesc>Input data.</ShortDesc>
         <TypeInd>Matrix.</TypeInd>
         <LongDesc>Data matrix containining n observations on v variables.
Rows of Y represent observations, and columns represent variables.
Missing values (NaN's) and infinite values (Inf's) are allowed, since observations (rows) with missing or infinite values will automatically be excluded from the computations.</LongDesc>
         <Example> </Example>
         <DataType>single| double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>k</Name>
         <ShortDesc>Number of groups.</ShortDesc>
         <TypeInd>Scalar.</TypeInd>
         <LongDesc> </LongDesc>
         <Example> </Example>
         <DataType>single| double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>alpha</Name>
         <ShortDesc>Global trimming level.</ShortDesc>
         <TypeInd>Scalar.</TypeInd>
         <LongDesc>alpha is a scalar between 0 and 0.5.
Il alpha = 0 tkmeans reduces to kmeans.</LongDesc>
         <Example> </Example>
         <DataType>single| double</DataType>
         <ReqArg>1</ReqArg>
         <Struct> </Struct>
      </Item>
   </InpArgs>
   <OptArgs><!--OPTIONAL (NAME/PAIRS) INPUT ARGUMENT SECTION-->
      <Item>
         <Name>nsamp</Name>
         <ShortDesc>Number of subsamples.</ShortDesc>
         <TypeInd>Integer.</TypeInd>
         <LongDesc>Number of subsamples which will be extracted to find the partition. If nsamp=0 all subsets will be extracted. They will be (n choose k).
Remark: if the number of all possible subset is &amp;lt;300 the default is to extract all subsets, otherwise just 300.</LongDesc>
         <Example>'nsamp',0</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>refsteps</Name>
         <ShortDesc>Number of iterations.</ShortDesc>
         <TypeInd>Scalar.</TypeInd>
         <LongDesc>Number of refining iterations in each subsample (default = 15).</LongDesc>
         <Example>'refsteps',20</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>reftol</Name>
         <ShortDesc>Tolerance.</ShortDesc>
         <TypeInd>Scalar.</TypeInd>
         <LongDesc>Default value of tolerance for the refining steps. The default value is 1e-14.</LongDesc>
         <Example>'reftol',0.0001</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>weights</Name>
         <ShortDesc>Cluster weights.</ShortDesc>
         <TypeInd>Integer.</TypeInd>
         <LongDesc>A dummy scalar, specifying whether cluster weights (1) shall be considered in the concentration and assignment steps. If weights=1 in the assignment step to the squared Euclidean distance of unit i to group j log n_j is substracted. The default is no cluster weights.</LongDesc>
         <Example>'weights',1</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>plots</Name>
         <ShortDesc>Plot on the screen.</ShortDesc>
         <TypeInd>Scalar, character, cell or struct.</TypeInd>
         <LongDesc>- If plots=0 (default), plots are not generated.
- If plot=1, a plot with the classification is shown on the screen (using the spmplot function). The plot can be:
* for v=1, an histogram of the univariate data.
* for v=2, a bivariate scatterplot.
* for v&amp;gt;2, a scatterplot matrix generated by spmplot.
When v&amp;gt;=2 plots offers the following additional features (for v=1 the behaviour is forced to be as for plots=1):
- plots='contourf' adds in the background of the bivariate scatterplots a filled contour plot. The colormap of the filled contour is based on grey levels as default.
This argument may also be inserted in a field named 'type' of a structure. In the latter case it is possible to specify the additional field 'cmap', which changes the default colors of the color map used. The field 'cmap' may be a three-column matrix of values in the range [0,1] where each row is an RGB triplet that defines one color.
Check the colormap function for additional informations.
- plots='contour' adds in the background of the bivariate scatterplots a contour plot. The colormap of the contour is based on grey levels as default. This argument may also be inserted in a field named 'type' of a structure.
In the latter case it is possible to specify the additional field 'cmap', which changes the default colors of the color map used. The field 'cmap' may be a three-column matrix of values in the range [0,1] where each row is an RGB triplet that defines one color.
Check the colormap function for additional informations.
- plots='ellipse' superimposes confidence ellipses to each group in the bivariate scatterplots. The size of the ellipse is chi2inv(0.95,2), i.e. the confidence level used by default is 95%. This argument may also be inserted in a field named 'type' of a structure. In the latter case it is possible to specify the additional field 'conflev', which specifies the confidence level to use and it is a value between 0 and 1.
- plots='boxplotb' superimposes on the bivariate scatterplots the bivariate boxplots for each group, using the boxplotb function. This argument may also be inserted in a field named 'type' of a structure.
REMARK - The labels=0 are automatically excluded from the overlaying phase, considering them as outliers.</LongDesc>
         <Example>'plots', 1</Example>
         <DataType>single | double | string</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>msg</Name>
         <ShortDesc>Message on the screen.</ShortDesc>
         <TypeInd>Scalar.</TypeInd>
         <LongDesc>Scalar which controls whether to display or not messages on the screen. If msg=1 (default) messages are displayed on the screen about estimated time to compute the estimator else no message is displayed on the screen.</LongDesc>
         <Example>'msg',1</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>nocheck</Name>
         <ShortDesc>Check input.</ShortDesc>
         <TypeInd>Scalar.</TypeInd>
         <LongDesc>If nocheck is equal to 1 no check is performed on matrix Y.
As default nocheck=0.</LongDesc>
         <Example>'nocheck',1</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>nomes</Name>
         <ShortDesc>Estimated time message.</ShortDesc>
         <TypeInd>Scalar.</TypeInd>
         <LongDesc>If nomes is equal to 1 no message about estimated time to compute tkemans is displayed, else if nomes is equal to 0 (default), a message about estimated time is displayed.</LongDesc>
         <Example>'nomes',1</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
      <Item>
         <Name>Ysave</Name>
         <ShortDesc>Saving Y.</ShortDesc>
         <TypeInd>Scalar.</TypeInd>
         <LongDesc>Scalar that is set to 1 to request that the input matrix Y is saved into the output structure out.
Default is 0, i.e. no saving is done.</LongDesc>
         <Example>'Ysave',1</Example>
         <DataType>double</DataType>
         <Struct> </Struct>
      </Item>
   </OptArgs>
   <OutArgs><!--OUTPUT ARGUMENT SECTION-->
      <Item>
         <Name>out</Name>
         <ShortDesc> </ShortDesc>
         <TypeInd> </TypeInd>
         <LongDesc> </LongDesc>
         <Structure>
            <ItemCell>
               <Value>idx</Value>
               <Description>n-by-1 vector containing assignment of each unit to each of the k groups. Cluster names are integer numbers from 1 to k, 0 indicates trimmed observations.</Description>
            </ItemCell>
            <ItemCell>
               <Value>muopt</Value>
               <Description>k-by-v matrix containing cluster centroids locations. Robust estimate of final centroids of the groups.</Description>
            </ItemCell>
            <ItemCell>
               <Value>sigmaopt</Value>
               <Description>v-by-v-by-k empirical covariance matrices of the groups found by tkmeans.</Description>
            </ItemCell>
            <ItemCell>
               <Value>BoxTest</Value>
               <Description>Structure containing the results of the Box test of equality of covariance matrices.</Description>
            </ItemCell>
            <ItemCell>
               <Value>bs</Value>
               <Description>k-by-1 vector containing the units forming initial subset associated with muopt.</Description>
            </ItemCell>
            <ItemCell>
               <Value>D</Value>
               <Description>n-by-k matrix containing squared Euclidean distances from each point to every centroid.</Description>
            </ItemCell>
            <ItemCell>
               <Value>siz</Value>
               <Description>Matrix of size k-by-3 1st col = sequence from 0 to k 2nd col = number of observations in each cluster 3rd col = percentage of observations in each cluster Remark: 0 denotes unassigned units.</Description>
            </ItemCell>
            <ItemCell>
               <Value>weights</Value>
               <Description>Numerical vector of length k, containing the weights of each cluster. If input option weights=1 out.weights=(1/k, ...., 1/k) else if input option weights &amp;lt;&amp;gt; 1 out.weights=(n1/n, ..., nk/n).</Description>
            </ItemCell>
            <ItemCell>
               <Value>h</Value>
               <Description>Scalar. Number of observations that have determined the centroids (number of untrimmed units).</Description>
            </ItemCell>
            <ItemCell>
               <Value>obj</Value>
               <Description>Scalar. Value of the objective function which is minimized (value of the best returned solution).</Description>
            </ItemCell>
            <ItemCell>
               <Value>Y</Value>
               <Description>Original data matrix Y. The field is present if option Ysave is set to 1.</Description>
            </ItemCell>
            <ItemCell>
               <Value>emp</Value>
               <Description>"Empirical" statistics computed on final classification.
Scalar or structure. When convergence is reached, out.emp=0. When convergence is not obtained, this field is a structure which contains the statistics of interest: idxemp (ordered from 0 to k*, k* being the number of groups with at least one observation and 0 representing the possible group of outliers), muemp, sigmaemp and sizemp, which are the empirical counterparts of idx, muopt, sigmaopt and siz.</Description>
            </ItemCell>
         </Structure>
      </Item>
      <Item>
         <Name>varargout</Name>
         <ShortDesc>Cell</ShortDesc>
         <TypeInd>C : Subsamples extracted.</TypeInd>
         <LongDesc>nsamp-by-k initial subsamples extracted.</LongDesc>
         <Structure> </Structure>
      </Item>
   </OutArgs>
   <MoreAbout><!--MORE ABOUT SECTION-->This iterative algorithm initializes k clusters randomly and performs "concentration steps" in order to improve the current cluster assignment.
The number of maximum concentration steps to be performed is given by input parameter refsteps. For approximately obtaining the global optimum, the system is initialized nsamp times and concentration steps are performed until convergence or refsteps is reached. When processing more complex data sets higher values of nsamp and refsteps have to be specified (obviously implying extra computation time). However, if more then half of the iterations do not converge, a warning message is issued, indicating that nsamp has to be increased.
</MoreAbout>
   <Acknowledgements><!--ACKNOWLEDGEMENTS SECTION--></Acknowledgements>
   <References><!--REFERENCES SECTION-->
      <Item>Garcia-Escudero, L.A., Gordaliza, A., Matran, C. and Mayo-Iscar, A. (2008), A General Trimming Approach to Robust Cluster Analysis. Annals of Statistics, Vol.36, 1324-1345. Technical Report available at:
www.eio.uva.es/inves/grupos/representaciones/trTCLUST.pdf</Item>
   </References>
   <SeeAlso><!--SEE ALSO SECTION-->
      <Item>kmeans</Item>
      <Item>tclust</Item>
   </SeeAlso>
   <Ex><!--EXAMPLES SECTION-->
      <Item>
         <Title>Trimmed k-means using geyser data (1).</Title>
         <Desc>
            <ItemCell>3 groups and trimming level of 3 percent</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>close all</ItemCell>
            <ItemCell>Y=load('geyser2.txt');</ItemCell>
            <ItemCell>out=tkmeans(Y,3,0.03,'plots',1)</ItemCell>
         </MATLABcode>
         <Exec>1</Exec>
      </Item>
      <Item>
         <Title>Trimmed k-means using geyser data (2).</Title>
         <Desc>
            <ItemCell>option weights =1</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>close all</ItemCell>
            <ItemCell>Y=load('geyser2.txt');</ItemCell>
            <ItemCell>out=tkmeans(Y,3,0.03,'plots',1,'weights',1)</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>Trimmed k-means using M5data and different plots.</Title>
         <Desc>
            <ItemCell>Weights =1</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>Y=load('M5data.txt');</ItemCell>
            <ItemCell>close all</ItemCell>
            <ItemCell>out=tkmeans(Y(:,1:2),3,0,'plots',1)</ItemCell>
            <ItemCell>out=tkmeans(Y(:,1:2),3,0.1,'plots','ellipse')</ItemCell>
            <ItemCell>out=tkmeans(Y(:,1:2),3,0.1,'plots','contour')</ItemCell>
            <ItemCell>out=tkmeans(Y(:,1:2),3,0.1,'plots','contourf')</ItemCell>
            <ItemCell>out=tkmeans(Y(:,1:2),3,0.1,'plots','boxplotb')</ItemCell>
            <ItemCell>cascade;</ItemCell>
            <ItemCell>% using a structure for plots</ItemCell>
            <ItemCell>contOpt = struct;</ItemCell>
            <ItemCell>contOpt.cmap = summer</ItemCell>
            <ItemCell>out=tkmeans(Y(:,1:2),3,0.1,'plots',contOpt)</ItemCell>
            <ItemCell>cascade</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
   </Ex>
   <ExtraEx><!--EXTRA EXAMPLES SECTION-->
      <Item>
         <Title>Trimmed k-means using structured noise.</Title>
         <Desc>
            <ItemCell>The data have been generated using the following R instructions set.seed (0) v &amp;lt;- runif (100, -2 * pi, 2 * pi) noise &amp;lt;- cbind (100 + 25 * sin (v), 10 + 5 * v) x &amp;lt;- rbind ( rmvnorm (360, c (0.0, 0), matrix (c (1, 0, 0, 1), ncol = 2)), rmvnorm (540, c (5.0, 10), matrix (c (6, -2, -2, 6), ncol = 2)), noise)</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>close all</ItemCell>
            <ItemCell>Y=load('structurednoise.txt');</ItemCell>
            <ItemCell>out=tkmeans(Y(:,1:2),2,0.1,'plots',1)</ItemCell>
            <ItemCell>out=tkmeans(Y(:,1:2),5,0.15,'plots',1)</ItemCell>
            <ItemCell>cascade</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
      <Item>
         <Title>Trimmed k-means using mixture100 data.</Title>
         <Desc>
            <ItemCell>The data have been generated using the following R instructions set.seed (100) mixt &amp;lt;- rbind (rmvnorm (360, c ( 0, 0), matrix (c (1, 0, 0, 1), ncol = 2)), rmvnorm (540, c ( 5, 10), matrix (c (6, -2, -2, 6), ncol = 2)), rmvnorm (100, c (2.5, 5), matrix (c (50, 0, 0, 50), ncol = 2)))</ItemCell>
         </Desc>
         <MATLABcode>
            <ItemCell>close all</ItemCell>
            <ItemCell>Y=load('mixture100.txt');</ItemCell>
            <ItemCell>out=tkmeans(Y(:,1:2),3,0,'plots',1)</ItemCell>
            <ItemCell>out=tkmeans(Y(:,1:2),2,0.05,'plots',1)</ItemCell>
            <ItemCell>cascade</ItemCell>
         </MATLABcode>
         <Exec>0</Exec>
      </Item>
   </ExtraEx>
</HelpXML>